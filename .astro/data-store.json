[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.8.1","content-config-digest","8e098eeca6f4230b","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.aprendiendodesarrollo.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,26,27,38,39,61,62,91,92,127,128,155,156,187,188,226,227,246,247,284,285,360,361,408,409,419,420,455,456,482,483,517,518,569,570,581,582,591,592,602,603,613,614,624,625,635,636,692,693,725,726,738,739,758,759,779,780,800,801,840,841,872,873,907,908,952,953,987,988,1037,1038,1112,1113,1147,1148,1179,1180,1217,1218,1253,1254,1284,1285,1323,1324,1360,1361,1401,1402,1448,1449,1512,1513,1560,1561,1629,1630,1669,1670,1690,1691,1711,1712,1734,1735],"backend",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"legacyId":24,"deferredRender":25},{"rutas":14,"title":15,"description":16,"lang":17,"dir":18,"pubDate":19,"updatedDate":20},[15],"Backend","Lorem ipsum dolor sit amet","es","ltr",["Date","2023-12-19T07:00:00.000Z"],["Date","2023-12-19T07:00:00.000Z"],"import Pregunta from '@Components/pruebas/Pregunta'\r\n\r\n## ¿Qué es un Desarrollador Backend?\r\n\r\nEl desarrollo web backend es la parte del desarrollo web que se ocupa del lado del servidor de una aplicación web. Esto incluye la creación y gestión de la lógica del lado del servidor, la conexión de la aplicación a una base de datos, la creación de APIs del lado del servidor, el manejo de la autenticación y autorización de usuarios, y el procesamiento y respuesta a las solicitudes de los usuarios. A menudo, implica el uso de lenguajes de programación como Python, Java, Ruby, PHP, JavaScript (Node.js) y los lenguajes .NET.\r\n\r\n* [¿Qué es un Desarrollador Backend?](https://hireline.io/mx/enciclopedia-de-perfiles-de-tecnologia/desarrollador-backend#:~:text=¿Qué%20es%20un%20Desarrollador%20Backend,herramientas%20específicas%20para%20su%20área.)\r\n* [Backend developer: que es, funciones y cómo serlo](https://unirfp.unir.net/revista/ingenieria-y-tecnologia/backend-developer/)\r\n\r\n\u003CPregunta\r\n    question=\"¿Qué es un Desarrollador Backend?\"\r\n    options={[\"Es la parte del desarrollo web que se ocupa del lado del servidor de una aplicación web.\", \"Es la parte del desarrollo web que se ocupa del lado del cliente de una aplicación web.\", \"Es la parte del desarrollo web que se ocupa de la interfaz de usuario de una aplicación web.\"]}\r\n    correctAnswer=\"Es la parte del desarrollo web que se ocupa del lado del servidor de una aplicación web.\"\r\n/>\r\n\r\n## ¿Qué hace un desarrollador backend?\r\nUn desarrollador backend es responsable del desarrollo de los componentes del lado del servidor de una aplicación web, es decir, trabajar con bases de datos, manejar solicitudes, crear APIs del lado del servidor que puedan ser consumidas por desarrolladores del lado del cliente para recuperar y manipular datos, asegurando la escalabilidad de los sistemas, es decir, garantizando que el lado del servidor pueda manejar un alto volumen de tráfico y sea eficiente, e integrando servicios externos como pasarelas de pago, colas de mensajes, servicios en la nube, etc.\r\n\r\n* [¿Qué hace un desarrollador backend?](https://www.coderhouse.com.mx/blog/desarrollador-backend-perfil-sueldo-estudiar)","src/content/blog/backend.mdx","9fdb55ee85fe0121","backend.mdx",true,"algoritmos/recursion",{"id":26,"data":28,"body":34,"filePath":35,"digest":36,"legacyId":37,"deferredRender":25},{"rutas":29,"title":31,"description":16,"lang":17,"dir":18,"pubDate":32,"updatedDate":33},[30],"ComputerScience","Recursividad",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"La recursión es un método para resolver problemas donde la solución depende de soluciones a instancias más pequeñas del mismo problema. Un algoritmo recursivo debe tener un caso base. Un algoritmo recursivo se llama a sí mismo de manera recursiva.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yX5kR63Dpdw?si=pBtY8rww27iaxd_a\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Recursión de cola\r\n\r\nLa recursión de cola es un tipo especial de recursión en la que la llamada recursiva es la última acción en la función. Es una función que no hace nada después de realizar la recursión.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SIgfSYyWVjo?si=hSl9WLwh-wa_q7y-\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Recursión sin cola\r\n\r\nLa recursión de cola es cuando una función puede devolver directamente el resultado de una llamada recursiva; no hay operaciones pendientes y no es necesario preservar el marco de la pila de llamadas. Por lo tanto, puede traducirse a un \"goto con argumentos\" y el uso de la pila será constante.\r\n\r\nEn la \"recursión no de cola\", hay operaciones pendientes después de la llamada recursiva y el marco de la pila no puede ser eliminado.","src/content/blog/algoritmos/recursion.mdx","ad396ed113c63aba","algoritmos/recursion.mdx","computer-science",{"id":38,"data":40,"body":45,"filePath":46,"digest":47,"rendered":48,"legacyId":60},{"rutas":41,"title":42,"description":16,"lang":17,"dir":18,"pubDate":43,"updatedDate":44},[30],"Ciencias de la Computación",["Date","2023-12-19T07:00:00.000Z"],["Date","2023-12-19T07:00:00.000Z"],"Las Ciencias de la Computación son un campo de estudio que se ocupa de la teoría y la práctica de la computación. Se centra en el estudio de algoritmos, estructuras de datos, diseño de software, desarrollo de sistemas, inteligencia artificial, teoría de la información, análisis de datos y muchos otros aspectos relacionados con la informática.\r\n\r\nAlgunos de los temas clave en Ciencias de la Computación incluyen:\r\n\r\n**Algoritmos y Estructuras de Datos**: Estudio de algoritmos eficientes para resolver problemas y las estructuras de datos utilizadas para organizar y almacenar información.\r\n\r\n**Programación**: Desarrollo de habilidades de programación para implementar soluciones de software.\r\n\r\n**Teoría de la Computación**: Explora los fundamentos matemáticos de la computación, incluyendo la teoría de autómatas, la teoría de la complejidad computacional y la lógica.\r\n\r\n**Inteligencia Artificial (IA)**: Se enfoca en el desarrollo de sistemas y algoritmos que pueden realizar tareas que normalmente requieren inteligencia humana, como el aprendizaje automático y el procesamiento del lenguaje natural.\r\n\r\n**Sistemas Operativos**: Estudia el diseño, implementación y gestión de sistemas operativos que permiten la interacción entre el hardware y el software de una computadora.\r\n\r\n**Redes de Computadoras**: Examina la comunicación de datos entre dispositivos y sistemas a través de redes, incluyendo el diseño y la gestión de redes.\r\n\r\n**Seguridad Informática**: Se centra en proteger sistemas, redes y datos contra amenazas y ataques cibernéticos.\r\n\r\n**Desarrollo de Software**: Incluye metodologías y prácticas para planificar, diseñar, implementar y mantener software de manera efectiva.\r\n\r\nEstas son solo algunas áreas y hay muchas más especializaciones dentro de las Ciencias de la Computación. La disciplina es fundamental en la resolución de problemas, la innovación tecnológica y la transformación digital en una variedad de campos, desde la industria y la investigación hasta la medicina y la educación.","src/content/blog/computer-science.md","b2abbd69a47a60d7",{"html":49,"metadata":50},"\u003Cp>Las Ciencias de la Computación son un campo de estudio que se ocupa de la teoría y la práctica de la computación. Se centra en el estudio de algoritmos, estructuras de datos, diseño de software, desarrollo de sistemas, inteligencia artificial, teoría de la información, análisis de datos y muchos otros aspectos relacionados con la informática.\u003C/p>\n\u003Cp>Algunos de los temas clave en Ciencias de la Computación incluyen:\u003C/p>\n\u003Cp>\u003Cstrong>Algoritmos y Estructuras de Datos\u003C/strong>: Estudio de algoritmos eficientes para resolver problemas y las estructuras de datos utilizadas para organizar y almacenar información.\u003C/p>\n\u003Cp>\u003Cstrong>Programación\u003C/strong>: Desarrollo de habilidades de programación para implementar soluciones de software.\u003C/p>\n\u003Cp>\u003Cstrong>Teoría de la Computación\u003C/strong>: Explora los fundamentos matemáticos de la computación, incluyendo la teoría de autómatas, la teoría de la complejidad computacional y la lógica.\u003C/p>\n\u003Cp>\u003Cstrong>Inteligencia Artificial (IA)\u003C/strong>: Se enfoca en el desarrollo de sistemas y algoritmos que pueden realizar tareas que normalmente requieren inteligencia humana, como el aprendizaje automático y el procesamiento del lenguaje natural.\u003C/p>\n\u003Cp>\u003Cstrong>Sistemas Operativos\u003C/strong>: Estudia el diseño, implementación y gestión de sistemas operativos que permiten la interacción entre el hardware y el software de una computadora.\u003C/p>\n\u003Cp>\u003Cstrong>Redes de Computadoras\u003C/strong>: Examina la comunicación de datos entre dispositivos y sistemas a través de redes, incluyendo el diseño y la gestión de redes.\u003C/p>\n\u003Cp>\u003Cstrong>Seguridad Informática\u003C/strong>: Se centra en proteger sistemas, redes y datos contra amenazas y ataques cibernéticos.\u003C/p>\n\u003Cp>\u003Cstrong>Desarrollo de Software\u003C/strong>: Incluye metodologías y prácticas para planificar, diseñar, implementar y mantener software de manera efectiva.\u003C/p>\n\u003Cp>Estas son solo algunas áreas y hay muchas más especializaciones dentro de las Ciencias de la Computación. La disciplina es fundamental en la resolución de problemas, la innovación tecnológica y la transformación digital en una variedad de campos, desde la industria y la investigación hasta la medicina y la educación.\u003C/p>",{"headings":51,"localImagePaths":52,"remoteImagePaths":53,"frontmatter":54,"imagePaths":59},[],[],[],{"rutas":55,"title":42,"description":16,"pubDate":56,"updatedDate":56,"link":57,"lastModified":58},[30],"Dec 19 2023","/blog/Backend/backend","2024-02-08T00:32:06-07:00",[],"computer-science.md","algoritmos/algoritmos-arbol",{"id":61,"data":63,"body":68,"filePath":69,"digest":70,"rendered":71,"legacyId":90},{"rutas":64,"title":65,"description":16,"lang":17,"dir":18,"pubDate":66,"updatedDate":67},[30],"Arboles",["Date","2024-05-29T07:00:00.000Z"],["Date","2024-05-29T07:00:00.000Z"],"Un árbol es una estructura de datos no lineal y jerárquica que consiste en una colección de nodos, de manera que cada nodo del árbol almacena un valor y una lista de referencias a otros nodos (los \"hijos\").\r\n\r\nAquí está la lista de algoritmos comunes de árboles:\r\n\r\n- Recorrido de Árbol:\r\n    \u003Cbr/>\u003Cbr/>\r\n    - Recorrido en Preorden\r\n    - Recorrido en Inorden\r\n    - Recorrido en Postorden\r\n- Búsqueda en Anchura\r\n- Búsqueda en Profundidad\r\n\r\n## Recorrido en preorden, Inorden, Postorden\r\nEl recorrido en preorden es un algoritmo de recorrido de árboles que visita primero el nodo raíz, luego recorre recursivamente el subárbol izquierdo, seguido del subárbol derecho.\r\n\r\nEl recorrido en inorden es un algoritmo de recorrido de árboles que visita el subárbol izquierdo, luego la raíz y después el subárbol derecho. Esta es la forma más común de recorrer un árbol binario de búsqueda. También se usa para crear una lista ordenada de nodos en un árbol binario de búsqueda.\r\n\r\nEl recorrido en postorden es un tipo de recorrido de árboles que visita primero el subárbol izquierdo, luego el subárbol derecho y finalmente el nodo raíz. Esto es lo opuesto al recorrido en preorden, que visita primero el nodo raíz, luego el subárbol izquierdo y finalmente el subárbol derecho.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Recorrido_de_árboles)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Jo2euX89Oz8?si=4-p0UN0JaKz3BsUN\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n## Búsqueda en Anchura y Profundidad\r\nLa búsqueda en anchura es un algoritmo de recorrido de grafos que comienza en el nodo raíz y explora todos los nodos vecinos en la profundidad actual antes de pasar a los nodos en el siguiente nivel de profundidad.\r\n\r\nLa búsqueda en profundidad es un algoritmo de recorrido de grafos que comienza en un nodo raíz y explora lo más lejos posible a lo largo de cada rama antes de retroceder.\r\n\r\n* [Repaso](/blog/ComputerScience/algoritmos/algoritmos-grafos#búsqueda-en-anchura)","src/content/blog/algoritmos/algoritmos-arbol.md","c5d287a17c02bdf8",{"html":72,"metadata":73},"\u003Cp>Un árbol es una estructura de datos no lineal y jerárquica que consiste en una colección de nodos, de manera que cada nodo del árbol almacena un valor y una lista de referencias a otros nodos (los “hijos”).\u003C/p>\n\u003Cp>Aquí está la lista de algoritmos comunes de árboles:\u003C/p>\n\u003Cul>\n\u003Cli>Recorrido de Árbol:\r\n\u003Cbr>\u003Cbr>\n\u003Cul>\n\u003Cli>Recorrido en Preorden\u003C/li>\n\u003Cli>Recorrido en Inorden\u003C/li>\n\u003Cli>Recorrido en Postorden\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Búsqueda en Anchura\u003C/li>\n\u003Cli>Búsqueda en Profundidad\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"recorrido-en-preorden-inorden-postorden\">Recorrido en preorden, Inorden, Postorden\u003C/h2>\n\u003Cp>El recorrido en preorden es un algoritmo de recorrido de árboles que visita primero el nodo raíz, luego recorre recursivamente el subárbol izquierdo, seguido del subárbol derecho.\u003C/p>\n\u003Cp>El recorrido en inorden es un algoritmo de recorrido de árboles que visita el subárbol izquierdo, luego la raíz y después el subárbol derecho. Esta es la forma más común de recorrer un árbol binario de búsqueda. También se usa para crear una lista ordenada de nodos en un árbol binario de búsqueda.\u003C/p>\n\u003Cp>El recorrido en postorden es un tipo de recorrido de árboles que visita primero el subárbol izquierdo, luego el subárbol derecho y finalmente el nodo raíz. Esto es lo opuesto al recorrido en preorden, que visita primero el nodo raíz, luego el subárbol izquierdo y finalmente el subárbol derecho.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Recorrido_de_%C3%A1rboles\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Jo2euX89Oz8?si=4-p0UN0JaKz3BsUN\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"búsqueda-en-anchura-y-profundidad\">Búsqueda en Anchura y Profundidad\u003C/h2>\n\u003Cp>La búsqueda en anchura es un algoritmo de recorrido de grafos que comienza en el nodo raíz y explora todos los nodos vecinos en la profundidad actual antes de pasar a los nodos en el siguiente nivel de profundidad.\u003C/p>\n\u003Cp>La búsqueda en profundidad es un algoritmo de recorrido de grafos que comienza en un nodo raíz y explora lo más lejos posible a lo largo de cada rama antes de retroceder.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/ComputerScience/algoritmos/algoritmos-grafos#b%C3%BAsqueda-en-anchura\">Repaso\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":74,"localImagePaths":82,"remoteImagePaths":83,"frontmatter":84,"imagePaths":89},[75,79],{"depth":76,"slug":77,"text":78},2,"recorrido-en-preorden-inorden-postorden","Recorrido en preorden, Inorden, Postorden",{"depth":76,"slug":80,"text":81},"búsqueda-en-anchura-y-profundidad","Búsqueda en Anchura y Profundidad",[],[],{"rutas":85,"title":65,"description":16,"pubDate":86,"updatedDate":86,"link":87,"lastModified":88},[30],"May 29 2024","","2024-05-29T13:42:07-07:00",[],"algoritmos/algoritmos-arbol.md","algoritmos/algoritmos-grafos",{"id":91,"data":93,"body":98,"filePath":99,"digest":100,"rendered":101,"legacyId":126},{"rutas":94,"title":95,"description":16,"lang":17,"dir":18,"pubDate":96,"updatedDate":97},[30],"Grafos",["Date","2024-05-25T07:00:00.000Z"],["Date","2024-05-25T07:00:00.000Z"],"Los grafos en estructuras de datos son estructuras de datos no lineales compuestas por un número finito de nodos o vértices y las aristas que los conectan. Los grafos en estructuras de datos se utilizan para abordar problemas del mundo real en los que representan el área del problema como una red, como redes telefónicas, redes de circuitos y redes sociales.\r\n\r\n## Búsqueda en Anchura\r\nLa búsqueda en anchura para un grafo es una forma de recorrer el grafo. Comienza en el nodo raíz y explora todos los nodos vecinos en la profundidad actual antes de pasar a los nodos en el siguiente nivel de profundidad.\r\n\r\n* [Geeks for Geeks](https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HZ5YTanv5QE?si=MDOJR0uegkPHb0Ol&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n\r\n## Búsqueda en profundidad\r\n\r\nLa búsqueda en profundidad es un algoritmo de recorrido de grafos que comienza en un nodo raíz y explora lo más lejos posible a lo largo de cada rama antes de retroceder.\r\n\r\n* [Geeks for Geeks](https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/?ref=lbp)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Urx87-NMm6c?si=ElNRw4FyzgSE41Mg&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UAIDAxof3kA?si=orcgZN8TGxggk_vq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_Yf8tneauJ8?si=AeGHiMKxjSkhAMTM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n## Algoritmo de Bellman-Ford\r\nEl algoritmo de Bellman-Ford es un algoritmo de grafos que encuentra el camino más corto desde un vértice de origen hasta todos los demás vértices en un grafo. Es un algoritmo de programación dinámica que utiliza un enfoque de abajo hacia arriba para encontrar el camino más corto. Es similar al algoritmo de Dijkstra, pero puede manejar pesos negativos. También es similar al algoritmo de Floyd-Warshall, pero puede manejar pesos negativos y es más rápido que el algoritmo de Floyd-Warshall.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Algoritmo_de_Bellman-Ford)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9PHkk0UavIM?si=P-pZASJv5NwdC2_i\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/obWXjtg0L64?si=2BDo_S1DjqQ1iazB&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n## Algoritmo de Dijkstra\r\nEl algoritmo de Dijkstra es un algoritmo de recorrido de grafos que encuentra el camino más corto entre dos nodos en un grafo. Es un algoritmo de grafos ponderados, lo que significa que cada arista en el grafo tiene un peso asociado. El algoritmo funciona encontrando el camino más corto desde el nodo inicial hasta todos los demás nodos en el grafo. Lo hace manteniendo un registro de la distancia desde el nodo inicial hasta cada nodo y luego eligiendo el nodo con la distancia más corta desde el nodo inicial para visitar a continuación. Luego actualiza la distancia de cada nodo desde el nodo inicial y repite el proceso hasta que todos los nodos hayan sido visitados.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4I7W5WUQQQI?si=CFw-oI-7ArePZKqQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n## Algoritmo A*\r\n\r\nA* es un algoritmo de recorrido de grafos que se utiliza para encontrar el camino más corto entre dos nodos en un grafo. Es una versión modificada del algoritmo de Dijkstra que utiliza heurísticas para encontrar el camino más corto. Se usa en la búsqueda de caminos y en el recorrido de grafos.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Algoritmo_de_búsqueda_A*)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1gszEk8rUS4?si=PleD361Lmqzw8Bej\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NWS-_VsMab4?si=lb9eeLWYZfFynGkN\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>","src/content/blog/algoritmos/algoritmos-grafos.md","caa7f875d86e3425",{"html":102,"metadata":103},"\u003Cp>Los grafos en estructuras de datos son estructuras de datos no lineales compuestas por un número finito de nodos o vértices y las aristas que los conectan. Los grafos en estructuras de datos se utilizan para abordar problemas del mundo real en los que representan el área del problema como una red, como redes telefónicas, redes de circuitos y redes sociales.\u003C/p>\n\u003Ch2 id=\"búsqueda-en-anchura\">Búsqueda en Anchura\u003C/h2>\n\u003Cp>La búsqueda en anchura para un grafo es una forma de recorrer el grafo. Comienza en el nodo raíz y explora todos los nodos vecinos en la profundidad actual antes de pasar a los nodos en el siguiente nivel de profundidad.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/\">Geeks for Geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HZ5YTanv5QE?si=MDOJR0uegkPHb0Ol&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"búsqueda-en-profundidad\">Búsqueda en profundidad\u003C/h2>\n\u003Cp>La búsqueda en profundidad es un algoritmo de recorrido de grafos que comienza en un nodo raíz y explora lo más lejos posible a lo largo de cada rama antes de retroceder.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/?ref=lbp\">Geeks for Geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Urx87-NMm6c?si=ElNRw4FyzgSE41Mg&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UAIDAxof3kA?si=orcgZN8TGxggk_vq\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_Yf8tneauJ8?si=AeGHiMKxjSkhAMTM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"algoritmo-de-bellman-ford\">Algoritmo de Bellman-Ford\u003C/h2>\n\u003Cp>El algoritmo de Bellman-Ford es un algoritmo de grafos que encuentra el camino más corto desde un vértice de origen hasta todos los demás vértices en un grafo. Es un algoritmo de programación dinámica que utiliza un enfoque de abajo hacia arriba para encontrar el camino más corto. Es similar al algoritmo de Dijkstra, pero puede manejar pesos negativos. También es similar al algoritmo de Floyd-Warshall, pero puede manejar pesos negativos y es más rápido que el algoritmo de Floyd-Warshall.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Algoritmo_de_Bellman-Ford\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9PHkk0UavIM?si=P-pZASJv5NwdC2_i\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/obWXjtg0L64?si=2BDo_S1DjqQ1iazB&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"algoritmo-de-dijkstra\">Algoritmo de Dijkstra\u003C/h2>\n\u003Cp>El algoritmo de Dijkstra es un algoritmo de recorrido de grafos que encuentra el camino más corto entre dos nodos en un grafo. Es un algoritmo de grafos ponderados, lo que significa que cada arista en el grafo tiene un peso asociado. El algoritmo funciona encontrando el camino más corto desde el nodo inicial hasta todos los demás nodos en el grafo. Lo hace manteniendo un registro de la distancia desde el nodo inicial hasta cada nodo y luego eligiendo el nodo con la distancia más corta desde el nodo inicial para visitar a continuación. Luego actualiza la distancia de cada nodo desde el nodo inicial y repite el proceso hasta que todos los nodos hayan sido visitados.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4I7W5WUQQQI?si=CFw-oI-7ArePZKqQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"algoritmo-a\">Algoritmo A*\u003C/h2>\n\u003Cp>A* es un algoritmo de recorrido de grafos que se utiliza para encontrar el camino más corto entre dos nodos en un grafo. Es una versión modificada del algoritmo de Dijkstra que utiliza heurísticas para encontrar el camino más corto. Se usa en la búsqueda de caminos y en el recorrido de grafos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Algoritmo_de_b%C3%BAsqueda_A*\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1gszEk8rUS4?si=PleD361Lmqzw8Bej\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NWS-_VsMab4?si=lb9eeLWYZfFynGkN\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>",{"headings":104,"localImagePaths":120,"remoteImagePaths":121,"frontmatter":122,"imagePaths":125},[105,108,111,114,117],{"depth":76,"slug":106,"text":107},"búsqueda-en-anchura","Búsqueda en Anchura",{"depth":76,"slug":109,"text":110},"búsqueda-en-profundidad","Búsqueda en profundidad",{"depth":76,"slug":112,"text":113},"algoritmo-de-bellman-ford","Algoritmo de Bellman-Ford",{"depth":76,"slug":115,"text":116},"algoritmo-de-dijkstra","Algoritmo de Dijkstra",{"depth":76,"slug":118,"text":119},"algoritmo-a","Algoritmo A*",[],[],{"rutas":123,"title":95,"description":16,"pubDate":124,"updatedDate":124,"link":87,"lastModified":88},[30],"May 25 2024",[],"algoritmos/algoritmos-grafos.md","algoritmos/busqueda",{"id":127,"data":129,"body":134,"filePath":135,"digest":136,"rendered":137,"legacyId":154},{"rutas":130,"title":131,"description":16,"lang":17,"dir":18,"pubDate":132,"updatedDate":133},[30],"Búsqueda",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Los algoritmos de búsqueda se utilizan para encontrar un elemento específico en una colección de elementos. Por ejemplo, si tienes una lista de nombres y deseas encontrar un nombre específico, puedes utilizar un algoritmo de búsqueda para encontrar ese nombre.\r\n\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/searching-algorithms/)\r\n\r\n## Búsqueda binaria\r\n\r\nLa búsqueda binaria es un algoritmo de búsqueda que encuentra la posición de un valor objetivo dentro de un arreglo ordenado. La búsqueda binaria compara el valor objetivo con el elemento central del arreglo. Si no son iguales, se elimina la mitad en la cual el objetivo no puede estar y la búsqueda continúa en la mitad restante, volviendo a tomar el elemento central para compararlo con el valor objetivo, y repitiendo esto hasta que se encuentre el valor objetivo. Si la búsqueda termina con la mitad restante siendo vacía, significa que el objetivo no está en el arreglo.\r\n\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fDKIpRe8GW4?si=afdiHlFfHeGI3gD0&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Búsqueda lineal\r\n\r\nLa búsqueda lineal es un algoritmo muy simple que se utiliza para buscar un valor en un arreglo. Verifica secuencialmente cada elemento del arreglo hasta que se encuentre una coincidencia o hasta que se hayan buscado todos los elementos.\r\n\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/linear-search/)","src/content/blog/algoritmos/busqueda.md","23104b45bdbfa407",{"html":138,"metadata":139},"\u003Cp>Los algoritmos de búsqueda se utilizan para encontrar un elemento específico en una colección de elementos. Por ejemplo, si tienes una lista de nombres y deseas encontrar un nombre específico, puedes utilizar un algoritmo de búsqueda para encontrar ese nombre.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/searching-algorithms/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"búsqueda-binaria\">Búsqueda binaria\u003C/h2>\n\u003Cp>La búsqueda binaria es un algoritmo de búsqueda que encuentra la posición de un valor objetivo dentro de un arreglo ordenado. La búsqueda binaria compara el valor objetivo con el elemento central del arreglo. Si no son iguales, se elimina la mitad en la cual el objetivo no puede estar y la búsqueda continúa en la mitad restante, volviendo a tomar el elemento central para compararlo con el valor objetivo, y repitiendo esto hasta que se encuentre el valor objetivo. Si la búsqueda termina con la mitad restante siendo vacía, significa que el objetivo no está en el arreglo.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search\">Khan Academy\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fDKIpRe8GW4?si=afdiHlFfHeGI3gD0&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"búsqueda-lineal\">Búsqueda lineal\u003C/h2>\n\u003Cp>La búsqueda lineal es un algoritmo muy simple que se utiliza para buscar un valor en un arreglo. Verifica secuencialmente cada elemento del arreglo hasta que se encuentre una coincidencia o hasta que se hayan buscado todos los elementos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/linear-search/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":140,"localImagePaths":147,"remoteImagePaths":148,"frontmatter":149,"imagePaths":153},[141,144],{"depth":76,"slug":142,"text":143},"búsqueda-binaria","Búsqueda binaria",{"depth":76,"slug":145,"text":146},"búsqueda-lineal","Búsqueda lineal",[],[],{"rutas":150,"title":131,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":152},[30],"Feb 18 2024","2024-02-18T14:35:14-07:00",[],"algoritmos/busqueda.md","algoritmos/greedy",{"id":155,"data":157,"body":162,"filePath":163,"digest":164,"rendered":165,"legacyId":186},{"rutas":158,"title":159,"description":16,"lang":17,"dir":18,"pubDate":160,"updatedDate":161},[30],"Algoritmos voraces",["Date","2024-05-30T07:00:00.000Z"],["Date","2024-05-30T07:00:00.000Z"],"Los algoritmos voraces son un tipo de algoritmo que siempre toma la decisión que parece ser la mejor en ese momento. Esto significa que toma una elección localmente óptima con la esperanza de que esta elección conduzca a una solución globalmente óptima.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Algoritmo_voraz)\r\n\r\n## Algoritmo de Dijkstra\r\nEl algoritmo de Dijkstra es un algoritmo voraz que encuentra el camino más corto entre dos nodos en un grafo. Es un algoritmo muy común utilizado en ciencias de la computación y se usa en muchas aplicaciones, como la navegación GPS, el enrutamiento de redes y la búsqueda del camino más corto en un laberinto.\r\n\r\n* [Repaso](/blog/ComputerScience/algoritmos/algoritmos-grafos#algoritmo-de-dijkstra)\r\n\r\n## Codificación Huffman\r\nLa codificación Huffman es un algoritmo de compresión de datos sin pérdida. La idea es asignar códigos de longitud variable a los caracteres de entrada, donde las longitudes de los códigos asignados se basan en las frecuencias de los caracteres correspondientes. El carácter más frecuente obtiene el código más pequeño y el carácter menos frecuente obtiene el código más grande.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Codificación_Huffman)\r\n* [Programiz](/recursos/huffman-coding-programiz)\r\n* [Geeks for Geeks](/recursos/huffman-coding-gfg)\r\n\r\n## Algoritmo de Kruskal\r\n\r\nEl algoritmo de Kruskal es un algoritmo voraz que encuentra un árbol de expansión mínimo para un grafo conexo ponderado. Es un algoritmo de árbol de expansión mínimo que toma un grafo como entrada y encuentra el subconjunto de las aristas de ese grafo que forman un árbol que incluye cada vértice, donde el peso total de todas las aristas en el árbol está minimizado. Si el grafo no está conectado, entonces encuentra un bosque de expansión mínimo (un árbol de expansión mínimo para cada componente conectado).\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Algoritmo_de_Kruskal)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OZKuWP1KxdY?si=pIbdjMala9lcBy1g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\r\n\r\n## Algoritmo de Ford-Fulkerson\r\n\r\nEl algoritmo de Ford-Fulkerson es un algoritmo voraz que se utiliza para encontrar el flujo máximo en una red de flujo. También es conocido como el algoritmo de Edmonds-Karp.\r\n\r\n* [Geeks for Geeks](/recursos/ford-fulkerson-gfg)\r\n* [Programiz](/recursos/ford-fulkerson-programiz)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Tl90tNtKvxs?si=gg5BSCV8SjKnl2iM&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>","src/content/blog/algoritmos/greedy.md","1982650895d8e374",{"html":166,"metadata":167},"\u003Cp>Los algoritmos voraces son un tipo de algoritmo que siempre toma la decisión que parece ser la mejor en ese momento. Esto significa que toma una elección localmente óptima con la esperanza de que esta elección conduzca a una solución globalmente óptima.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Algoritmo_voraz\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"algoritmo-de-dijkstra\">Algoritmo de Dijkstra\u003C/h2>\n\u003Cp>El algoritmo de Dijkstra es un algoritmo voraz que encuentra el camino más corto entre dos nodos en un grafo. Es un algoritmo muy común utilizado en ciencias de la computación y se usa en muchas aplicaciones, como la navegación GPS, el enrutamiento de redes y la búsqueda del camino más corto en un laberinto.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/ComputerScience/algoritmos/algoritmos-grafos#algoritmo-de-dijkstra\">Repaso\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"codificación-huffman\">Codificación Huffman\u003C/h2>\n\u003Cp>La codificación Huffman es un algoritmo de compresión de datos sin pérdida. La idea es asignar códigos de longitud variable a los caracteres de entrada, donde las longitudes de los códigos asignados se basan en las frecuencias de los caracteres correspondientes. El carácter más frecuente obtiene el código más pequeño y el carácter menos frecuente obtiene el código más grande.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Codificaci%C3%B3n_Huffman\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/recursos/huffman-coding-programiz\">Programiz\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/recursos/huffman-coding-gfg\">Geeks for Geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"algoritmo-de-kruskal\">Algoritmo de Kruskal\u003C/h2>\n\u003Cp>El algoritmo de Kruskal es un algoritmo voraz que encuentra un árbol de expansión mínimo para un grafo conexo ponderado. Es un algoritmo de árbol de expansión mínimo que toma un grafo como entrada y encuentra el subconjunto de las aristas de ese grafo que forman un árbol que incluye cada vértice, donde el peso total de todas las aristas en el árbol está minimizado. Si el grafo no está conectado, entonces encuentra un bosque de expansión mínimo (un árbol de expansión mínimo para cada componente conectado).\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Algoritmo_de_Kruskal\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OZKuWP1KxdY?si=pIbdjMala9lcBy1g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"algoritmo-de-ford-fulkerson\">Algoritmo de Ford-Fulkerson\u003C/h2>\n\u003Cp>El algoritmo de Ford-Fulkerson es un algoritmo voraz que se utiliza para encontrar el flujo máximo en una red de flujo. También es conocido como el algoritmo de Edmonds-Karp.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/recursos/ford-fulkerson-gfg\">Geeks for Geeks\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/recursos/ford-fulkerson-programiz\">Programiz\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Tl90tNtKvxs?si=gg5BSCV8SjKnl2iM&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen>\u003C/iframe>",{"headings":168,"localImagePaths":179,"remoteImagePaths":180,"frontmatter":181,"imagePaths":185},[169,170,173,176],{"depth":76,"slug":115,"text":116},{"depth":76,"slug":171,"text":172},"codificación-huffman","Codificación Huffman",{"depth":76,"slug":174,"text":175},"algoritmo-de-kruskal","Algoritmo de Kruskal",{"depth":76,"slug":177,"text":178},"algoritmo-de-ford-fulkerson","Algoritmo de Ford-Fulkerson",[],[],{"rutas":182,"title":159,"description":16,"pubDate":183,"updatedDate":183,"link":87,"lastModified":184},[30],"May 30 2024","2024-07-01T18:08:53-07:00",[],"algoritmos/greedy.md","algoritmos/cache",{"id":187,"data":189,"body":194,"filePath":195,"digest":196,"rendered":197,"legacyId":225},{"rutas":190,"title":191,"description":16,"lang":17,"dir":18,"pubDate":192,"updatedDate":193},[30],"Cache",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Los algoritmos de caché se utilizan para gestionar la memoria caché de una computadora. La memoria caché es una pequeña cantidad de memoria que se utiliza para almacenar datos que se acceden con frecuencia. Esto permite que la computadora acceda a los datos más rápidamente que si tuviera que ir a la memoria principal. Los algoritmos de caché se utilizan para determinar qué datos deben almacenarse en la memoria caché y qué datos deben eliminarse de la memoria caché.\r\n\r\n## Cache LRU\r\n\r\nLa caché LRU (Least Recently Used) es una caché que expulsa primero el elemento menos recientemente utilizado. Es un algoritmo de caché muy común y se utiliza en muchos lugares, como en la caché del navegador, la caché de la base de datos y la caché del sistema operativo.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/R5ON3iwx78M?si=4K8epnhZV2eKwshJ&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Cache LFU\r\n\r\nLa Caché LFU (Least Frequently Used) es una estructura de datos que almacena pares clave-valor. Tiene un tamaño fijo y, cuando está lleno, elimina el par clave-valor menos utilizado con menos frecuencia. Es una variante de la Caché LRU y se utiliza en muchas aplicaciones, como el almacenamiento en caché de páginas web, el almacenamiento en caché de consultas de bases de datos y el almacenamiento en caché de imágenes.\r\n\r\n* [Geeks fo geeks](https://www.geeksforgeeks.org/least-frequently-used-lfu-cache-implementation/)\r\n\r\n## Cache MFU\r\n\r\nLa Caché MFU (Most Frequently Used) es otro algoritmo de caché. La diferencia es que, en lugar de eliminar la entrada menos utilizada con menos frecuencia, la Caché MFU elimina la entrada más utilizada con mayor frecuencia.\r\n\r\n> ### Comparación de algoritmos de reemplazo de páginas MFU y LRU\r\n> [^1] Normalmente, he visto que se utiliza una caché MFU como la principal, respaldada por una caché secundaria que utiliza un algoritmo de reemplazo LRU (una caché MRU). La idea es que las cosas más recientemente utilizadas permanecerán en la caché principal, brindando un acceso muy rápido. Esto reduce la \"rotación\" que se ve en una caché MRU cuando se utilizan muy frecuentemente un pequeño número de elementos. También evita que esos elementos comúnmente utilizados sean expulsados de la caché solo porque no se han utilizado durante un tiempo.\r\n>\r\n> MFU funciona bien si tienes un pequeño número de elementos que se consultan con mucha frecuencia y un gran número de elementos que se consultan raramente. Un usuario de escritorio típico, por ejemplo, puede tener tres o cuatro programas que utiliza muchas veces al día y cientos de programas que utiliza muy raramente. Si quisieras mejorar su experiencia almacenando en caché en memoria programas para que se inicien rápidamente, es mejor almacenar en caché aquellos que usa con mucha frecuencia.\r\n>\r\n> Por otro lado, si tienes un gran número de elementos que se consultan esencialmente de manera aleatoria, o algunos elementos se acceden ligeramente más a menudo, o los elementos se consultan típicamente en lotes (es decir, el elemento A se accede muchas veces en un corto período y luego no se accede en absoluto), entonces es probable que un esquema de expulsión de caché LRU sea mejor.\r\n\r\n> ### ¿Por qué la caché utiliza el algoritmo utilizado más recientemente (MRU) como política de desalojo?\r\n>\r\n> [^2] Imagina que estás buscando los detalles de los autobuses a medida que llegan a una parada de autobús, según su número de autobús (o cualquier identificador que uses).\r\n>\r\n> Es razonable pensar que si acabas de ver un autobús número 36, es menos probable que veas otro inmediatamente que ver uno de los otros autobuses que paran allí.\r\n>\r\n> Es solo un ejemplo, pero la idea es más general: en algunos casos, haber \"visto algo recientemente\" es un buen indicador de que es improbable que veas lo mismo nuevamente pronto.\r\n\r\n[^1]:[1](https://stackoverflow.com/questions/13597246/comparison-of-mfu-and-lru-page-replacement-algorithms)\r\n[^2]:[2](https://stackoverflow.com/questions/5088128/why-does-cache-use-most-recently-used-mru-algorithm-as-evict-policy)","src/content/blog/algoritmos/cache.md","049ae6d59121e82f",{"html":198,"metadata":199},"\u003Cp>Los algoritmos de caché se utilizan para gestionar la memoria caché de una computadora. La memoria caché es una pequeña cantidad de memoria que se utiliza para almacenar datos que se acceden con frecuencia. Esto permite que la computadora acceda a los datos más rápidamente que si tuviera que ir a la memoria principal. Los algoritmos de caché se utilizan para determinar qué datos deben almacenarse en la memoria caché y qué datos deben eliminarse de la memoria caché.\u003C/p>\n\u003Ch2 id=\"cache-lru\">Cache LRU\u003C/h2>\n\u003Cp>La caché LRU (Least Recently Used) es una caché que expulsa primero el elemento menos recientemente utilizado. Es un algoritmo de caché muy común y se utiliza en muchos lugares, como en la caché del navegador, la caché de la base de datos y la caché del sistema operativo.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/R5ON3iwx78M?si=4K8epnhZV2eKwshJ&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"cache-lfu\">Cache LFU\u003C/h2>\n\u003Cp>La Caché LFU (Least Frequently Used) es una estructura de datos que almacena pares clave-valor. Tiene un tamaño fijo y, cuando está lleno, elimina el par clave-valor menos utilizado con menos frecuencia. Es una variante de la Caché LRU y se utiliza en muchas aplicaciones, como el almacenamiento en caché de páginas web, el almacenamiento en caché de consultas de bases de datos y el almacenamiento en caché de imágenes.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/least-frequently-used-lfu-cache-implementation/\">Geeks fo geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"cache-mfu\">Cache MFU\u003C/h2>\n\u003Cp>La Caché MFU (Most Frequently Used) es otro algoritmo de caché. La diferencia es que, en lugar de eliminar la entrada menos utilizada con menos frecuencia, la Caché MFU elimina la entrada más utilizada con mayor frecuencia.\u003C/p>\n\u003Cblockquote>\n\u003Ch3 id=\"comparación-de-algoritmos-de-reemplazo-de-páginas-mfu-y-lru\">Comparación de algoritmos de reemplazo de páginas MFU y LRU\u003C/h3>\n\u003Cp>\u003Csup>\u003Ca href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup> Normalmente, he visto que se utiliza una caché MFU como la principal, respaldada por una caché secundaria que utiliza un algoritmo de reemplazo LRU (una caché MRU). La idea es que las cosas más recientemente utilizadas permanecerán en la caché principal, brindando un acceso muy rápido. Esto reduce la “rotación” que se ve en una caché MRU cuando se utilizan muy frecuentemente un pequeño número de elementos. También evita que esos elementos comúnmente utilizados sean expulsados de la caché solo porque no se han utilizado durante un tiempo.\u003C/p>\n\u003Cp>MFU funciona bien si tienes un pequeño número de elementos que se consultan con mucha frecuencia y un gran número de elementos que se consultan raramente. Un usuario de escritorio típico, por ejemplo, puede tener tres o cuatro programas que utiliza muchas veces al día y cientos de programas que utiliza muy raramente. Si quisieras mejorar su experiencia almacenando en caché en memoria programas para que se inicien rápidamente, es mejor almacenar en caché aquellos que usa con mucha frecuencia.\u003C/p>\n\u003Cp>Por otro lado, si tienes un gran número de elementos que se consultan esencialmente de manera aleatoria, o algunos elementos se acceden ligeramente más a menudo, o los elementos se consultan típicamente en lotes (es decir, el elemento A se accede muchas veces en un corto período y luego no se accede en absoluto), entonces es probable que un esquema de expulsión de caché LRU sea mejor.\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Ch3 id=\"por-qué-la-caché-utiliza-el-algoritmo-utilizado-más-recientemente-mru-como-política-de-desalojo\">¿Por qué la caché utiliza el algoritmo utilizado más recientemente (MRU) como política de desalojo?\u003C/h3>\n\u003Cp>\u003Csup>\u003Ca href=\"#user-content-fn-2\" id=\"user-content-fnref-2\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2\u003C/a>\u003C/sup> Imagina que estás buscando los detalles de los autobuses a medida que llegan a una parada de autobús, según su número de autobús (o cualquier identificador que uses).\u003C/p>\n\u003Cp>Es razonable pensar que si acabas de ver un autobús número 36, es menos probable que veas otro inmediatamente que ver uno de los otros autobuses que paran allí.\u003C/p>\n\u003Cp>Es solo un ejemplo, pero la idea es más general: en algunos casos, haber “visto algo recientemente” es un buen indicador de que es improbable que veas lo mismo nuevamente pronto.\u003C/p>\n\u003C/blockquote>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-1\">\n\u003Cp>\u003Ca href=\"https://stackoverflow.com/questions/13597246/comparison-of-mfu-and-lru-page-replacement-algorithms\">1\u003C/a> \u003Ca href=\"#user-content-fnref-1\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli id=\"user-content-fn-2\">\n\u003Cp>\u003Ca href=\"https://stackoverflow.com/questions/5088128/why-does-cache-use-most-recently-used-mru-algorithm-as-evict-policy\">2\u003C/a> \u003Ca href=\"#user-content-fnref-2\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":200,"localImagePaths":220,"remoteImagePaths":221,"frontmatter":222,"imagePaths":224},[201,204,207,210,214,217],{"depth":76,"slug":202,"text":203},"cache-lru","Cache LRU",{"depth":76,"slug":205,"text":206},"cache-lfu","Cache LFU",{"depth":76,"slug":208,"text":209},"cache-mfu","Cache MFU",{"depth":211,"slug":212,"text":213},3,"comparación-de-algoritmos-de-reemplazo-de-páginas-mfu-y-lru","Comparación de algoritmos de reemplazo de páginas MFU y LRU",{"depth":211,"slug":215,"text":216},"por-qué-la-caché-utiliza-el-algoritmo-utilizado-más-recientemente-mru-como-política-de-desalojo","¿Por qué la caché utiliza el algoritmo utilizado más recientemente (MRU) como política de desalojo?",{"depth":76,"slug":218,"text":219},"footnote-label","Footnotes",[],[],{"rutas":223,"title":191,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":152},[30],[],"algoritmos/cache.md","algoritmos",{"id":226,"data":228,"body":233,"filePath":234,"digest":235,"rendered":236,"legacyId":245},{"rutas":229,"title":230,"description":16,"lang":17,"dir":18,"pubDate":231,"updatedDate":232},[30],"Algoritmos",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Un algoritmo es un conjunto de pasos o reglas definidas y finitas que se siguen para llevar a cabo una tarea o resolver un problema específico. En términos más simples, es una serie de instrucciones precisas que guían la ejecución de una tarea concreta. Los algoritmos se utilizan en diversos campos, como ciencias de la computación, matemáticas, ingeniería y muchas otras disciplinas, para describir procesos y procedimientos de manera sistemática y lógica.\r\n\r\nLos algoritmos forman la base de la programación de computadoras y son esenciales para la resolución eficiente de problemas. Pueden ser tan simples como una receta de cocina o tan complejos como los algoritmos utilizados en la inteligencia artificial. En general, un buen algoritmo debe ser preciso, eficiente y capaz de producir resultados correctos para una variedad de entradas.\r\n\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms)\r\n* [Coursera](https://www.coursera.org/learn/algorithms-part1)","src/content/blog/algoritmos/index.md","5bed0eb4af117807",{"html":237,"metadata":238},"\u003Cp>Un algoritmo es un conjunto de pasos o reglas definidas y finitas que se siguen para llevar a cabo una tarea o resolver un problema específico. En términos más simples, es una serie de instrucciones precisas que guían la ejecución de una tarea concreta. Los algoritmos se utilizan en diversos campos, como ciencias de la computación, matemáticas, ingeniería y muchas otras disciplinas, para describir procesos y procedimientos de manera sistemática y lógica.\u003C/p>\n\u003Cp>Los algoritmos forman la base de la programación de computadoras y son esenciales para la resolución eficiente de problemas. Pueden ser tan simples como una receta de cocina o tan complejos como los algoritmos utilizados en la inteligencia artificial. En general, un buen algoritmo debe ser preciso, eficiente y capaz de producir resultados correctos para una variedad de entradas.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms\">Khan Academy\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.coursera.org/learn/algorithms-part1\">Coursera\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":239,"localImagePaths":240,"remoteImagePaths":241,"frontmatter":242,"imagePaths":244},[],[],[],{"rutas":243,"title":230,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":152},[30],[],"algoritmos/index.md","algoritmos/sorting",{"id":246,"data":248,"body":253,"filePath":254,"digest":255,"rendered":256,"legacyId":283},{"rutas":249,"title":250,"description":16,"lang":17,"dir":18,"pubDate":251,"updatedDate":252},[30],"Ordenamiento",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Los algoritmos de ordenamiento se utilizan para ordenar datos en una colección. Ordenar es una tarea muy común en la ciencia de la computación y también es una pregunta muy frecuente en entrevistas. Hay muchas formas diferentes de ordenar datos, y diferentes algoritmos tienen ventajas y desventajas distintas.\r\n\r\nAprende acerca de los algoritmos de ordenamiento y conoce el mejor caso/peor caso, la complejidad promedio de cada uno. Además, aprende sobre la estabilidad de los algoritmos de ordenamiento.\r\n\r\n## Bubble Sort\r\n\r\nBubble sort es un algoritmo simple de ordenamiento que pasa repetidamente por la lista, compara elementos adyacentes e intercambia aquellos que están en el orden incorrecto. Este proceso de pasar por la lista se repite hasta que la lista esté ordenada.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xli_FI7CuzA?si=YrX8wu6kt4TW2o5z&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pqZ04TT15PQ?si=iZD5SoUN4QOnPHVa\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Selection Sort\r\n\r\nSelection sort es un algoritmo de ordenamiento que selecciona el elemento más pequeño no ordenado en la lista y lo intercambia con el índice 0, luego encuentra el siguiente más pequeño y lo coloca en el índice 1, y así sucesivamente.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/g-PGLbMth_g?si=G4mb50RVlCitgwte&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Insertion Sort\r\n\r\nInsertion sort es un algoritmo de ordenamiento simple que construye el arreglo final ordenado un elemento a la vez mediante comparaciones. Es mucho menos eficiente en listas grandes en comparación con algoritmos más avanzados como quicksort, heapsort o merge sort.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JU767SDMDvA?si=ZAyVutxjhV3_eRrk&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Heap Sort\r\n\r\nHeap sort es un algoritmo de ordenamiento basado en comparaciones. Es similar a selection sort donde primero encontramos el elemento máximo y lo colocamos al final. Repetimos el mismo proceso para los elementos restantes.\r\n\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/heap-sort/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2DmK_H7IdTo?si=IjeYjZwvxOnEL8tm&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Quick Sort\r\n\r\nQuick Sort es un algoritmo de divide y vencerás. Selecciona un elemento como pivote y particiona el arreglo dado alrededor del pivote seleccionado. Hay muchas versiones diferentes de QuickSort que eligen el pivote de diferentes maneras.\r\n\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/quick-sort/)\r\n* [Python Example](https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Hoixgm4-P4M?si=f06RrTlXvG-pxVVc&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Merge Sort\r\n\r\nMerge sort es un algoritmo de divide y vencerás. Divide el arreglo de entrada en dos mitades, se llama a sí mismo para las dos mitades y luego fusiona las dos mitades ordenadas. La función merge() se utiliza para fusionar las dos mitades. La función merge(arr, l, m, r) es un proceso clave que asume que arr[l..m] y arr[m+1..r] están ordenados y fusiona los dos subarreglos ordenados en uno solo.\r\n\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/merge-sort/)\r\n* [Geeks for geeks - Linked Lists](https://www.geeksforgeeks.org/merge-sort-for-linked-list/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4VqmGXwpLqc?si=prmkE3OhCvUUsS9m&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/algoritmos/sorting.md","9dc46732b547f2d3",{"html":257,"metadata":258},"\u003Cp>Los algoritmos de ordenamiento se utilizan para ordenar datos en una colección. Ordenar es una tarea muy común en la ciencia de la computación y también es una pregunta muy frecuente en entrevistas. Hay muchas formas diferentes de ordenar datos, y diferentes algoritmos tienen ventajas y desventajas distintas.\u003C/p>\n\u003Cp>Aprende acerca de los algoritmos de ordenamiento y conoce el mejor caso/peor caso, la complejidad promedio de cada uno. Además, aprende sobre la estabilidad de los algoritmos de ordenamiento.\u003C/p>\n\u003Ch2 id=\"bubble-sort\">Bubble Sort\u003C/h2>\n\u003Cp>Bubble sort es un algoritmo simple de ordenamiento que pasa repetidamente por la lista, compara elementos adyacentes e intercambia aquellos que están en el orden incorrecto. Este proceso de pasar por la lista se repite hasta que la lista esté ordenada.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xli_FI7CuzA?si=YrX8wu6kt4TW2o5z&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pqZ04TT15PQ?si=iZD5SoUN4QOnPHVa\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"selection-sort\">Selection Sort\u003C/h2>\n\u003Cp>Selection sort es un algoritmo de ordenamiento que selecciona el elemento más pequeño no ordenado en la lista y lo intercambia con el índice 0, luego encuentra el siguiente más pequeño y lo coloca en el índice 1, y así sucesivamente.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/g-PGLbMth_g?si=G4mb50RVlCitgwte&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"insertion-sort\">Insertion Sort\u003C/h2>\n\u003Cp>Insertion sort es un algoritmo de ordenamiento simple que construye el arreglo final ordenado un elemento a la vez mediante comparaciones. Es mucho menos eficiente en listas grandes en comparación con algoritmos más avanzados como quicksort, heapsort o merge sort.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JU767SDMDvA?si=ZAyVutxjhV3_eRrk&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"heap-sort\">Heap Sort\u003C/h2>\n\u003Cp>Heap sort es un algoritmo de ordenamiento basado en comparaciones. Es similar a selection sort donde primero encontramos el elemento máximo y lo colocamos al final. Repetimos el mismo proceso para los elementos restantes.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/heap-sort/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2DmK_H7IdTo?si=IjeYjZwvxOnEL8tm&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"quick-sort\">Quick Sort\u003C/h2>\n\u003Cp>Quick Sort es un algoritmo de divide y vencerás. Selecciona un elemento como pivote y particiona el arreglo dado alrededor del pivote seleccionado. Hay muchas versiones diferentes de QuickSort que eligen el pivote de diferentes maneras.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/quick-sort/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py\">Python Example\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Hoixgm4-P4M?si=f06RrTlXvG-pxVVc&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"merge-sort\">Merge Sort\u003C/h2>\n\u003Cp>Merge sort es un algoritmo de divide y vencerás. Divide el arreglo de entrada en dos mitades, se llama a sí mismo para las dos mitades y luego fusiona las dos mitades ordenadas. La función merge() se utiliza para fusionar las dos mitades. La función merge(arr, l, m, r) es un proceso clave que asume que arr[l..m] y arr[m+1..r] están ordenados y fusiona los dos subarreglos ordenados en uno solo.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/merge-sort/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/merge-sort-for-linked-list/\">Geeks for geeks - Linked Lists\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4VqmGXwpLqc?si=prmkE3OhCvUUsS9m&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>",{"headings":259,"localImagePaths":278,"remoteImagePaths":279,"frontmatter":280,"imagePaths":282},[260,263,266,269,272,275],{"depth":76,"slug":261,"text":262},"bubble-sort","Bubble Sort",{"depth":76,"slug":264,"text":265},"selection-sort","Selection Sort",{"depth":76,"slug":267,"text":268},"insertion-sort","Insertion Sort",{"depth":76,"slug":270,"text":271},"heap-sort","Heap Sort",{"depth":76,"slug":273,"text":274},"quick-sort","Quick Sort",{"depth":76,"slug":276,"text":277},"merge-sort","Merge Sort",[],[],{"rutas":281,"title":250,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":152},[30],[],"algoritmos/sorting.md","apis",{"id":284,"data":286,"body":291,"filePath":292,"digest":293,"rendered":294,"legacyId":359},{"rutas":287,"title":288,"description":16,"lang":17,"dir":18,"pubDate":289,"updatedDate":290},[15],"APIs",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"API es el acrónimo de Application Programming Interface (interfaz de programación de aplicaciones), que es un intermediario de software que permite que dos aplicaciones se comuniquen entre sí.\r\n\r\n* [¿Qué es una API?](https://aws.amazon.com/es/what-is/api/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7OXs3kUjdNE?si=P3O-wH1PH3ZgrnSH&cc_load_policy=1&cc_lang_pref=e\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## REST (Recomendado)\r\nREST, o REpresentational State Transfer, es un estilo arquitectónico para proporcionar estándares entre sistemas informáticos en la web, facilitando la comunicación entre sistemas.\r\n\r\n* [¿Qué es REST API?](https://www.redhat.com/es/topics/api/what-is-a-rest-api)\r\n* [Aprende a diseñar una API RESTFul correctamente](https://www.udemy.com/course/aprende-a-disenar-una-api-restful-correctamente/)\r\n* [Introducción a API REST](https://ed.team/cursos/api-rest)\r\n\r\n## APIs JSON (Recomendado)\r\nJSON o JavaScript Object Notation es un esquema de codificación que está diseñado para eliminar la necesidad de un código ad-hoc para cada aplicación para comunicarse con los servidores que se comunican de una manera definida. El módulo API JSON expone una implementación para almacenes de datos y estructuras de datos, como tipos de entidad, paquetes y campos.\r\n\r\n* [¿Qué es y para qué sirve?](https://keepcoding.io/blog/json-api-que-es-para-que-sirve/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6tiqf0oG9do?si=kk_9PY138MPQRbIL&cc_load_policy=1&cc_lang_pref=e\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## SOAP\r\nSimple Object Access Protocol (SOAP) es un protocolo de mensajes para el intercambio de información entre sistemas y aplicaciones. Cuando se trata de interfaces de programación de aplicaciones (API), una API SOAP se desarrolla de forma más estructurada y formalizada. Los mensajes SOAP pueden transmitirse a través de diversos protocolos de nivel inferior, incluido el Protocolo de Transferencia de Hipertexto (HTTP) relacionado con la web.\r\n\r\n* [SOAP: explicación del protocolo de red](https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/soap-simple-object-access-protocol/)\r\n\r\n## gRPC\r\ngRPC es un framework RPC universal de código abierto y alto rendimiento.\r\n\r\nRPC significa Remote Procedure Call, hay un debate en curso sobre lo que la g significa. RPC es un protocolo que permite a un programa ejecutar un procedimiento de otro programa ubicado en otro ordenador. La gran ventaja es que el desarrollador no necesita codificar los detalles de la interacción remota. El procedimiento remoto se llama como cualquier otra función. Pero el cliente y el servidor pueden codificarse en lenguajes diferentes.\r\n\r\n* [gRPC, ¿qué es y cómo funciona?](https://www.paradigmadigital.com/dev/grpc-que-es-como-funciona/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nwdL6NOBtGI?si=JHHSao-MwKbluJdA&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## GraphQL\r\nGraphQL es un lenguaje de consulta y un sistema de ejecución para API (interfaces de programación de aplicaciones). Está diseñado para ofrecer a los clientes una forma flexible y eficaz de solicitar datos a los servidores, y a menudo se utiliza como alternativa a las API REST (transferencia de estado representacional).\r\n\r\nUna de las principales características de GraphQL es su capacidad para especificar exactamente los datos que se necesitan, en lugar de recibir un conjunto fijo de datos de un punto final. Esto permite a los clientes solicitar sólo los datos que necesitan y reduce la cantidad de datos que hay que transferir por la red.\r\n\r\nGraphQL también permite definir la estructura de los datos que devuelve el servidor, lo que permite a los clientes solicitar datos de forma predecible y flexible. Esto facilita la creación y el mantenimiento de aplicaciones cliente que dependen de los datos del servidor.\r\n\r\nGraphQL se utiliza ampliamente en aplicaciones web y móviles modernas, y cuenta con el apoyo de una amplia y activa comunidad de desarrolladores.\r\n\r\n* [¿Qué es GraphQL?](https://www.redhat.com/es/topics/api/what-is-graphql)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tqxvJfd69zs?si=i33cHbOAR4PcCtVs&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QG-qbmW-wes?si=mGcd7IfGcynuvUAw&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Hateoas\r\nHATEOAS es un acrónimo de Hypermedia As The Engine Of Application State (Hipermedia como motor del estado de la aplicación), es el concepto de que cuando se envía información a través de una API RESTful, el documento recibido debe contener todo lo que el cliente necesita para analizar y utilizar los datos, es decir, no tiene que ponerse en contacto con ningún otro punto final que no se mencione explícitamente en el documento.\r\n\r\n* [HATEOAS: ¿cuál es el principio que oculta este acrónimo?](https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/hateoas-que-es-y-cual-es-su-funcion-en-las-api-rest/)\r\n\r\n## Especificación OpenAPI\r\nLa especificación OpenAPI (OAS) define una interfaz estándar e independiente del idioma para las API RESTful que permite tanto a humanos como a ordenadores descubrir y comprender las capacidades del servicio sin necesidad de acceder al código fuente, la documentación o mediante la inspección del tráfico de red. Cuando se define correctamente, un consumidor puede entender e interactuar con el servicio remoto con una cantidad mínima de lógica de implementación.\r\n\r\nUna definición OpenAPI puede ser utilizada por herramientas de generación de documentación para mostrar la API, herramientas de generación de código para generar servidores y clientes en varios lenguajes de programación, herramientas de prueba y muchos otros casos de uso.\r\n\r\n* [¿Qué es OpenAPI?](https://www.ionos.es/digitalguide/paginas-web/desarrollo-web/que-es-openapi/)\r\n\r\n## Autenticación\r\nEl proceso de autenticación de la API valida la identidad del cliente que intenta establecer una conexión mediante un protocolo de autenticación. El protocolo envía las credenciales del cliente remoto que solicita la conexión al servidor de acceso remoto en texto plano o cifrado. El servidor sabe entonces si puede conceder acceso a ese cliente remoto o no.\r\n\r\nAquí está la lista de formas comunes de autenticación:\r\n\r\n* Autenticación JWT\r\n* Autenticación basada en token\r\n* Autenticación basada en sesión\r\n* Autenticación básica\r\n* OAuth - Autorización abierta\r\n* SSO - Inicio de sesión único\r\n\r\n### JWT\r\nJWT son las siglas de JSON Web Token, un estándar/metodología abierta de encriptación basada en tokens que se utiliza para transferir información de forma segura como un objeto JSON. Clientes y servidores utilizan JWT para compartir información de forma segura, conteniendo el JWT objetos JSON codificados y reclamaciones. Los tokens JWT están diseñados para ser compactos, seguros de usar dentro de URLs, e ideales para contextos SSO.\r\n\r\n* [¿Qué es JWT (JSON Web Tokens)?](https://keepcoding.io/blog/que-es-jwt/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3o4vEIkiRgE?si=79X1GfppUt_bkGWb&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Autenticación básica\r\nDado el nombre de \"autenticación básica\", no debes confundir la autenticación básica con la autenticación estándar de nombre de usuario y contraseña. La autenticación básica es parte de la especificación HTTP, y los detalles se pueden encontrar en el RFC7617.\r\n\r\nComo forma parte de las especificaciones HTTP, todos los navegadores tienen soporte nativo para la \"Autenticación Básica HTTP\".\r\n\r\n* [Autenticación HTTP](https://developer.mozilla.org/es/docs/Web/HTTP/Authentication)\r\n\r\n### Autenticación por token\r\nLa autenticación basada en token es un protocolo que permite a los usuarios verificar su identidad y recibir a cambio un token de acceso único. Durante el periodo de validez del token, los usuarios acceden al sitio web o aplicación para el que se ha emitido el token, en lugar de tener que volver a introducir las credenciales cada vez que regresan a la misma página web, aplicación o cualquier recurso protegido con ese mismo token.\r\n\r\nLos tokens de autenticación funcionan como un billete sellado. El usuario conserva el acceso mientras el token siga siendo válido. Una vez que el usuario cierra la sesión o sale de una aplicación, el token queda invalidado.\r\n\r\nLa autenticación basada en tokens es diferente de las técnicas tradicionales de autenticación basadas en contraseñas o servidores. Los tokens ofrecen una segunda capa de seguridad, y los administradores tienen un control detallado de cada acción y transacción.\r\n\r\nSin embargo, el uso de tokens requiere algunos conocimientos de programación. La mayoría de los desarrolladores aprenden las técnicas rápidamente, pero hay una curva de aprendizaje.\r\n\r\n* [¿Qué es la autenticación basada en token?](https://www.cloudflare.com/es-es/learning/access-management/token-based-authentication/)\r\n\r\n### OAuth\r\nOAuth significa Open Authorization y es un estándar abierto para la autorización. Funciona para autorizar dispositivos, API, servidores y aplicaciones utilizando tokens de acceso en lugar de credenciales de usuario, lo que se conoce como \"acceso delegado seguro\".\r\n\r\nEn su forma más simple, OAuth delega la autenticación en servicios como Facebook, Amazon o Twitter y autoriza a las aplicaciones de terceros a acceder a la cuenta del usuario sin tener que introducir su nombre de usuario y contraseña.\r\n\r\nSe utiliza sobre todo para REST/API y sólo proporciona un alcance limitado de los datos de un usuario.\r\n\r\n* [Una introducción a OAuth 2](https://www.digitalocean.com/community/tutorials/una-introduccion-a-oauth-2-es)\r\n* [¿Qué es OAuth 2.0?](https://auth0.com/es/intro-to-iam/what-is-oauth-2)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GeXbsMezj8s?si=0f3fBkYyBhy1y_fb&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Autenticación basada en cookies\r\nLas cookies son fragmentos de datos que se utilizan para identificar al usuario y sus preferencias. El navegador devuelve la cookie al servidor cada vez que se solicita la página. Las cookies específicas, como las cookies HTTP, se utilizan para realizar la autenticación basada en cookies para mantener la sesión de cada usuario.\r\n\r\n* [HTTP cookies](https://developer.mozilla.org/es/docs/Web/HTTP/Cookies)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DxYAcXiy-ak?si=rWqalHWGqx9hq7Hy&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### OpenID\r\nOpenID es un protocolo que utiliza los mecanismos de autorización y autenticación de OAuth 2.0 y que actualmente está ampliamente adoptado por muchos proveedores de identidad en Internet. Resuelve el problema de la necesidad de compartir la información personal del usuario entre muchos servicios web diferentes (por ejemplo, tiendas en línea, foros de debate, etc.).\r\n\r\n* [¿Qué es OpenID Connect (OIDC)?](https://auth0.com/es/intro-to-iam/what-is-openid-connect-oidc)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/66Z6nFzLTos?si=pGX3OvgufPGsvSZe&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Lenguaje de marcado de aserción de seguridad (SAML)\r\nSAML son las siglas de Security Assertion Markup Language. Es un estándar basado en XML para el intercambio de datos de autenticación y autorización entre partes, en particular entre un proveedor de identidades (IdP) y un proveedor de servicios (SP). En un sistema basado en SAML, un usuario solicita acceso a un recurso protegido. El proveedor de servicios solicita al proveedor de identidades que autentique al usuario y confirme si se le concede el acceso al recurso.\r\n\r\n#### Ventajas de SAML\r\nAlgunas de las ventajas de utilizar SAML son\r\n\r\n* Inicio de sesión único (SSO): Los usuarios pueden iniciar sesión una vez en el IdP y acceder a varios proveedores de servicios sin necesidad de autenticarse de nuevo.\r\n* Mayor seguridad: No es necesario que el proveedor de servicios almacene y gestione las contraseñas y credenciales de usuario, lo que reduce los posibles vectores de ataque.\r\n* Mayor eficacia: Como los usuarios ya no necesitan mantener varios conjuntos de credenciales, la gestión del acceso se vuelve más sencilla tanto para el usuario como para los administradores del sistema.\r\n* Interoperabilidad: SAML permite que una amplia gama de aplicaciones trabajen juntas, independientemente de la tecnología o plataforma subyacente.\r\n\r\n#### Componentes de SAML\r\nEn la arquitectura SAML intervienen tres componentes principales:\r\n\r\n1. Proveedor de identidades (IdP): La entidad que gestiona las identidades de los usuarios y los autentica proporcionando tokens de seguridad, también llamados aserciones.\r\n1. Proveedor de servicios (SP): La entidad que proporciona un servicio (como una aplicación web o API) y confía en el proveedor de identidades para autenticar a los usuarios y conceder/denegar el acceso a los recursos.\r\n1. Usuario/Principal: El usuario final que desea acceder al servicio prestado por el proveedor de servicios.\r\n\r\n#### Flujo de trabajo SAML\r\nEl proceso de autenticación SAML consta de los siguientes pasos:\r\n\r\n1. El usuario solicita al proveedor de servicios el acceso a un recurso protegido.\r\n1. Si el usuario aún no está autenticado, el proveedor de servicios genera y envía una solicitud de autenticación SAML al proveedor de identidades.\r\n1. El proveedor de identidad autentica al usuario (utilizando, por ejemplo, un nombre de usuario y una contraseña, autenticación multifactor u otro método).\r\n1. El proveedor de identidad construye una respuesta SAML, que incluye detalles sobre el usuario y afirma si el usuario está autorizado a acceder al recurso solicitado.\r\n1. La respuesta SAML se envía de vuelta al proveedor de servicios, normalmente a través del navegador web o el cliente API del usuario.\r\n1. El proveedor de servicios procesa la respuesta SAML, extrae la información necesaria y concede o deniega el acceso al usuario basándose en la afirmación del proveedor de identidades.\r\n\r\nCon SAML, puede agilizar la autenticación y autorización de usuarios en varias aplicaciones y sistemas, proporcionando una mejor experiencia de usuario y mejorando la seguridad general de su backend.\r\n\r\n* [¿Qué es SAML?](https://www.microsoft.com/es-mx/security/business/security-101/what-is-security-assertion-markup-language-saml)\r\n* [¿Qué es SAML? | Cómo funciona la autenticación SAML](https://www.cloudflare.com/es-es/learning/access-management/what-is-saml/)","src/content/blog/apis/index.md","adce3ef8096a114e",{"html":295,"metadata":296},"\u003Cp>API es el acrónimo de Application Programming Interface (interfaz de programación de aplicaciones), que es un intermediario de software que permite que dos aplicaciones se comuniquen entre sí.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://aws.amazon.com/es/what-is/api/\">¿Qué es una API?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7OXs3kUjdNE?si=P3O-wH1PH3ZgrnSH&#x26;cc_load_policy=1&#x26;cc_lang_pref=e\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"rest-recomendado\">REST (Recomendado)\u003C/h2>\n\u003Cp>REST, o REpresentational State Transfer, es un estilo arquitectónico para proporcionar estándares entre sistemas informáticos en la web, facilitando la comunicación entre sistemas.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.redhat.com/es/topics/api/what-is-a-rest-api\">¿Qué es REST API?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.udemy.com/course/aprende-a-disenar-una-api-restful-correctamente/\">Aprende a diseñar una API RESTFul correctamente\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://ed.team/cursos/api-rest\">Introducción a API REST\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"apis-json-recomendado\">APIs JSON (Recomendado)\u003C/h2>\n\u003Cp>JSON o JavaScript Object Notation es un esquema de codificación que está diseñado para eliminar la necesidad de un código ad-hoc para cada aplicación para comunicarse con los servidores que se comunican de una manera definida. El módulo API JSON expone una implementación para almacenes de datos y estructuras de datos, como tipos de entidad, paquetes y campos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://keepcoding.io/blog/json-api-que-es-para-que-sirve/\">¿Qué es y para qué sirve?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6tiqf0oG9do?si=kk_9PY138MPQRbIL&#x26;cc_load_policy=1&#x26;cc_lang_pref=e\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"soap\">SOAP\u003C/h2>\n\u003Cp>Simple Object Access Protocol (SOAP) es un protocolo de mensajes para el intercambio de información entre sistemas y aplicaciones. Cuando se trata de interfaces de programación de aplicaciones (API), una API SOAP se desarrolla de forma más estructurada y formalizada. Los mensajes SOAP pueden transmitirse a través de diversos protocolos de nivel inferior, incluido el Protocolo de Transferencia de Hipertexto (HTTP) relacionado con la web.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/soap-simple-object-access-protocol/\">SOAP: explicación del protocolo de red\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"grpc\">gRPC\u003C/h2>\n\u003Cp>gRPC es un framework RPC universal de código abierto y alto rendimiento.\u003C/p>\n\u003Cp>RPC significa Remote Procedure Call, hay un debate en curso sobre lo que la g significa. RPC es un protocolo que permite a un programa ejecutar un procedimiento de otro programa ubicado en otro ordenador. La gran ventaja es que el desarrollador no necesita codificar los detalles de la interacción remota. El procedimiento remoto se llama como cualquier otra función. Pero el cliente y el servidor pueden codificarse en lenguajes diferentes.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.paradigmadigital.com/dev/grpc-que-es-como-funciona/\">gRPC, ¿qué es y cómo funciona?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nwdL6NOBtGI?si=JHHSao-MwKbluJdA&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"graphql\">GraphQL\u003C/h2>\n\u003Cp>GraphQL es un lenguaje de consulta y un sistema de ejecución para API (interfaces de programación de aplicaciones). Está diseñado para ofrecer a los clientes una forma flexible y eficaz de solicitar datos a los servidores, y a menudo se utiliza como alternativa a las API REST (transferencia de estado representacional).\u003C/p>\n\u003Cp>Una de las principales características de GraphQL es su capacidad para especificar exactamente los datos que se necesitan, en lugar de recibir un conjunto fijo de datos de un punto final. Esto permite a los clientes solicitar sólo los datos que necesitan y reduce la cantidad de datos que hay que transferir por la red.\u003C/p>\n\u003Cp>GraphQL también permite definir la estructura de los datos que devuelve el servidor, lo que permite a los clientes solicitar datos de forma predecible y flexible. Esto facilita la creación y el mantenimiento de aplicaciones cliente que dependen de los datos del servidor.\u003C/p>\n\u003Cp>GraphQL se utiliza ampliamente en aplicaciones web y móviles modernas, y cuenta con el apoyo de una amplia y activa comunidad de desarrolladores.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.redhat.com/es/topics/api/what-is-graphql\">¿Qué es GraphQL?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tqxvJfd69zs?si=i33cHbOAR4PcCtVs&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QG-qbmW-wes?si=mGcd7IfGcynuvUAw&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"hateoas\">Hateoas\u003C/h2>\n\u003Cp>HATEOAS es un acrónimo de Hypermedia As The Engine Of Application State (Hipermedia como motor del estado de la aplicación), es el concepto de que cuando se envía información a través de una API RESTful, el documento recibido debe contener todo lo que el cliente necesita para analizar y utilizar los datos, es decir, no tiene que ponerse en contacto con ningún otro punto final que no se mencione explícitamente en el documento.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/hateoas-que-es-y-cual-es-su-funcion-en-las-api-rest/\">HATEOAS: ¿cuál es el principio que oculta este acrónimo?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"especificación-openapi\">Especificación OpenAPI\u003C/h2>\n\u003Cp>La especificación OpenAPI (OAS) define una interfaz estándar e independiente del idioma para las API RESTful que permite tanto a humanos como a ordenadores descubrir y comprender las capacidades del servicio sin necesidad de acceder al código fuente, la documentación o mediante la inspección del tráfico de red. Cuando se define correctamente, un consumidor puede entender e interactuar con el servicio remoto con una cantidad mínima de lógica de implementación.\u003C/p>\n\u003Cp>Una definición OpenAPI puede ser utilizada por herramientas de generación de documentación para mostrar la API, herramientas de generación de código para generar servidores y clientes en varios lenguajes de programación, herramientas de prueba y muchos otros casos de uso.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.ionos.es/digitalguide/paginas-web/desarrollo-web/que-es-openapi/\">¿Qué es OpenAPI?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"autenticación\">Autenticación\u003C/h2>\n\u003Cp>El proceso de autenticación de la API valida la identidad del cliente que intenta establecer una conexión mediante un protocolo de autenticación. El protocolo envía las credenciales del cliente remoto que solicita la conexión al servidor de acceso remoto en texto plano o cifrado. El servidor sabe entonces si puede conceder acceso a ese cliente remoto o no.\u003C/p>\n\u003Cp>Aquí está la lista de formas comunes de autenticación:\u003C/p>\n\u003Cul>\n\u003Cli>Autenticación JWT\u003C/li>\n\u003Cli>Autenticación basada en token\u003C/li>\n\u003Cli>Autenticación basada en sesión\u003C/li>\n\u003Cli>Autenticación básica\u003C/li>\n\u003Cli>OAuth - Autorización abierta\u003C/li>\n\u003Cli>SSO - Inicio de sesión único\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"jwt\">JWT\u003C/h3>\n\u003Cp>JWT son las siglas de JSON Web Token, un estándar/metodología abierta de encriptación basada en tokens que se utiliza para transferir información de forma segura como un objeto JSON. Clientes y servidores utilizan JWT para compartir información de forma segura, conteniendo el JWT objetos JSON codificados y reclamaciones. Los tokens JWT están diseñados para ser compactos, seguros de usar dentro de URLs, e ideales para contextos SSO.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://keepcoding.io/blog/que-es-jwt/\">¿Qué es JWT (JSON Web Tokens)?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3o4vEIkiRgE?si=79X1GfppUt_bkGWb&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"autenticación-básica\">Autenticación básica\u003C/h3>\n\u003Cp>Dado el nombre de “autenticación básica”, no debes confundir la autenticación básica con la autenticación estándar de nombre de usuario y contraseña. La autenticación básica es parte de la especificación HTTP, y los detalles se pueden encontrar en el RFC7617.\u003C/p>\n\u003Cp>Como forma parte de las especificaciones HTTP, todos los navegadores tienen soporte nativo para la “Autenticación Básica HTTP”.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Web/HTTP/Authentication\">Autenticación HTTP\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"autenticación-por-token\">Autenticación por token\u003C/h3>\n\u003Cp>La autenticación basada en token es un protocolo que permite a los usuarios verificar su identidad y recibir a cambio un token de acceso único. Durante el periodo de validez del token, los usuarios acceden al sitio web o aplicación para el que se ha emitido el token, en lugar de tener que volver a introducir las credenciales cada vez que regresan a la misma página web, aplicación o cualquier recurso protegido con ese mismo token.\u003C/p>\n\u003Cp>Los tokens de autenticación funcionan como un billete sellado. El usuario conserva el acceso mientras el token siga siendo válido. Una vez que el usuario cierra la sesión o sale de una aplicación, el token queda invalidado.\u003C/p>\n\u003Cp>La autenticación basada en tokens es diferente de las técnicas tradicionales de autenticación basadas en contraseñas o servidores. Los tokens ofrecen una segunda capa de seguridad, y los administradores tienen un control detallado de cada acción y transacción.\u003C/p>\n\u003Cp>Sin embargo, el uso de tokens requiere algunos conocimientos de programación. La mayoría de los desarrolladores aprenden las técnicas rápidamente, pero hay una curva de aprendizaje.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/es-es/learning/access-management/token-based-authentication/\">¿Qué es la autenticación basada en token?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"oauth\">OAuth\u003C/h3>\n\u003Cp>OAuth significa Open Authorization y es un estándar abierto para la autorización. Funciona para autorizar dispositivos, API, servidores y aplicaciones utilizando tokens de acceso en lugar de credenciales de usuario, lo que se conoce como “acceso delegado seguro”.\u003C/p>\n\u003Cp>En su forma más simple, OAuth delega la autenticación en servicios como Facebook, Amazon o Twitter y autoriza a las aplicaciones de terceros a acceder a la cuenta del usuario sin tener que introducir su nombre de usuario y contraseña.\u003C/p>\n\u003Cp>Se utiliza sobre todo para REST/API y sólo proporciona un alcance limitado de los datos de un usuario.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.digitalocean.com/community/tutorials/una-introduccion-a-oauth-2-es\">Una introducción a OAuth 2\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://auth0.com/es/intro-to-iam/what-is-oauth-2\">¿Qué es OAuth 2.0?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GeXbsMezj8s?si=0f3fBkYyBhy1y_fb&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"autenticación-basada-en-cookies\">Autenticación basada en cookies\u003C/h3>\n\u003Cp>Las cookies son fragmentos de datos que se utilizan para identificar al usuario y sus preferencias. El navegador devuelve la cookie al servidor cada vez que se solicita la página. Las cookies específicas, como las cookies HTTP, se utilizan para realizar la autenticación basada en cookies para mantener la sesión de cada usuario.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Web/HTTP/Cookies\">HTTP cookies\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/DxYAcXiy-ak?si=rWqalHWGqx9hq7Hy&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"openid\">OpenID\u003C/h3>\n\u003Cp>OpenID es un protocolo que utiliza los mecanismos de autorización y autenticación de OAuth 2.0 y que actualmente está ampliamente adoptado por muchos proveedores de identidad en Internet. Resuelve el problema de la necesidad de compartir la información personal del usuario entre muchos servicios web diferentes (por ejemplo, tiendas en línea, foros de debate, etc.).\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://auth0.com/es/intro-to-iam/what-is-openid-connect-oidc\">¿Qué es OpenID Connect (OIDC)?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/66Z6nFzLTos?si=pGX3OvgufPGsvSZe&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"lenguaje-de-marcado-de-aserción-de-seguridad-saml\">Lenguaje de marcado de aserción de seguridad (SAML)\u003C/h3>\n\u003Cp>SAML son las siglas de Security Assertion Markup Language. Es un estándar basado en XML para el intercambio de datos de autenticación y autorización entre partes, en particular entre un proveedor de identidades (IdP) y un proveedor de servicios (SP). En un sistema basado en SAML, un usuario solicita acceso a un recurso protegido. El proveedor de servicios solicita al proveedor de identidades que autentique al usuario y confirme si se le concede el acceso al recurso.\u003C/p>\n\u003Ch4 id=\"ventajas-de-saml\">Ventajas de SAML\u003C/h4>\n\u003Cp>Algunas de las ventajas de utilizar SAML son\u003C/p>\n\u003Cul>\n\u003Cli>Inicio de sesión único (SSO): Los usuarios pueden iniciar sesión una vez en el IdP y acceder a varios proveedores de servicios sin necesidad de autenticarse de nuevo.\u003C/li>\n\u003Cli>Mayor seguridad: No es necesario que el proveedor de servicios almacene y gestione las contraseñas y credenciales de usuario, lo que reduce los posibles vectores de ataque.\u003C/li>\n\u003Cli>Mayor eficacia: Como los usuarios ya no necesitan mantener varios conjuntos de credenciales, la gestión del acceso se vuelve más sencilla tanto para el usuario como para los administradores del sistema.\u003C/li>\n\u003Cli>Interoperabilidad: SAML permite que una amplia gama de aplicaciones trabajen juntas, independientemente de la tecnología o plataforma subyacente.\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"componentes-de-saml\">Componentes de SAML\u003C/h4>\n\u003Cp>En la arquitectura SAML intervienen tres componentes principales:\u003C/p>\n\u003Col>\n\u003Cli>Proveedor de identidades (IdP): La entidad que gestiona las identidades de los usuarios y los autentica proporcionando tokens de seguridad, también llamados aserciones.\u003C/li>\n\u003Cli>Proveedor de servicios (SP): La entidad que proporciona un servicio (como una aplicación web o API) y confía en el proveedor de identidades para autenticar a los usuarios y conceder/denegar el acceso a los recursos.\u003C/li>\n\u003Cli>Usuario/Principal: El usuario final que desea acceder al servicio prestado por el proveedor de servicios.\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"flujo-de-trabajo-saml\">Flujo de trabajo SAML\u003C/h4>\n\u003Cp>El proceso de autenticación SAML consta de los siguientes pasos:\u003C/p>\n\u003Col>\n\u003Cli>El usuario solicita al proveedor de servicios el acceso a un recurso protegido.\u003C/li>\n\u003Cli>Si el usuario aún no está autenticado, el proveedor de servicios genera y envía una solicitud de autenticación SAML al proveedor de identidades.\u003C/li>\n\u003Cli>El proveedor de identidad autentica al usuario (utilizando, por ejemplo, un nombre de usuario y una contraseña, autenticación multifactor u otro método).\u003C/li>\n\u003Cli>El proveedor de identidad construye una respuesta SAML, que incluye detalles sobre el usuario y afirma si el usuario está autorizado a acceder al recurso solicitado.\u003C/li>\n\u003Cli>La respuesta SAML se envía de vuelta al proveedor de servicios, normalmente a través del navegador web o el cliente API del usuario.\u003C/li>\n\u003Cli>El proveedor de servicios procesa la respuesta SAML, extrae la información necesaria y concede o deniega el acceso al usuario basándose en la afirmación del proveedor de identidades.\u003C/li>\n\u003C/ol>\n\u003Cp>Con SAML, puede agilizar la autenticación y autorización de usuarios en varias aplicaciones y sistemas, proporcionando una mejor experiencia de usuario y mejorando la seguridad general de su backend.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.microsoft.com/es-mx/security/business/security-101/what-is-security-assertion-markup-language-saml\">¿Qué es SAML?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/es-es/learning/access-management/what-is-saml/\">¿Qué es SAML? | Cómo funciona la autenticación SAML\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":297,"localImagePaths":353,"remoteImagePaths":354,"frontmatter":355,"imagePaths":358},[298,301,304,307,310,313,316,319,322,325,328,331,334,337,340,343,347,350],{"depth":76,"slug":299,"text":300},"rest-recomendado","REST (Recomendado)",{"depth":76,"slug":302,"text":303},"apis-json-recomendado","APIs JSON (Recomendado)",{"depth":76,"slug":305,"text":306},"soap","SOAP",{"depth":76,"slug":308,"text":309},"grpc","gRPC",{"depth":76,"slug":311,"text":312},"graphql","GraphQL",{"depth":76,"slug":314,"text":315},"hateoas","Hateoas",{"depth":76,"slug":317,"text":318},"especificación-openapi","Especificación OpenAPI",{"depth":76,"slug":320,"text":321},"autenticación","Autenticación",{"depth":211,"slug":323,"text":324},"jwt","JWT",{"depth":211,"slug":326,"text":327},"autenticación-básica","Autenticación básica",{"depth":211,"slug":329,"text":330},"autenticación-por-token","Autenticación por token",{"depth":211,"slug":332,"text":333},"oauth","OAuth",{"depth":211,"slug":335,"text":336},"autenticación-basada-en-cookies","Autenticación basada en cookies",{"depth":211,"slug":338,"text":339},"openid","OpenID",{"depth":211,"slug":341,"text":342},"lenguaje-de-marcado-de-aserción-de-seguridad-saml","Lenguaje de marcado de aserción de seguridad (SAML)",{"depth":344,"slug":345,"text":346},4,"ventajas-de-saml","Ventajas de SAML",{"depth":344,"slug":348,"text":349},"componentes-de-saml","Componentes de SAML",{"depth":344,"slug":351,"text":352},"flujo-de-trabajo-saml","Flujo de trabajo SAML",[],[],{"rutas":356,"title":288,"description":16,"pubDate":151,"updatedDate":151,"link":357,"lastModified":152},[15],"/blog/APIs/apis",[],"apis/index.md","aprende-un-lenguaje",{"id":360,"data":362,"body":367,"filePath":368,"digest":369,"rendered":370,"legacyId":407},{"rutas":363,"title":364,"description":16,"lang":17,"dir":18,"pubDate":365,"updatedDate":366},[30,15],"Aprende un lenguaje",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Incluso si usted es un principiante lo menos que sabría es que el Desarrollo Web se clasifica principalmente en dos facetas: Desarrollo Frontend y Desarrollo Backend. Y obviamente, ambos tienen su respectivo conjunto de herramientas y tecnologías. Por ejemplo, cuando hablamos de Desarrollo Frontend, siempre vienen 3 nombres en primer lugar - HTML, CSS y JavaScript.\r\n\r\nDel mismo modo, cuando se trata de desarrollo web backend, necesitamos principalmente un lenguaje de programación backend (o del lado del servidor) para que el sitio web funcione junto con otras herramientas y tecnologías como bases de datos, frameworks, servidores web, etc.\r\n\r\nElija un lenguaje de la lista y asegúrese de aprender sus peculiaridades, los detalles básicos sobre su tiempo de ejecución, por ejemplo, la concurrencia, el modelo de memoria, etc.\r\n\r\n## Rust\r\n\r\nRust es un moderno lenguaje de programación de sistemas centrado en la seguridad, la velocidad y la concurrencia. Consigue estos objetivos siendo seguro en memoria sin utilizar la recolección de basura.\r\n\r\n* [Libro en Español](https://goyox86.github.io/elpr/)\r\n* [Primeros pasos con Rust - Microsoft](https://learn.microsoft.com/es-es/training/paths/rust-first-steps/)\r\n* [Curso de programación de aprender Rust - Freecodecamp](https://www.freecodecamp.org/espanol/news/rust-en-replit/)\r\n* [Comprehensive Rust](https://google.github.io/comprehensive-rust/es/index.html)\r\n\r\n## Go\r\n\r\nGo es un lenguaje de programación de código abierto apoyado por Google. Go se puede utilizar para escribir servicios en la nube, herramientas CLI, se utiliza para el desarrollo de API, y mucho más.\r\n\r\n* [Apuntes de Golang](https://apuntes.de/golang/#gsc.tab=0)\r\n* [Estructuras de Datos y Algoritmos](https://apuntes.de/golang-estructuras-de-datos-y-algoritmos/#gsc.tab=0)\r\n* [Primeros pasos con Go - Microsoft](https://learn.microsoft.com/es-es/training/paths/go-first-steps/)\r\n* [Curso go 0 a 100 - Youtube](https://youtube.com/playlist?list=PLl_hIu4u7P64MEJpR3eVwQ1l_FtJq4a5g&si=yYWCZb9qQITuI0xd)\r\n\r\n## Java\r\nJava es un lenguaje de propósito general, utilizado principalmente para aplicaciones basadas en Internet. Fue creado en 1995 por James Gosling en Sun Microsystems y es una de las opciones más populares para los desarrolladores de backend.\r\n\r\n* [Curso Profesional - Codigofacilito](https://codigofacilito.com/cursos/java-profesional)\r\n\r\n## JavaScript\r\nAparte de ser utilizado en el navegador, JavaScript también se utiliza en el backend, por ejemplo, utilizando Node.js o Deno para escribir código del lado del servidor en JavaScript.\r\n\r\nSi eliges JavaScript para el Backend, mi recomendación personal sería aprender JavaScript y luego ir con Node.js ya que es la opción más popular y ampliamente utilizada. Además, recomendaría aprender TypeScript más adelante a medida que continúas con tu viaje de desarrollo de backend; es un superconjunto de JavaScript y se utiliza en muchos proyectos.\r\n\r\n* [JavaScript - Mozilla](https://developer.mozilla.org/es/docs/Web/JavaScript)\r\n* [Lenguaje Javascript](https://lenguajejs.com/javascript/)\r\n* [El Tutorial de JavaScript Moderno](https://es.javascript.info)\r\n* [Eloquent Javascript](https://eloquentjs-es.thedojo.mx/Eloquent_JavaScript.pdf)\r\n* [You Don't know JS - Español](https://daniel-morales.gitbook.io/javascript-avanzado-en-espanol/)\r\n* [You Don't know JS yet - Español](/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/readme)\r\n* [Clean Code](https://github.com/andersontr15/clean-code-javascript-es)\r\n\r\n## C#\r\nC# (pronunciado \"C sharp\") es un lenguaje de programación de propósito general creado por Microsoft. Sirve para realizar distintas tareas y puede utilizarse para crear aplicaciones web, juegos, aplicaciones para móviles, etc.\r\n\r\n* [Introducción a C# - Microsoft](https://learn.microsoft.com/es-es/dotnet/csharp/tour-of-csharp/tutorials/)\r\n\r\n## Python\r\nPython es un conocido lenguaje de programación fuertemente tipado y dinámicamente tipado. Al ser un lenguaje interpretado, el código se ejecuta en cuanto se escribe y la sintaxis de Python permite escribir código de forma programática funcional, procedimental u orientada a objetos.\r\n\r\n* [El tutorial de Python](https://docs.python.org/es/3/tutorial/)\r\n* [El Manual de Python](https://www.freecodecamp.org/espanol/news/el-manual-de-python/)\r\n* [El Libro De Python](https://ellibrodepython.com)\r\n* [Python para principiantes - Microsoft](https://learn.microsoft.com/es-es/training/paths/beginner-python/)\r\n* [Learn Python](https://www.learnpython.org/es/)\r\n\r\n## PHP\r\nPHP es un lenguaje de programación de propósito general que suele utilizarse para crear páginas web dinámicas e interactivas. Fue creado originalmente por el programador danés-canadiense Rasmus Lerdorf en 1994. La implementación de referencia de PHP es producida ahora por The PHP Group y apoyada por PHP Foundation. PHP admite estilos de programación procedimentales y orientados a objetos, así como algunos elementos de programación funcional.\r\n\r\n* [Manual de PHP](https://www.php.net/manual/es/index.php)\r\n\r\n## Ruby\r\nRuby es un lenguaje de programación interpretado de alto nivel que mezcla Perl, Smalltalk, Eiffel, Ada y Lisp. Ruby se centra en la simplicidad y la productividad, junto con una sintaxis que se lee y escribe de forma natural. Ruby admite programación procedimental, funcional y orientada a objetos, y está tipado dinámicamente.\r\n\r\n* [Ruby en 20 minutos](https://www.ruby-lang.org/es/documentation/quickstart/)\r\n* [Introducción a Ruby](https://makeitrealcamp.gitbook.io/ruby-book/)\r\n\r\n## C++\r\nC++ es un poderoso lenguaje de programación de propósito general. Puede ser utilizado para desarrollar sistemas operativos, navegadores, juegos, entre otros. C++ admite diferentes enfoques de programación, como procedimental, orientada a objetos, funcional, y más. Esto hace que C++ sea tanto potente como flexible.\r\n\r\n* [Microsoft Doc](https://learn.microsoft.com/es-es/cpp/cpp/?view=msvc-170)","src/content/blog/aprende-un-lenguaje/index.md","6e915a6b78416a14",{"html":371,"metadata":372},"\u003Cp>Incluso si usted es un principiante lo menos que sabría es que el Desarrollo Web se clasifica principalmente en dos facetas: Desarrollo Frontend y Desarrollo Backend. Y obviamente, ambos tienen su respectivo conjunto de herramientas y tecnologías. Por ejemplo, cuando hablamos de Desarrollo Frontend, siempre vienen 3 nombres en primer lugar - HTML, CSS y JavaScript.\u003C/p>\n\u003Cp>Del mismo modo, cuando se trata de desarrollo web backend, necesitamos principalmente un lenguaje de programación backend (o del lado del servidor) para que el sitio web funcione junto con otras herramientas y tecnologías como bases de datos, frameworks, servidores web, etc.\u003C/p>\n\u003Cp>Elija un lenguaje de la lista y asegúrese de aprender sus peculiaridades, los detalles básicos sobre su tiempo de ejecución, por ejemplo, la concurrencia, el modelo de memoria, etc.\u003C/p>\n\u003Ch2 id=\"rust\">Rust\u003C/h2>\n\u003Cp>Rust es un moderno lenguaje de programación de sistemas centrado en la seguridad, la velocidad y la concurrencia. Consigue estos objetivos siendo seguro en memoria sin utilizar la recolección de basura.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://goyox86.github.io/elpr/\">Libro en Español\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/training/paths/rust-first-steps/\">Primeros pasos con Rust - Microsoft\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.freecodecamp.org/espanol/news/rust-en-replit/\">Curso de programación de aprender Rust - Freecodecamp\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://google.github.io/comprehensive-rust/es/index.html\">Comprehensive Rust\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"go\">Go\u003C/h2>\n\u003Cp>Go es un lenguaje de programación de código abierto apoyado por Google. Go se puede utilizar para escribir servicios en la nube, herramientas CLI, se utiliza para el desarrollo de API, y mucho más.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://apuntes.de/golang/#gsc.tab=0\">Apuntes de Golang\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://apuntes.de/golang-estructuras-de-datos-y-algoritmos/#gsc.tab=0\">Estructuras de Datos y Algoritmos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/training/paths/go-first-steps/\">Primeros pasos con Go - Microsoft\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://youtube.com/playlist?list=PLl_hIu4u7P64MEJpR3eVwQ1l_FtJq4a5g&#x26;si=yYWCZb9qQITuI0xd\">Curso go 0 a 100 - Youtube\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"java\">Java\u003C/h2>\n\u003Cp>Java es un lenguaje de propósito general, utilizado principalmente para aplicaciones basadas en Internet. Fue creado en 1995 por James Gosling en Sun Microsystems y es una de las opciones más populares para los desarrolladores de backend.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://codigofacilito.com/cursos/java-profesional\">Curso Profesional - Codigofacilito\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"javascript\">JavaScript\u003C/h2>\n\u003Cp>Aparte de ser utilizado en el navegador, JavaScript también se utiliza en el backend, por ejemplo, utilizando Node.js o Deno para escribir código del lado del servidor en JavaScript.\u003C/p>\n\u003Cp>Si eliges JavaScript para el Backend, mi recomendación personal sería aprender JavaScript y luego ir con Node.js ya que es la opción más popular y ampliamente utilizada. Además, recomendaría aprender TypeScript más adelante a medida que continúas con tu viaje de desarrollo de backend; es un superconjunto de JavaScript y se utiliza en muchos proyectos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Web/JavaScript\">JavaScript - Mozilla\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://lenguajejs.com/javascript/\">Lenguaje Javascript\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://es.javascript.info\">El Tutorial de JavaScript Moderno\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://eloquentjs-es.thedojo.mx/Eloquent_JavaScript.pdf\">Eloquent Javascript\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://daniel-morales.gitbook.io/javascript-avanzado-en-espanol/\">You Don’t know JS - Español\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/readme\">You Don’t know JS yet - Español\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/andersontr15/clean-code-javascript-es\">Clean Code\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"c\">C#\u003C/h2>\n\u003Cp>C# (pronunciado “C sharp”) es un lenguaje de programación de propósito general creado por Microsoft. Sirve para realizar distintas tareas y puede utilizarse para crear aplicaciones web, juegos, aplicaciones para móviles, etc.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/dotnet/csharp/tour-of-csharp/tutorials/\">Introducción a C# - Microsoft\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"python\">Python\u003C/h2>\n\u003Cp>Python es un conocido lenguaje de programación fuertemente tipado y dinámicamente tipado. Al ser un lenguaje interpretado, el código se ejecuta en cuanto se escribe y la sintaxis de Python permite escribir código de forma programática funcional, procedimental u orientada a objetos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://docs.python.org/es/3/tutorial/\">El tutorial de Python\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.freecodecamp.org/espanol/news/el-manual-de-python/\">El Manual de Python\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://ellibrodepython.com\">El Libro De Python\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/training/paths/beginner-python/\">Python para principiantes - Microsoft\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.learnpython.org/es/\">Learn Python\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"php\">PHP\u003C/h2>\n\u003Cp>PHP es un lenguaje de programación de propósito general que suele utilizarse para crear páginas web dinámicas e interactivas. Fue creado originalmente por el programador danés-canadiense Rasmus Lerdorf en 1994. La implementación de referencia de PHP es producida ahora por The PHP Group y apoyada por PHP Foundation. PHP admite estilos de programación procedimentales y orientados a objetos, así como algunos elementos de programación funcional.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.php.net/manual/es/index.php\">Manual de PHP\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"ruby\">Ruby\u003C/h2>\n\u003Cp>Ruby es un lenguaje de programación interpretado de alto nivel que mezcla Perl, Smalltalk, Eiffel, Ada y Lisp. Ruby se centra en la simplicidad y la productividad, junto con una sintaxis que se lee y escribe de forma natural. Ruby admite programación procedimental, funcional y orientada a objetos, y está tipado dinámicamente.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.ruby-lang.org/es/documentation/quickstart/\">Ruby en 20 minutos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://makeitrealcamp.gitbook.io/ruby-book/\">Introducción a Ruby\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"c-1\">C++\u003C/h2>\n\u003Cp>C++ es un poderoso lenguaje de programación de propósito general. Puede ser utilizado para desarrollar sistemas operativos, navegadores, juegos, entre otros. C++ admite diferentes enfoques de programación, como procedimental, orientada a objetos, funcional, y más. Esto hace que C++ sea tanto potente como flexible.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/cpp/cpp/?view=msvc-170\">Microsoft Doc\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":373,"localImagePaths":401,"remoteImagePaths":402,"frontmatter":403,"imagePaths":406},[374,377,380,383,386,389,392,395,398],{"depth":76,"slug":375,"text":376},"rust","Rust",{"depth":76,"slug":378,"text":379},"go","Go",{"depth":76,"slug":381,"text":382},"java","Java",{"depth":76,"slug":384,"text":385},"javascript","JavaScript",{"depth":76,"slug":387,"text":388},"c","C#",{"depth":76,"slug":390,"text":391},"python","Python",{"depth":76,"slug":393,"text":394},"php","PHP",{"depth":76,"slug":396,"text":397},"ruby","Ruby",{"depth":76,"slug":399,"text":400},"c-1","C++",[],[],{"rutas":404,"title":364,"description":16,"pubDate":151,"updatedDate":151,"link":405,"lastModified":152},[30,15],"/blog/Aprende_un_lenguaje/aprende-un-lenguaje",[],"aprende-un-lenguaje/index.md","ci-cd",{"id":408,"data":410,"body":415,"filePath":416,"digest":417,"legacyId":418,"deferredRender":25},{"rutas":411,"title":412,"description":16,"lang":17,"dir":18,"pubDate":413,"updatedDate":414},[15],"CI & CD",["Date","2023-12-22T07:00:00.000Z"],["Date","2023-12-22T07:00:00.000Z"],"import Subtitles from '@Components/signals/Subtitles.astro'\r\n\r\nCI/CD (Integración Continua/Despliegue Continuo) es la práctica de automatizar la construcción, prueba y despliegue de aplicaciones con el objetivo principal de detectar problemas temprano y proporcionar lanzamientos más rápidos en el entorno de producción.\r\n\r\n## Videos\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xm1psJEFFIY?si=4agHcvZvFA_eidtU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Rs3SBnED5QY?si=a6NxBiU2ABS4iLvP\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## ¿Qué es un CI/CD?\r\n\r\n* [¿QUÉ ES CI/CD? - Unity](https://unity.com/es/solutions/what-is-ci-cd#:~:text=¿Qué%20es%20CI%2FCD%3F,la%20entrega%20continua%20de%20código.)\r\n* [¿Qué es CI/CD? - Red Hat](https://www.redhat.com/es/topics/devops/what-is-ci-cd)\r\n\r\n\r\n## Recursos en inglés \r\n\r\n\u003CSubtitles />\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/scEDHsr3APg?si=zn_WwEKnbn9yuweY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/ci-cd/index.mdx","e18e274501637aab","ci-cd/index.mdx","bd-relacionales",{"id":419,"data":421,"body":426,"filePath":427,"digest":428,"rendered":429,"legacyId":454},{"rutas":422,"title":423,"description":16,"lang":17,"dir":18,"pubDate":424,"updatedDate":425},[15],"Bases de datos relacionales",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Una base de datos relacional es un tipo de base de datos que almacena y proporciona acceso a puntos de datos que están relacionados entre sí. Las bases de datos relacionales almacenan los datos en una serie de tablas. Las interconexiones entre las tablas se especifican como claves externas. Una clave externa es una referencia única de una fila de una tabla relacional a otra fila de una tabla, que puede ser la misma tabla, pero lo más habitual es que sea una tabla diferente.\r\n\r\n* [¿Qué es una base de datos relacional?](https://www.ibm.com/mx-es/topics/relational-databases)\r\n* [¡La historia completa de las bases de datos SQL!](https://ed.team/blog/la-historia-completa-de-las-bases-de-datos-sql-o-relacionales)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uUdKAYl-F7g?si=yVgR-za-Ks8QHvC0&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## PostgreSQL (Recomendado)\r\nPostgreSQL, también conocido como Postgres, es un sistema de gestión de bases de datos relacionales gratuito y de código abierto que hace hincapié en la extensibilidad y el cumplimiento de SQL.\r\n\r\n* [Tutorial de PostgreSQL - Opción para traducir en la pagina](https://www.geeksforgeeks.org/what-is-postgresql-introduction/)\r\n* [¿Qué es PostgreSQL?](https://www.ibm.com/mx-es/topics/postgresql)\r\n* [Introducción a PostgreSQL](https://medium.com/@diego.coder/introducción-a-postgresql-70dafbaac615)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qw--VYLpxG4?si=IXyQVTnzf2tVtamy&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## MySQL\r\nMySQL es un sistema de gestión de bases de datos relacionales (RDBMS) de código abierto increíblemente popular. MySQL puede utilizarse como cliente independiente o junto con otros servicios para proporcionar conectividad a bases de datos. La M de la pila LAMP significa MySQL; sólo eso ya debería dar una idea de su prevalencia.\r\n\r\n* [¿Qué es MySQL?](https://cloud.google.com/mysql?hl=es)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/96s2i-H7e0w?si=wzQRQIEOOZYxAA_C&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## MariaDB\r\nEl servidor MariaDB es una bifurcación del servidor MySQL desarrollada por la comunidad. Iniciado por miembros del equipo original de MySQL, MariaDB trabaja activamente con desarrolladores externos para ofrecer el servidor SQL abierto más completo, estable y con las licencias más razonables de la industria. MariaDB se creó con la intención de ser una versión más versátil y sustitutiva de MySQL.\r\n\r\n* [¿Cuál es la diferencia entre MariaDB y MySQL?](https://aws.amazon.com/es/compare/the-difference-between-mariadb-vs-mysql/#:~:text=MariaDB%20admite%20el%20cifrado%20de%20registro,el%20cifrado%20de%20registro%20binario.&text=MySQL%20tiene%20menos%20motores%20de,varios%20motores%20en%20una%20tabla.&text=MySQL%20tiene%20dos%20versiones%3A%20MySQL,y%20una%20versión%20de%20GPL.)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RwvpitfevNU?si=07_EHxmFMfg13cKD&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## MS SQL\r\nMS SQL (o Microsoft SQL Server) es el sistema de gestión de bases de datos relacionales (RDBMS) desarrollado por Microsoft. MS SQL utiliza el lenguaje de consulta T-SQL (Transact-SQL) para interactuar con las bases de datos relacionales. Existen muchas versiones y ediciones diferentes de MS SQL\r\n\r\n* [Introducción a SQL Server](https://www.microsoft.com/es-mx/sql-server)\r\n* [Tutoriales de SQL Server](https://learn.microsoft.com/es-mx/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15)\r\n\r\n\r\n## Oracle\r\nOracle Database Server or sometimes called Oracle RDBMS or even simply Oracle is a world leading relational database management system produced by Oracle Corporation.\r\n\r\n* [Base de datos](https://www.oracle.com/mx/database/)\r\n* [Definición y funcionamiento](https://www.ionos.es/digitalguide/hosting/cuestiones-tecnicas/oracle-database/)","src/content/blog/bd-relacionales/index.md","bdeda828476b1fec",{"html":430,"metadata":431},"\u003Cp>Una base de datos relacional es un tipo de base de datos que almacena y proporciona acceso a puntos de datos que están relacionados entre sí. Las bases de datos relacionales almacenan los datos en una serie de tablas. Las interconexiones entre las tablas se especifican como claves externas. Una clave externa es una referencia única de una fila de una tabla relacional a otra fila de una tabla, que puede ser la misma tabla, pero lo más habitual es que sea una tabla diferente.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.ibm.com/mx-es/topics/relational-databases\">¿Qué es una base de datos relacional?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://ed.team/blog/la-historia-completa-de-las-bases-de-datos-sql-o-relacionales\">¡La historia completa de las bases de datos SQL!\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uUdKAYl-F7g?si=yVgR-za-Ks8QHvC0&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"postgresql-recomendado\">PostgreSQL (Recomendado)\u003C/h2>\n\u003Cp>PostgreSQL, también conocido como Postgres, es un sistema de gestión de bases de datos relacionales gratuito y de código abierto que hace hincapié en la extensibilidad y el cumplimiento de SQL.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/what-is-postgresql-introduction/\">Tutorial de PostgreSQL - Opción para traducir en la pagina\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.ibm.com/mx-es/topics/postgresql\">¿Qué es PostgreSQL?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://medium.com/@diego.coder/introducci%C3%B3n-a-postgresql-70dafbaac615\">Introducción a PostgreSQL\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qw--VYLpxG4?si=IXyQVTnzf2tVtamy&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"mysql\">MySQL\u003C/h2>\n\u003Cp>MySQL es un sistema de gestión de bases de datos relacionales (RDBMS) de código abierto increíblemente popular. MySQL puede utilizarse como cliente independiente o junto con otros servicios para proporcionar conectividad a bases de datos. La M de la pila LAMP significa MySQL; sólo eso ya debería dar una idea de su prevalencia.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://cloud.google.com/mysql?hl=es\">¿Qué es MySQL?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/96s2i-H7e0w?si=wzQRQIEOOZYxAA_C&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"mariadb\">MariaDB\u003C/h2>\n\u003Cp>El servidor MariaDB es una bifurcación del servidor MySQL desarrollada por la comunidad. Iniciado por miembros del equipo original de MySQL, MariaDB trabaja activamente con desarrolladores externos para ofrecer el servidor SQL abierto más completo, estable y con las licencias más razonables de la industria. MariaDB se creó con la intención de ser una versión más versátil y sustitutiva de MySQL.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://aws.amazon.com/es/compare/the-difference-between-mariadb-vs-mysql/#:~:text=MariaDB%20admite%20el%20cifrado%20de%20registro,el%20cifrado%20de%20registro%20binario.&#x26;text=MySQL%20tiene%20menos%20motores%20de,varios%20motores%20en%20una%20tabla.&#x26;text=MySQL%20tiene%20dos%20versiones%3A%20MySQL,y%20una%20versi%C3%B3n%20de%20GPL.\">¿Cuál es la diferencia entre MariaDB y MySQL?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RwvpitfevNU?si=07_EHxmFMfg13cKD&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"ms-sql\">MS SQL\u003C/h2>\n\u003Cp>MS SQL (o Microsoft SQL Server) es el sistema de gestión de bases de datos relacionales (RDBMS) desarrollado por Microsoft. MS SQL utiliza el lenguaje de consulta T-SQL (Transact-SQL) para interactuar con las bases de datos relacionales. Existen muchas versiones y ediciones diferentes de MS SQL\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.microsoft.com/es-mx/sql-server\">Introducción a SQL Server\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-mx/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15\">Tutoriales de SQL Server\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"oracle\">Oracle\u003C/h2>\n\u003Cp>Oracle Database Server or sometimes called Oracle RDBMS or even simply Oracle is a world leading relational database management system produced by Oracle Corporation.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.oracle.com/mx/database/\">Base de datos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.ionos.es/digitalguide/hosting/cuestiones-tecnicas/oracle-database/\">Definición y funcionamiento\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":432,"localImagePaths":448,"remoteImagePaths":449,"frontmatter":450,"imagePaths":453},[433,436,439,442,445],{"depth":76,"slug":434,"text":435},"postgresql-recomendado","PostgreSQL (Recomendado)",{"depth":76,"slug":437,"text":438},"mysql","MySQL",{"depth":76,"slug":440,"text":441},"mariadb","MariaDB",{"depth":76,"slug":443,"text":444},"ms-sql","MS SQL",{"depth":76,"slug":446,"text":447},"oracle","Oracle",[],[],{"rutas":451,"title":423,"description":16,"pubDate":151,"updatedDate":151,"link":452,"lastModified":152},[15],"/blog/Bases_Datos_Relacionales/bd-relacionales",[],"bd-relacionales/index.md","control-versiones",{"id":455,"data":457,"body":462,"filePath":463,"digest":464,"rendered":465,"legacyId":481},{"rutas":458,"title":459,"description":16,"lang":17,"dir":18,"pubDate":460,"updatedDate":461},[15],"Sistemas de control de versiones",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Los sistemas de control de versiones y fuentes permiten a los desarrolladores seguir y controlar los cambios en el código a lo largo del tiempo. Estos servicios suelen incluir la posibilidad de realizar revisiones atómicas del código, bifurcarse a partir de puntos concretos y comparar versiones del código. Son útiles para determinar quién, qué, cuándo y por qué se hicieron cambios en el código.\r\n\r\n### [¿Qué es el control de versiones?](https://learn.microsoft.com/es-es/devops/develop/git/what-is-version-control)\r\n\r\n## Git\r\nGit es un sistema de control de versiones distribuido, gratuito y de código abierto, diseñado para gestionar con rapidez y eficacia desde proyectos pequeños a muy grandes.\r\n\r\n* [¿Qué es Git?](https://learn.microsoft.com/es-es/devops/develop/git/what-is-githttps://learn.microsoft.com/es-es/devops/develop/git/what-is-git)\r\n* [git - la guía sencilla](https://rogerdudler.github.io/git-guide/index.es.html)\r\n* [Pro Git - Libro](https://git-scm.com/book/es/v2/)","src/content/blog/control-versiones/index.md","ca988b509567a388",{"html":466,"metadata":467},"\u003Cp>Los sistemas de control de versiones y fuentes permiten a los desarrolladores seguir y controlar los cambios en el código a lo largo del tiempo. Estos servicios suelen incluir la posibilidad de realizar revisiones atómicas del código, bifurcarse a partir de puntos concretos y comparar versiones del código. Son útiles para determinar quién, qué, cuándo y por qué se hicieron cambios en el código.\u003C/p>\n\u003Ch3 id=\"qué-es-el-control-de-versiones\">\u003Ca href=\"https://learn.microsoft.com/es-es/devops/develop/git/what-is-version-control\">¿Qué es el control de versiones?\u003C/a>\u003C/h3>\n\u003Ch2 id=\"git\">Git\u003C/h2>\n\u003Cp>Git es un sistema de control de versiones distribuido, gratuito y de código abierto, diseñado para gestionar con rapidez y eficacia desde proyectos pequeños a muy grandes.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://learn.microsoft.com/es-es/devops/develop/git/what-is-githttps://learn.microsoft.com/es-es/devops/develop/git/what-is-git\">¿Qué es Git?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://rogerdudler.github.io/git-guide/index.es.html\">git - la guía sencilla\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://git-scm.com/book/es/v2/\">Pro Git - Libro\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":468,"localImagePaths":475,"remoteImagePaths":476,"frontmatter":477,"imagePaths":480},[469,472],{"depth":211,"slug":470,"text":471},"qué-es-el-control-de-versiones","¿Qué es el control de versiones?",{"depth":76,"slug":473,"text":474},"git","Git",[],[],{"rutas":478,"title":459,"description":16,"pubDate":151,"updatedDate":151,"link":479,"lastModified":152},[15],"/blog/Control_Versiones/control-versiones",[],"control-versiones/index.md","cache",{"id":482,"data":484,"body":488,"filePath":489,"digest":490,"rendered":491,"legacyId":516},{"rutas":485,"title":191,"description":16,"lang":17,"dir":18,"pubDate":486,"updatedDate":487},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"El cacheo es una técnica que consiste en almacenar datos o información de uso frecuente en una memoria local, durante un periodo de tiempo determinado. Así, la próxima vez que el cliente solicite la misma información, en lugar de recuperarla de la base de datos, la obtendrá de la memoria local. La principal ventaja del almacenamiento en caché es que mejora el rendimiento al reducir la carga de procesamiento.\r\n\r\n## CDN (Content Delivery Network)\r\nUn servicio de Red de Entrega de Contenidos (CDN) tiene como objetivo proporcionar una alta disponibilidad y mejorar el rendimiento de los sitios web. Esto se consigue con una entrega rápida de los activos y contenidos del sitio web, normalmente a través de puntos finales geográficamente más cercanos a las solicitudes de los clientes. Las CDN comerciales tradicionales (Amazon CloudFront, Akamai, CloudFlare y Fastly) ofrecen servidores en todo el mundo que pueden utilizarse para este fin. Servir activos y contenidos a través de una CDN reduce el ancho de banda en el alojamiento de sitios web, proporciona una capa adicional de almacenamiento en caché para reducir posibles interrupciones y también puede mejorar la seguridad del sitio web.\r\n\r\n* [¿Qué es una CDN?](https://www.cloudflare.com/es-es/learning/cdn/what-is-a-cdn/)\r\n* [Red de distribución de contenidos](https://es.wikipedia.org/wiki/Red_de_distribución_de_contenidos)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6JDpkH3fMUw?si=VzGrQIqvtvGtEBU9&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Server Side\r\nEl almacenamiento en caché del lado del servidor almacena temporalmente archivos y datos web en el servidor de origen para reutilizarlos más tarde.\r\n\r\nCuando el usuario solicita la página web por primera vez, el sitio web sigue el proceso normal de recuperación de datos del servidor y genera o construye la página web del sitio. Una vez realizada la solicitud y recibida la respuesta, el servidor copia la página web y la almacena en la caché.\r\n\r\nLa próxima vez que el usuario vuelva a visitar el sitio web, éste cargará la copia ya guardada o en caché de la página web, haciéndola así más rápida.\r\n\r\n* [Cache web](https://www.hostinger.mx/tutoriales/cache-web)\r\n\r\n### Redis\r\nRedis es un almacén de estructuras de datos en memoria de código abierto (con licencia BSD) utilizado como base de datos, caché, agente de mensajes y motor de streaming. Redis proporciona estructuras de datos como cadenas, hashes, listas, conjuntos, conjuntos ordenados con consultas de rango, mapas de bits, hyperlogs, índices geoespaciales y flujos. Redis incorpora replicación, scripts Lua, desalojo LRU, transacciones y diferentes niveles de persistencia en disco, y proporciona alta disponibilidad a través de Redis Sentinel y particionamiento automático con Redis Cluster.\r\n\r\n* [Web](https://redis.com/es/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hRHM13uFpCE?si=Cjpg9OjBmvRSHcaX&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Memcached\r\nMemcached es un sistema de caché de memoria distribuida de propósito general. Se utiliza a menudo para acelerar sitios web dinámicos basados en bases de datos, almacenando datos y objetos en la memoria RAM para reducir el número de veces que una fuente de datos externa (como una base de datos o API) debe ser leída. Memcached es un software gratuito y de código abierto, con licencia BSD revisada. Memcached funciona en sistemas operativos tipo Unix (Linux y macOS) y en Microsoft Windows. Depende de la biblioteca libevent.\r\n\r\nLas API de Memcached proporcionan una tabla hash muy grande distribuida entre varias máquinas. Cuando la tabla está llena, las inserciones posteriores hacen que los datos más antiguos se purguen en el orden de uso menos reciente (LRU). Las aplicaciones que utilizan Memcached suelen almacenar las peticiones y adiciones en la RAM antes de recurrir a un almacén de respaldo más lento, como una base de datos.\r\n\r\nMemcached no tiene un mecanismo interno para rastrear los fallos que puedan ocurrir. Sin embargo, algunas utilidades de terceros proporcionan esta funcionalidad.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Memcached)\r\n* [Memcached: explicación sencilla de la memoria en caché](https://www.ionos.mx/digitalguide/hosting/cuestiones-tecnicas/que-es-memcached/)\r\n\r\n## Almacenamiento en caché del lado del cliente\r\nEl almacenamiento en caché del lado del cliente es el almacenamiento de datos de red en una caché local para su futura reutilización. Cuando una aplicación obtiene datos de la red, los almacena en una caché local. Una vez que un recurso ha sido almacenado en caché, el navegador utiliza la caché en futuras peticiones de ese recurso para aumentar el rendimiento.\r\n\r\n* [HTTP caching](https://developer.mozilla.org/es/docs/Web/HTTP/Caching)","src/content/blog/cache/index.md","9d30ed48bd522c23",{"html":492,"metadata":493},"\u003Cp>El cacheo es una técnica que consiste en almacenar datos o información de uso frecuente en una memoria local, durante un periodo de tiempo determinado. Así, la próxima vez que el cliente solicite la misma información, en lugar de recuperarla de la base de datos, la obtendrá de la memoria local. La principal ventaja del almacenamiento en caché es que mejora el rendimiento al reducir la carga de procesamiento.\u003C/p>\n\u003Ch2 id=\"cdn-content-delivery-network\">CDN (Content Delivery Network)\u003C/h2>\n\u003Cp>Un servicio de Red de Entrega de Contenidos (CDN) tiene como objetivo proporcionar una alta disponibilidad y mejorar el rendimiento de los sitios web. Esto se consigue con una entrega rápida de los activos y contenidos del sitio web, normalmente a través de puntos finales geográficamente más cercanos a las solicitudes de los clientes. Las CDN comerciales tradicionales (Amazon CloudFront, Akamai, CloudFlare y Fastly) ofrecen servidores en todo el mundo que pueden utilizarse para este fin. Servir activos y contenidos a través de una CDN reduce el ancho de banda en el alojamiento de sitios web, proporciona una capa adicional de almacenamiento en caché para reducir posibles interrupciones y también puede mejorar la seguridad del sitio web.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/es-es/learning/cdn/what-is-a-cdn/\">¿Qué es una CDN?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Red_de_distribuci%C3%B3n_de_contenidos\">Red de distribución de contenidos\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6JDpkH3fMUw?si=VzGrQIqvtvGtEBU9&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"server-side\">Server Side\u003C/h2>\n\u003Cp>El almacenamiento en caché del lado del servidor almacena temporalmente archivos y datos web en el servidor de origen para reutilizarlos más tarde.\u003C/p>\n\u003Cp>Cuando el usuario solicita la página web por primera vez, el sitio web sigue el proceso normal de recuperación de datos del servidor y genera o construye la página web del sitio. Una vez realizada la solicitud y recibida la respuesta, el servidor copia la página web y la almacena en la caché.\u003C/p>\n\u003Cp>La próxima vez que el usuario vuelva a visitar el sitio web, éste cargará la copia ya guardada o en caché de la página web, haciéndola así más rápida.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.hostinger.mx/tutoriales/cache-web\">Cache web\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"redis\">Redis\u003C/h3>\n\u003Cp>Redis es un almacén de estructuras de datos en memoria de código abierto (con licencia BSD) utilizado como base de datos, caché, agente de mensajes y motor de streaming. Redis proporciona estructuras de datos como cadenas, hashes, listas, conjuntos, conjuntos ordenados con consultas de rango, mapas de bits, hyperlogs, índices geoespaciales y flujos. Redis incorpora replicación, scripts Lua, desalojo LRU, transacciones y diferentes niveles de persistencia en disco, y proporciona alta disponibilidad a través de Redis Sentinel y particionamiento automático con Redis Cluster.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://redis.com/es/\">Web\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hRHM13uFpCE?si=Cjpg9OjBmvRSHcaX&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"memcached\">Memcached\u003C/h3>\n\u003Cp>Memcached es un sistema de caché de memoria distribuida de propósito general. Se utiliza a menudo para acelerar sitios web dinámicos basados en bases de datos, almacenando datos y objetos en la memoria RAM para reducir el número de veces que una fuente de datos externa (como una base de datos o API) debe ser leída. Memcached es un software gratuito y de código abierto, con licencia BSD revisada. Memcached funciona en sistemas operativos tipo Unix (Linux y macOS) y en Microsoft Windows. Depende de la biblioteca libevent.\u003C/p>\n\u003Cp>Las API de Memcached proporcionan una tabla hash muy grande distribuida entre varias máquinas. Cuando la tabla está llena, las inserciones posteriores hacen que los datos más antiguos se purguen en el orden de uso menos reciente (LRU). Las aplicaciones que utilizan Memcached suelen almacenar las peticiones y adiciones en la RAM antes de recurrir a un almacén de respaldo más lento, como una base de datos.\u003C/p>\n\u003Cp>Memcached no tiene un mecanismo interno para rastrear los fallos que puedan ocurrir. Sin embargo, algunas utilidades de terceros proporcionan esta funcionalidad.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Memcached\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.ionos.mx/digitalguide/hosting/cuestiones-tecnicas/que-es-memcached/\">Memcached: explicación sencilla de la memoria en caché\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"almacenamiento-en-caché-del-lado-del-cliente\">Almacenamiento en caché del lado del cliente\u003C/h2>\n\u003Cp>El almacenamiento en caché del lado del cliente es el almacenamiento de datos de red en una caché local para su futura reutilización. Cuando una aplicación obtiene datos de la red, los almacena en una caché local. Una vez que un recurso ha sido almacenado en caché, el navegador utiliza la caché en futuras peticiones de ese recurso para aumentar el rendimiento.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Web/HTTP/Caching\">HTTP caching\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":494,"localImagePaths":510,"remoteImagePaths":511,"frontmatter":512,"imagePaths":515},[495,498,501,504,507],{"depth":76,"slug":496,"text":497},"cdn-content-delivery-network","CDN (Content Delivery Network)",{"depth":76,"slug":499,"text":500},"server-side","Server Side",{"depth":211,"slug":502,"text":503},"redis","Redis",{"depth":211,"slug":505,"text":506},"memcached","Memcached",{"depth":76,"slug":508,"text":509},"almacenamiento-en-caché-del-lado-del-cliente","Almacenamiento en caché del lado del cliente",[],[],{"rutas":513,"title":191,"description":16,"pubDate":151,"updatedDate":151,"link":514,"lastModified":152},[15],"/blog/Cache/cache",[],"cache/index.md","internet",{"id":517,"data":519,"body":524,"filePath":525,"digest":526,"rendered":527,"legacyId":568},{"rutas":520,"title":521,"description":16,"lang":17,"dir":18,"pubDate":522,"updatedDate":523},[15],"Internet",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## [¿Cómo funciona Internet?](internet/como-funciona-internet)\r\n\r\nInternet es una red mundial de ordenadores conectados entre sí que se comunican mediante un conjunto normalizado de protocolos.\r\n\r\n#### Otros Recursos\r\n* [¿Cómo funciona Internet? - Cloudflare](https://www.cloudflare.com/es-es/learning/network-layer/how-does-the-internet-work/#:~:text=Los%20ordenadores%20se%20conectan%20entre%20sí%20y%20a%20Internet%20mediante%20cables,luego%20interpreta%20el%20ordenador%20receptor.)\r\n* [¿Cómo funciona Internet? - Mozilla](https://developer.mozilla.org/es/docs/Learn/Common_questions/Web_mechanics/How_does_the_Internet_work)\r\n\r\n## ¿Qué es HTTP?\r\n\r\nHTTP es el protocolo de comunicación de capa de aplicación basado en `TCP/IP` que estandariza la forma en que el cliente y el servidor se comunican entre sí. Define cómo se solicita y transmite el contenido a través de Internet.\r\n#### Otros Recursos\r\n\r\n* [¿Qué es HTTP? - Mozilla](https://developer.mozilla.org/es/docs/Web/HTTP/Basics_of_HTTP)\r\n\r\n## Navegadores y su funcionamiento\r\nUn navegador web es una aplicación informática que permite al usuario acceder y visualizar páginas web u otros contenidos en línea a través de su interfaz gráfica de usuario.\r\n#### Otros Recursos\r\n* [¿Qué es un navegador web? - Mozilla](https://www.mozilla.org/es-MX/firefox/browsers/what-is-a-browser/)\r\n* [¿Qué son los navegadores? - Ionos](https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/que-es-un-navegador/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/H2Pnadj2wvU?si=zi3yVMye8L5kfzJK&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xC9gh-R65Pk?si=rsemGWDNCdMbVHjg&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\r\n## DNS y su funcionamiento\r\nEl Sistema de Nombres de Dominio (DNS) es la guía telefónica de Internet. Los humanos acceden a la información en línea a través de nombres de dominio, como nytimes.com o espn.com. Los navegadores web interactúan a través de direcciones IP (Protocolo de Internet). El DNS traduce los nombres de dominio a direcciones IP para que los navegadores puedan cargar los recursos de Internet.\r\n#### Otros Recursos\r\n* [¿Qué es DNS? - Amazon](https://aws.amazon.com/es/route53/what-is-dns/#:~:text=Los%20servidores%20DNS%20convierten%20las,dominio%20en%20su%20navegador%20web.)\r\n* [¿Cómo funciona el DNS?](https://nic.ar/es/novedades/noticias/como-funciona-el-dns)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dIGxJCqLJlY?si=9WAElGzIL7l0ngb1&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sUhEqT_HSBI?si=7vN0E-b_EyFOWRe7&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## ¿Qué es un nombre de dominio?\r\nUn nombre de dominio es una dirección única y fácil de recordar que se utiliza para acceder a sitios web, como \"google.com\" y \"facebook.com\". Los usuarios pueden conectarse a sitios web utilizando nombres de dominio gracias al sistema DNS.\r\n#### Otros Recursos\r\n* [Conceptos básicos de los nombres de dominio - Google](https://support.google.com/a/answer/2573637?hl=es)\r\n* [¿Qué es un nombre de dominio? | Nombre de dominio vs. URL - Cloudflare](https://www.cloudflare.com/es-es/learning/dns/glossary/what-is-a-domain-name/)\r\n* [¿Qué es un nombre de dominio? - Mozilla](https://developer.mozilla.org/es/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name)\r\n\r\n## ¿Qué es un Hosting?\r\nEl alojamiento web es un servicio en línea que le permite publicar los archivos de su sitio web en Internet. Así, cualquiera que tenga acceso a Internet podrá acceder a su sitio web.\r\n#### Otros Recursos\r\n* [¿Qué es un hosting y cómo funciona? - Hostinger](https://www.hostinger.mx/tutoriales/que-es-un-hosting)\r\n* [¿Qué es un Hosting y cómo funciona? - Webempresa](https://www.webempresa.com/hosting/hosting-que-es-como-funciona.html)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ShEEe9n-PkI?si=xMyP_6F4SGXpH_y2&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/internet/index.md","7b78b6b7ab5361a4",{"html":528,"metadata":529},"\u003Ch2 id=\"cómo-funciona-internet\">\u003Ca href=\"internet/como-funciona-internet\">¿Cómo funciona Internet?\u003C/a>\u003C/h2>\n\u003Cp>Internet es una red mundial de ordenadores conectados entre sí que se comunican mediante un conjunto normalizado de protocolos.\u003C/p>\n\u003Ch4 id=\"otros-recursos\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/es-es/learning/network-layer/how-does-the-internet-work/#:~:text=Los%20ordenadores%20se%20conectan%20entre%20s%C3%AD%20y%20a%20Internet%20mediante%20cables,luego%20interpreta%20el%20ordenador%20receptor.\">¿Cómo funciona Internet? - Cloudflare\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Learn/Common_questions/Web_mechanics/How_does_the_Internet_work\">¿Cómo funciona Internet? - Mozilla\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"qué-es-http\">¿Qué es HTTP?\u003C/h2>\n\u003Cp>HTTP es el protocolo de comunicación de capa de aplicación basado en \u003Ccode>TCP/IP\u003C/code> que estandariza la forma en que el cliente y el servidor se comunican entre sí. Define cómo se solicita y transmite el contenido a través de Internet.\u003C/p>\n\u003Ch4 id=\"otros-recursos-1\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Web/HTTP/Basics_of_HTTP\">¿Qué es HTTP? - Mozilla\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"navegadores-y-su-funcionamiento\">Navegadores y su funcionamiento\u003C/h2>\n\u003Cp>Un navegador web es una aplicación informática que permite al usuario acceder y visualizar páginas web u otros contenidos en línea a través de su interfaz gráfica de usuario.\u003C/p>\n\u003Ch4 id=\"otros-recursos-2\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.mozilla.org/es-MX/firefox/browsers/what-is-a-browser/\">¿Qué es un navegador web? - Mozilla\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.ionos.mx/digitalguide/paginas-web/desarrollo-web/que-es-un-navegador/\">¿Qué son los navegadores? - Ionos\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/H2Pnadj2wvU?si=zi3yVMye8L5kfzJK&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xC9gh-R65Pk?si=rsemGWDNCdMbVHjg&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"dns-y-su-funcionamiento\">DNS y su funcionamiento\u003C/h2>\n\u003Cp>El Sistema de Nombres de Dominio (DNS) es la guía telefónica de Internet. Los humanos acceden a la información en línea a través de nombres de dominio, como nytimes.com o espn.com. Los navegadores web interactúan a través de direcciones IP (Protocolo de Internet). El DNS traduce los nombres de dominio a direcciones IP para que los navegadores puedan cargar los recursos de Internet.\u003C/p>\n\u003Ch4 id=\"otros-recursos-3\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://aws.amazon.com/es/route53/what-is-dns/#:~:text=Los%20servidores%20DNS%20convierten%20las,dominio%20en%20su%20navegador%20web.\">¿Qué es DNS? - Amazon\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://nic.ar/es/novedades/noticias/como-funciona-el-dns\">¿Cómo funciona el DNS?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dIGxJCqLJlY?si=9WAElGzIL7l0ngb1&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sUhEqT_HSBI?si=7vN0E-b_EyFOWRe7&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"qué-es-un-nombre-de-dominio\">¿Qué es un nombre de dominio?\u003C/h2>\n\u003Cp>Un nombre de dominio es una dirección única y fácil de recordar que se utiliza para acceder a sitios web, como “google.com” y “facebook.com”. Los usuarios pueden conectarse a sitios web utilizando nombres de dominio gracias al sistema DNS.\u003C/p>\n\u003Ch4 id=\"otros-recursos-4\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://support.google.com/a/answer/2573637?hl=es\">Conceptos básicos de los nombres de dominio - Google\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.cloudflare.com/es-es/learning/dns/glossary/what-is-a-domain-name/\">¿Qué es un nombre de dominio? | Nombre de dominio vs. URL - Cloudflare\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/es/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name\">¿Qué es un nombre de dominio? - Mozilla\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"qué-es-un-hosting\">¿Qué es un Hosting?\u003C/h2>\n\u003Cp>El alojamiento web es un servicio en línea que le permite publicar los archivos de su sitio web en Internet. Así, cualquiera que tenga acceso a Internet podrá acceder a su sitio web.\u003C/p>\n\u003Ch4 id=\"otros-recursos-5\">Otros Recursos\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.hostinger.mx/tutoriales/que-es-un-hosting\">¿Qué es un hosting y cómo funciona? - Hostinger\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.webempresa.com/hosting/hosting-que-es-como-funciona.html\">¿Qué es un Hosting y cómo funciona? - Webempresa\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ShEEe9n-PkI?si=xMyP_6F4SGXpH_y2&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>",{"headings":530,"localImagePaths":562,"remoteImagePaths":563,"frontmatter":564,"imagePaths":567},[531,534,537,540,542,545,547,550,552,555,557,560],{"depth":76,"slug":532,"text":533},"cómo-funciona-internet","¿Cómo funciona Internet?",{"depth":344,"slug":535,"text":536},"otros-recursos","Otros Recursos",{"depth":76,"slug":538,"text":539},"qué-es-http","¿Qué es HTTP?",{"depth":344,"slug":541,"text":536},"otros-recursos-1",{"depth":76,"slug":543,"text":544},"navegadores-y-su-funcionamiento","Navegadores y su funcionamiento",{"depth":344,"slug":546,"text":536},"otros-recursos-2",{"depth":76,"slug":548,"text":549},"dns-y-su-funcionamiento","DNS y su funcionamiento",{"depth":344,"slug":551,"text":536},"otros-recursos-3",{"depth":76,"slug":553,"text":554},"qué-es-un-nombre-de-dominio","¿Qué es un nombre de dominio?",{"depth":344,"slug":556,"text":536},"otros-recursos-4",{"depth":76,"slug":558,"text":559},"qué-es-un-hosting","¿Qué es un Hosting?",{"depth":344,"slug":561,"text":536},"otros-recursos-5",[],[],{"rutas":565,"title":521,"description":16,"pubDate":151,"updatedDate":151,"link":566,"lastModified":152},[15],"/blog/internet/como-funciona-internet",[],"internet/index.md","redes-protocolos",{"id":569,"data":571,"body":577,"filePath":578,"digest":579,"legacyId":580,"deferredRender":25},{"rutas":572,"title":574,"description":16,"lang":17,"dir":18,"pubDate":575,"updatedDate":576},[573],"AISecurity","Redes y protocolos",["Date","2025-05-02T07:00:00.000Z"],["Date","2025-05-02T07:00:00.000Z"],"**Objetivo**: Comprender cómo los dispositivos se comunican en una red, cómo fluye la información y cómo identificar, analizar o atacar tráfico.\r\n\r\n## 🧠 ¿Por qué es fundamental?\r\n\r\nCasi **todas las amenazas modernas** se aprovechan de vulnerabilidades en redes (puertos, servicios, protocolos mal configurados, etc.). Para proteger o explotar un sistema, debes:\r\n\r\n* Entender el modelo OSI y TCP/IP.\r\n* Analizar tráfico con herramientas como Wireshark.\r\n* Conocer protocolos como TCP, UDP, HTTP, DNS, ARP.\r\n* Saber qué es un puerto, IP, NAT, subnetting, etc.\r\n* Detectar patrones sospechosos en la red.\r\n\r\nSin esta base, todo lo demás (hacking ético, malware, defensa) es un \"castillo en el aire\".\r\n\r\n## 🗂️ Temas clave\r\n\r\n1. Modelo OSI y TCP/IP\r\n* Capas, funciones, protocolos asociados.\r\n* Ejemplo: HTTP es capa 7, TCP es capa 4.\r\n2. Direcciones IP, MAC, y puertos\r\n* IPv4 vs IPv6.\r\n* Puertos conocidos y escaneo.\r\n3. Subnetting y máscaras de red\r\n* Cómo dividir redes, CIDR, broadcast, etc.\r\n4. Routing y NAT\r\n* Cómo los paquetes llegan a su destino.\r\n* Traducción de direcciones en redes privadas.\r\n5. Protocolos esenciales\r\n* TCP vs UDP, HTTP/HTTPS, DNS, DHCP, ARP, ICMP.\r\n* Ataques relacionados: spoofing, flooding, poisoning.\r\n6. Sniffing y monitoreo de red\r\n* Captura de paquetes con Wireshark/tcpdump.\r\n* Análisis básico de tráfico.\r\n\r\n## 📘 Recursos recomendados\r\n### 🧑‍🏫 Cursos\r\n1. [Computer Networking - Coursera (Stanford)](https://www.coursera.org/learn/computer-networking)\r\n* Curso técnico, gratuito con opción de certificado.\r\n2. [Cisco Introduction to Networking - Networking Academy](https://www.netacad.com/cisco-packet-tracer)\r\n* Usas Packet Tracer para simular redes.\r\n3. [Practical Networking](https://www.practicalnetworking.net)\r\n* Lecturas claras sobre temas esenciales como ARP, TCP handshake, subnetting.\r\n\r\n### 📖 Lecturas\r\n**Libro**: \"Computer Networking: A Top-Down Approach\" – Kurose & Ross (básico para profundizar conceptos OSI/TCP-IP).\r\n\r\n### 🛠️ Práctica\r\n1. [Wireshark](https://www.wireshark.org)\r\n* Captura y analiza tráfico real de tu red.\r\n2. [TryHackMe Room - Intro to Networking](https://tryhackme.com/room/introtonetworking)\r\n* Gratuito e interactivo. Perfecto si prefieres práctica directa.\r\n\r\n## ✅ Qué deberías lograr al terminar esta fase\r\n* Entender y explicar el modelo OSI y los principales protocolos.\r\n* Analizar tráfico con Wireshark.\r\n* Hacer subnetting manualmente.\r\n* Detectar puertos abiertos con nmap y saber qué significan.\r\n* Leer una captura .pcap y entender lo que ocurre en la red.","src/content/blog/redes-protocolos/index.mdx","f5eda191750b0bef","redes-protocolos/index.mdx","internet/que-es-http",{"id":581,"data":583,"body":587,"filePath":588,"digest":589,"legacyId":590,"deferredRender":25},{"rutas":584,"title":539,"description":16,"lang":17,"dir":18,"pubDate":585,"updatedDate":586},[15],["Date","2023-12-21T07:00:00.000Z"],["Date","2023-12-21T07:00:00.000Z"],"import Subtitles from '@Components/signals/Subtitles.astro'\r\n\r\n## Recursos\r\n\r\n* [¿Qué es HTTP? - Cloudflare](https://www.cloudflare.com/es-es/learning/ddos/glossary/hypertext-transfer-protocol-http/)\r\n* [Generalidades del protocolo HTTP](https://developer.mozilla.org/es/docs/Web/HTTP/Overview)\r\n\r\n## Videos\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6HJAWFenYx8?si=F9pxaZ0N5Obl613P\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nymxjNQ_qW0?si=-pm6yv4mHODxpTzV\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003CSubtitles />\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2JYT5f2isg4?si=taUbAyp9E7HfaqQZ&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/a-sBfyiXysI?si=Z6IIIiIhJdbWMS4Z&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iYM2zFP3Zn0?si=VKI5oOUDq0FE0s-X&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/j9QmMEWmcfo?si=YrK5nGFnzQ20XUzI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Todo lo que necesitas saber sobre HTTP\r\n\r\n> [Recurso Original](https://cs.fyi/guide/http-in-depth) (Version - Febrero 16, 2021)\r\n\r\nHTTP es el protocolo que todo desarrollador web debería conocer, ya que impulsa todo internet. Conocer HTTP puede ayudarte sin duda a desarrollar aplicaciones mejores.\r\n\r\nEn este artículo, hablaré sobre qué es HTTP, cómo llegó a existir, dónde se encuentra hoy y cómo llegamos aquí.\r\n\r\n#### ¿Qué es HTTP?\r\n\r\nPrimero lo primero, ¿qué es HTTP? HTTP es un protocolo de comunicación de la capa de aplicación basado en TCP/IP que estandariza cómo los clientes y los servidores se comunican entre sí. Define cómo se solicita y transmite el contenido a través de internet. Al referirme a un protocolo de capa de aplicación, quiero decir que es simplemente una capa de abstracción que estandariza cómo se comunican los hosts (clientes y servidores). HTTP en sí depende de TCP/IP para enviar solicitudes y respuestas entre el cliente y el servidor. Por defecto, se utiliza el puerto TCP 80, pero también se pueden utilizar otros puertos. HTTPS, sin embargo, utiliza el puerto 443.\r\n\r\n#### HTTP/0.9 - The One Liner (1991)\r\n\r\nLa primera versión documentada de HTTP fue HTTP/0.9, presentada en 1991. Era el protocolo más simple hasta el momento, con un único método llamado GET. Si un cliente quería acceder a alguna página web en el servidor, haría una solicitud simple como la siguiente:\r\n\r\n```\r\n\r\nGET /index.html\r\n\r\n```\r\n\r\nY la respuesta del servidor habría sido la siguiente\r\n\r\n```\r\n\r\n(response body)\r\n(connection closed)\r\n\r\n```\r\n\r\nEs decir, el servidor recibiría la solicitud, respondería con el HTML correspondiente y, tan pronto como se transfiriera el contenido, la conexión se cerraría. No había:\r\n\r\n* Encabezados\r\n* GET era el único método permitido\r\n* La respuesta debía ser HTML\r\n\r\nComo puedes ver, el protocolo realmente no tenía más que ser un paso inicial para lo que estaba por venir.\r\n\r\n#### HTTP/1.0 - 1996\r\n\r\nEn 1996, la siguiente versión de HTTP, es decir, HTTP/1.0, evolucionó y mejoró significativamente con respecto a la versión original.\r\n\r\nA diferencia de HTTP/0.9, que solo estaba diseñado para respuestas HTML, HTTP/1.0 podía manejar otros formatos de respuesta, como imágenes, archivos de video, texto sin formato o cualquier otro tipo de contenido. Se agregaron más métodos (POST y HEAD), los formatos de solicitud/respuesta se modificaron, se agregaron encabezados HTTP tanto a las solicitudes como a las respuestas, se agregaron códigos de estado para identificar la respuesta, se introdujo el soporte para conjuntos de caracteres, tipos multipartes, autorización, almacenamiento en caché, codificación de contenido y más.\r\n\r\nAsí es como podría haber sido una solicitud y una respuesta de muestra en HTTP/1.0:\r\n\r\n```\r\n\r\nGET / HTTP/1.0\r\nHost: cs.fyi\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\r\nAccept: */*\r\n\r\n```\r\n\r\nComo puedes ver, junto con la solicitud, el cliente también ha enviado su información personal, el tipo de respuesta requerido, etc. Mientras que en HTTP/0.9 el cliente nunca podría enviar esa información porque no había encabezados.\r\n\r\nUn ejemplo de respuesta a la solicitud anterior podría haber sido el siguiente:\r\n\r\n```http\r\n\r\nHTTP/1.0 200 OK \r\nContent-Type: text/plain\r\nContent-Length: 137582\r\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\r\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\r\nServer: Apache 0.84\r\n\r\n(response body)\r\n(connection closed)\r\n\r\n```\r\n\r\nEn el comienzo de la respuesta, se encuentra HTTP/1.0 (HTTP seguido del número de versión), luego está el código de estado 200 seguido de la frase de motivo (o descripción del código de estado, si lo prefieres).\r\n\r\nEn esta versión más reciente, las cabeceras de solicitud y respuesta todavía se mantenían como codificadas en ASCII, pero el cuerpo de la respuesta podía ser de cualquier tipo, como imagen, video, HTML, texto sin formato o cualquier otro tipo de contenido. Así que ahora que el servidor podía enviar cualquier tipo de contenido al cliente, no pasó mucho tiempo después de la introducción antes de que el término \"Hyper Text\" en HTTP se convirtiera en un nombre equivocado. HMTP o Protocolo de transferencia de hipermedios podría haber tenido más sentido, pero supongo que nos quedaremos con el nombre de por vida.\r\n\r\nUna de las principales desventajas de HTTP/1.0 fue que no se podían realizar múltiples solicitudes por conexión. Es decir, cada vez que un cliente necesitaba algo del servidor, tenía que abrir una nueva conexión TCP y después de que se había cumplido una sola solicitud, la conexión se cerraba. Y para cualquier requisito siguiente, tenía que ser en una nueva conexión. ¿Por qué es malo? Bueno, supongamos que visitas una página web que tiene 10 imágenes, 5 hojas de estilo y 5 archivos JavaScript, en total 20 elementos que deben recuperarse cuando se realiza la solicitud a esa página web. Dado que el servidor cierra la conexión tan pronto como se ha cumplido la solicitud, habrá una serie de 20 conexiones separadas donde cada uno de los elementos se servirá uno por uno en sus conexiones separadas. Este gran número de conexiones resulta en una seria pérdida de rendimiento, ya que requerir una nueva conexión TCP impone una penalización de rendimiento significativa debido al three-way Handshake seguido de un inicio lento.\r\n\r\n#### Three-way Handshake\r\n\r\nThree-way Handshake, en su forma más simple, implica que todas las conexiones TCP comienzan con un three-way Handshake en el que el cliente y el servidor comparten una serie de paquetes antes de comenzar a compartir los datos de la aplicación.\r\n\r\n* SYN - El cliente elige un número al azar, digamos x, y lo envía al servidor.\r\n* SYN ACK - El servidor reconoce la solicitud enviando un paquete ACK de vuelta al cliente, que está compuesto por un número al azar, digamos y, seleccionado por el servidor y el número x+1, donde x es el número que envió el cliente.\r\n* ACK - El cliente incrementa el número y recibido del servidor y envía un paquete ACK de vuelta con el número y+1.\r\n\r\nUna vez completado el three-way Handshake, el intercambio de datos entre el cliente y el servidor puede comenzar. Cabe destacar que el cliente puede comenzar a enviar los datos de la aplicación tan pronto como despacha el último paquete ACK, pero el servidor aún tendrá que esperar a que se reciba el paquete ACK para cumplir con la solicitud.\r\n\r\n![Three-way Handshake](https://i.imgur.com/ohZthqB.png)\r\n\r\nNo obstante, algunas implementaciones de HTTP/1.0 intentaron superar este problema mediante la introducción de un nuevo encabezado llamado Connection: keep-alive, que pretendía decirle al servidor: \"Oye, servidor, no cierres esta conexión, la necesitaré de nuevo\". Sin embargo, aún no fue tan ampliamente compatible y el problema persistió.\r\n\r\nAdemás de ser sin conexión, HTTP también es un protocolo sin estado, es decir, el servidor no mantiene información sobre el cliente y, por lo tanto, cada una de las solicitudes debe contener la información necesaria para que el servidor pueda cumplir la solicitud por sí mismo, sin ninguna asociación con solicitudes antiguas. Y así, esto agrega combustible al fuego, es decir, además del gran número de conexiones que el cliente tiene que abrir, también tiene que enviar algunos datos redundantes en la red, lo que provoca un mayor uso del ancho de banda.\r\n\r\n#### HTTP/1.1 - 1997\r\n\r\nDespués de apenas 3 años de HTTP/1.0, se lanzó la siguiente versión, es decir, HTTP/1.1 en 1999; que hizo muchas mejoras sobre su predecesor. Las principales mejoras sobre HTTP/1.0 incluyeron:\r\n\r\n* Se agregaron nuevos métodos HTTP, lo que introdujo PUT, PATCH, OPTIONS, DELETE.\r\n* **Identificación del nombre del host:** En HTTP/1.0, el encabezado Host no era obligatorio, pero HTTP/1.1 lo hizo obligatorio.\r\n* **Conexiones persistentes:** Como se discutió anteriormente, en HTTP/1.0 solo había una solicitud por conexión y la conexión se cerraba tan pronto como se cumplía la solicitud, lo que resultaba en un gran impacto en el rendimiento y problemas de latencia. HTTP/1.1 introdujo las conexiones persistentes, es decir, las conexiones no se cerraban de forma predeterminada y se mantenían abiertas, lo que permitía múltiples solicitudes secuenciales. Para cerrar las conexiones, debía estar disponible el encabezado Connection: close en la solicitud. Los clientes suelen enviar este encabezado en la última solicitud para cerrar la conexión de manera segura.\r\n* **Pipelining:** También introdujo el soporte para el pipelining, donde el cliente podía enviar múltiples solicitudes al servidor sin esperar la respuesta del servidor en la misma conexión, y el servidor debía enviar la respuesta en la misma secuencia en la que se recibieron las solicitudes. Pero, ¿cómo sabe el cliente que este es el punto donde se completa la descarga de la primera respuesta y comienza el contenido de la siguiente respuesta, podrías preguntar? Bueno, para resolver esto, debe haber un encabezado Content-Length presente que los clientes pueden usar para identificar dónde termina la respuesta y pueden comenzar a esperar la siguiente respuesta.\r\n\r\n> Cabe señalar que, para beneficiarse de las conexiones persistentes o el pipelining, el encabezado Content-Length debe estar disponible en la respuesta, porque esto permitiría al cliente saber cuándo se completa la transmisión y puede enviar la siguiente solicitud (en la forma secuencial normal de enviar solicitudes) o comenzar a esperar la siguiente respuesta (cuando el pipelining está habilitado). \\\r\n> \\\r\n> Pero aún había un problema con este enfoque. Y es, ¿qué pasa si los datos son dinámicos y el servidor no puede encontrar la longitud del contenido de antemano? Bueno, en ese caso, ¡realmente no puedes beneficiarte de las conexiones persistentes, verdad?! Para resolver esto, HTTP/1.1 introdujo la codificación por bloques. En tales casos, el servidor puede omitir Content-Length a favor de la codificación por bloques (más sobre esto en un momento). Sin embargo, si ninguno de ellos está disponible, entonces la conexión debe cerrarse al final de la solicitud.\r\n\r\n* Transferencias por bloques: En el caso de contenido dinámico, cuando el servidor no puede determinar realmente la longitud del contenido cuando comienza la transmisión, puede comenzar a enviar el contenido en trozos (bloque por bloque) y agregar la longitud del contenido para cada bloque cuando se envía. Y cuando se envían todos los bloques, es decir, se ha completado toda la transmisión, envía un bloque vacío, es decir, aquel con Content-Length configurado a cero para identificar al cliente que la transmisión ha finalizado. Para notificar al cliente sobre la transferencia por bloques, el servidor incluye el encabezado Transfer-Encoding: chunked.\r\n* A diferencia de HTTP/1.0, que solo tenía autenticación básica, HTTP/1.1 incluyó autenticación de resumen y autenticación de proxy.\r\n* Caché\r\n* Rangos de bytes\r\n* Juegos de caracteres\r\n* Negociación de lenguaje\r\n* Cookies del cliente\r\n* Soporte mejorado para compresión\r\n* Nuevos códigos de estado\r\n* ... y más\r\n\r\nNo voy a profundizar en todas las características de HTTP/1.1 en esta publicación, ya que es un tema en sí mismo y ya se puede encontrar mucha información al respecto. Un documento que recomendaría leer es \"Diferencias clave entre HTTP/1.0 y HTTP/1.1\" y aquí está el enlace al RFC original para los más destacados.\r\n\r\nHTTP/1.1 se introdujo en 1999 y fue un estándar durante muchos años. Aunque mejoró mucho respecto a su predecesor, con la web cambiando todos los días, empezó a mostrar su edad. Cargar una página web en estos días es más intensivo en recursos que nunca. Una página web simple en estos días tiene que abrir más de 30 conexiones. Bueno, HTTP/1.1 tiene conexiones persistentes, entonces ¿por qué tantas conexiones? podrías preguntar. La razón es que, en HTTP/1.1, solo puede tener una conexión pendiente en cualquier momento. HTTP/1.1 intentó solucionar esto introduciendo la canalización, pero no abordó completamente el problema debido al bloqueo de cabecera de línea, donde una solicitud lenta o pesada puede bloquear las solicitudes detrás y una vez que una solicitud queda atascada en una canalización, tendrá que esperar a que se cumplan las próximas solicitudes. Para superar estas deficiencias de HTTP/1.1, los desarrolladores comenzaron a implementar soluciones, como el uso de hojas de sprites, imágenes codificadas en CSS, archivos CSS/JavaScript únicos enormes, fragmentación de dominios, etc.\r\n\r\n#### SPDY - 2009\r\n\r\nGoogle decidió experimentar con protocolos alternativos para hacer que la web fuera más rápida, mejorar la seguridad web y reducir la latencia de las páginas web. En 2009, anunciaron SPDY.\r\n\r\n> SPDY es una marca registrada de Google y no es un acrónimo.\r\n\r\nSe observó que si seguimos aumentando el ancho de banda, el rendimiento de la red aumenta al principio, pero llega un punto en el que no hay mucho aumento de rendimiento. Pero si hacemos lo mismo con la latencia, es decir, si seguimos reduciendo la latencia, hay un aumento constante de rendimiento. Esta fue la idea central detrás de la ganancia de rendimiento de SPDY: disminuir la latencia para aumentar el rendimiento de la red.\r\n\r\n> Para aquellos que no conocen la diferencia, la latencia es la demora, es decir, cuánto tiempo tarda en viajar los datos entre la fuente y el destino (medido en milisegundos) y el ancho de banda es la cantidad de datos transferidos por segundo (bits por segundo).\r\n\r\nLas características de SPDY incluyeron multiplexación, compresión, priorización, seguridad, etc. No voy a entrar en los detalles de SPDY, ya que obtendrás la idea cuando nos adentremos en los detalles de HTTP/2 en la próxima sección, ya que dije que HTTP/2 está en gran medida inspirado en SPDY.\r\n\r\nSPDY realmente no intentó reemplazar a HTTP; era una capa de traducción sobre HTTP que existía en la capa de aplicación y modificaba la solicitud antes de enviarla por el cable. Comenzó a convertirse en un estándar de facto y la mayoría de los navegadores comenzaron a implementarlo.\r\n\r\nEn 2015, en Google, no querían tener dos estándares en competencia, así que decidieron fusionarlo con HTTP, dando lugar a HTTP/2 y degradando SPDY.\r\n\r\n#### HTTP/2 - 2015\r\n\r\nHasta ahora, debes estar convencido de por qué necesitábamos otra revisión del protocolo HTTP. HTTP/2 fue diseñado para el transporte de contenido de baja latencia. Las principales características o diferencias con la antigua versión de HTTP/1.1 incluyen:\r\n\r\n* Binario en lugar de textual\r\n* Multiplexación: múltiples solicitudes HTTP asíncronas sobre una sola conexión\r\n* Compresión de encabezados mediante HPACK\r\n* Server Push: múltiples respuestas para una sola solicitud\r\n* Priorización de solicitudes\r\n* Seguridad\r\n\r\n![HTTP/2](https://i.imgur.com/X1BT5eX.png)\r\n\r\n#### 1. Protocolo binario\r\n\r\nHTTP/2 aborda el problema de la mayor latencia que existía en HTTP/1.x al convertirlo en un protocolo binario. Al ser un protocolo binario, es más fácil de analizar, pero a diferencia de HTTP/1.x, ya no es legible por el ojo humano. Los principales elementos de construcción de HTTP/2 son los Marcos y los Flujos.\r\n\r\n**Marcos y Flujos**\r\n\r\nLos mensajes de HTTP/2 ahora están compuestos por uno o más marcos. Hay un marco HEADERS para los metadatos y un marco DATA para la carga útil, y existen varios tipos de marcos (HEADERS, DATA, RST_STREAM, SETTINGS, PRIORITY, etc.) que puedes consultar a través de las [especificaciones de HTTP/2](https://http2.github.io/http2-spec/#FrameTypes).\r\n\r\nCada solicitud y respuesta de HTTP/2 recibe un ID de flujo único y se divide en marcos. Los marcos no son más que fragmentos binarios de datos. Una colección de marcos se llama Flujos. Cada marco tiene un ID de flujo que identifica el flujo al que pertenece, y cada marco tiene un encabezado común. Además, aparte de que el ID de flujo sea único, vale la pena mencionar que cualquier solicitud iniciada por el cliente usa números impares y la respuesta del servidor tiene números pares de ID de flujo.\r\n\r\nAparte de los HEADERS y DATA, otro tipo de marco que creo que vale la pena mencionar aquí es RST_STREAM, que es un tipo de marco especial que se utiliza para abortar algún flujo, es decir, el cliente puede enviar este marco para hacer saber al servidor que ya no necesita este flujo. En HTTP/1.1, la única forma de hacer que el servidor dejara de enviar la respuesta al cliente era cerrar la conexión, lo que resultaba en un aumento de la latencia porque se tenía que abrir una nueva conexión para cualquier solicitud consecutiva. Mientras que en HTTP/2, el cliente puede usar RST_STREAM y dejar de recibir un flujo específico mientras la conexión seguirá abierta y los otros flujos seguirán en juego.\r\n\r\n#### 2. Multiplexación\r\n\r\nYa que HTTP/2 es ahora un protocolo binario y, como mencioné anteriormente, utiliza marcos y flujos para las solicitudes y respuestas, una vez que se abre una conexión TCP, todos los flujos se envían de forma asíncrona a través de la misma conexión sin abrir conexiones adicionales. Y a su vez, el servidor responde de la misma manera asíncrona, es decir, la respuesta no tiene un orden y el cliente utiliza el ID de flujo asignado para identificar a qué flujo pertenece un paquete específico. Esto también resuelve el problema de bloqueo de la línea principal que existía en HTTP/1.x, es decir, el cliente no tendrá que esperar la solicitud que está tardando y otras solicitudes seguirán procesándose.\r\n\r\n#### 3. Compresión de encabezados\r\n\r\nFormó parte de un RFC separado que se centraba específicamente en optimizar las cabeceras enviadas. La esencia de esto es que cuando estamos accediendo constantemente al servidor desde un mismo cliente, hay muchos datos redundantes que estamos enviando en las cabeceras una y otra vez, y a veces puede haber cookies que aumentan el tamaño de las cabeceras, lo que resulta en el uso del ancho de banda y un aumento de la latencia. Para superar esto, HTTP/2 introdujo la compresión de cabeceras.\r\n\r\nA diferencia de las solicitudes y respuestas, las cabeceras no se comprimen en formatos como gzip o compress, sino que hay un mecanismo diferente para la compresión de cabeceras que consiste en que los valores literales se codifican utilizando un código Huffman y se mantiene una tabla de cabeceras tanto en el cliente como en el servidor. Ambos omiten cualquier cabecera repetitiva (por ejemplo, el agente de usuario, etc.) en las solicitudes subsiguientes y las referencia utilizando la tabla de cabeceras mantenida por ambos.\r\n\r\nMientras hablamos de cabeceras, permíteme agregar aquí que las cabeceras siguen siendo las mismas que en HTTP/1.1, excepto por la adición de algunas pseudo-cabeceras, es decir, `:method`, `:scheme`, `:host` y `:path`.\r\n\r\n#### 4. Server Push\r\n\r\nEl server push es otra característica tremenda de HTTP/2 donde el servidor, sabiendo que el cliente va a solicitar un cierto recurso, puede enviarlo al cliente sin que este lo haya solicitado. Por ejemplo, supongamos que un navegador carga una página web, analiza toda la página para averiguar el contenido remoto que tiene que cargar desde el servidor y luego envía solicitudes consecuentes al servidor para obtener ese contenido.\r\n\r\nServer push permite al servidor disminuir los tiempos de ida y vuelta al enviar los datos que sabe que el cliente va a demandar. Cómo se hace esto es que el servidor envía un marco especial llamado PUSH_PROMISE notificando al cliente que, \"¡Eh, estoy a punto de enviar este recurso a usted! No me lo pida\". El marco PUSH_PROMISE está asociado con el flujo que provocó que se realizara el envío y contiene el ID de flujo prometido, es decir, el flujo en el que el servidor enviará el recurso a ser empujado.\r\n\r\n#### 5. Priorización de solicitudes\r\n\r\nUn cliente puede asignar prioridad a un flujo incluyendo la información de priorización en el marco HEADERS mediante el cual se abre un flujo. En cualquier otro momento, el cliente puede enviar un marco PRIORITY para cambiar la prioridad de un flujo.\r\n\r\nSin información de prioridad, el servidor procesa las solicitudes de manera asíncrona, es decir, sin ningún orden. Si se asigna prioridad a un flujo, entonces, según esta información de priorización, el servidor decide cuántos recursos se deben dar para procesar qué solicitud.\r\n\r\n#### 6. Seguridad\r\n\r\nHubo una extensa discusión sobre si la seguridad (a través de TLS) debería hacerse obligatoria para HTTP/2 o no. Al final, se decidió no hacerlo obligatorio. Sin embargo, la mayoría de los proveedores afirmaron que solo admitirían HTTP/2 cuando se usara sobre TLS. Entonces, aunque HTTP/2 no requiere cifrado según las especificaciones, de alguna manera se ha vuelto obligatorio por defecto de todos modos. Con eso fuera del camino, HTTP/2, cuando se implementa sobre TLS, impone algunos requisitos, es decir, se debe utilizar TLS versión 1.2 o superior, debe haber un cierto nivel de tamaños mínimos de clave, se requieren claves efímeras, etc.","src/content/blog/internet/que-es-http.mdx","97d241e77f449fd8","internet/que-es-http.mdx","internet/como-funciona-internet",{"id":591,"data":593,"body":598,"filePath":599,"digest":600,"legacyId":601,"deferredRender":25},{"rutas":594,"title":595,"description":16,"lang":17,"dir":18,"pubDate":596,"updatedDate":597},[15],"¿Cómo funciona internet?",["Date","2023-12-20T07:00:00.000Z"],["Date","2023-12-20T07:00:00.000Z"],"import Subtitles from '@Components/signals/Subtitles.astro'\r\nimport Recommend from '@Components/signals/Recommend.astro'\r\n\r\n## ¿Cómo funciona internet? Videos\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rw41W8crZ_Y?si=elzvFWzW8ay5DoZP&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003CSubtitles />\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7_LPdttKXPc?cc_load_policy=1&cc_lang_pref=es&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zN8YNNHcaZc?si=jN-L_AUL52EpvzQo&cc_lang_pref=es&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## ¿Cómo funciona internet? - 1\r\n> [Recurso Original](https://cs.fyi/guide/how-does-internet-work) (Version - Febrero 16, 2023)\r\n\r\nComo desarrollador, es importante tener un sólido entendimiento de qué es internet y cómo funciona. Es la base sobre la cual se construyen la mayoría de las aplicaciones de software modernas. Para desarrollar aplicaciones y servicios efectivos, seguros y escalables, necesitas comprender bien cómo funciona internet y cómo aprovechar su potencia y conectividad.\r\n\r\nEn este artículo, cubriremos los conceptos básicos de internet, incluyendo qué es y cómo funciona, algunos conceptos y terminología básicos, así como algunos protocolos comunes que se utilizan para construir aplicaciones y servicios en internet.\r\n\r\nTenemos mucho que cubrir, ¡así que empecemos!\r\n\r\n#### Introducción a Internet\r\nAntes de aprender qué es Internet, necesitamos entender qué es una red. Una red es un grupo de computadoras u otros dispositivos que están conectados entre sí. Por ejemplo, en tu hogar puedes tener una red de computadoras y dispositivos. Tu amigo que vive al lado puede tener una red similar de dispositivos. Su vecino puede tener una red similar de dispositivos. Todas estas redes, cuando están conectadas entre sí, forman internet.\r\n\r\n> Internet es una red de redes.\r\n\r\nInternet fue desarrollada a finales de la década de 1960 por el Departamento de Defensa de los Estados Unidos como un medio para crear una red de comunicación descentralizada que pudiera resistir un ataque nuclear. Con el tiempo, ha evolucionado hasta convertirse en una red compleja y sofisticada que abarca todo el mundo.\r\n\r\nHoy en día, Internet es una parte esencial de la vida moderna, utilizada por miles de millones de personas en todo el mundo para acceder a información, comunicarse con amigos y familiares, realizar negocios y mucho más. Como desarrollador, es esencial tener un sólido entendimiento de cómo funciona Internet y de las diversas tecnologías y protocolos que lo sustentan.\r\n\r\n#### Cómo funciona Internet: Una visión general\r\nA un nivel elevado, Internet funciona conectando dispositivos y sistemas informáticos mediante un conjunto de protocolos estandarizados. Estos protocolos definen cómo se intercambia la información entre dispositivos y aseguran que los datos se transmitan de manera confiable y segura.\r\n\r\nEl núcleo de Internet es una red global de routers interconectados, que son responsables de dirigir el tráfico entre diferentes dispositivos y sistemas. Cuando envías datos por Internet, estos se dividen en pequeños paquetes que se envían desde tu dispositivo a un router. El router examina el paquete y lo envía al siguiente router en la ruta hacia su destino. Este proceso continúa hasta que el paquete llega a su destino final.\r\n\r\nPara asegurar que los paquetes se envíen y reciban correctamente, Internet utiliza una variedad de protocolos, incluyendo el Protocolo de Internet (IP) y el Protocolo de Control de Transmisión (TCP). IP se encarga de dirigir los paquetes a su destino correcto, mientras que TCP asegura que los paquetes se transmitan de manera confiable y en el orden correcto.\r\n\r\nAdemás de estos protocolos centrales, existen una amplia gama de otras tecnologías y protocolos que se utilizan para habilitar la comunicación y el intercambio de datos a través de Internet, incluyendo el Sistema de Nombres de Dominio (DNS), el Protocolo de Transferencia de Hipertexto (HTTP) y el protocolo de Capa de Conexión Segura/Seguridad de la Capa de Transporte (SSL/TLS). Como desarrollador, es importante tener un sólido entendimiento de cómo estas diferentes tecnologías y protocolos trabajan juntos para habilitar la comunicación y el intercambio de datos a través de Internet.\r\n\r\n#### Conceptos básicos y terminología\r\nPara entender Internet, es importante estar familiarizado con algunos conceptos y términos básicos. Aquí tienes algunos términos clave y conceptos para tener en cuenta:\r\n\r\n* **Paquete**: Una pequeña unidad de datos que se transmite por Internet.\r\n* **Router**: Un dispositivo que dirige paquetes de datos entre diferentes redes.\r\n* **Dirección IP**: Un identificador único asignado a cada dispositivo en una red, utilizado para dirigir datos al destino correcto.\r\n* **Nombre de Dominio**: Un nombre legible por humanos que se utiliza para identificar un sitio web, como google.com.\r\n* **DNS**: El Sistema de Nombres de Dominio se encarga de traducir nombres de dominio en direcciones IP.\r\n* **HTTP**: El Protocolo de Transferencia de Hipertexto se utiliza para transferir datos entre un cliente (como un navegador web) y un servidor (como un sitio web).\r\n* **HTTPS**: Una versión encriptada de HTTP que se utiliza para proporcionar comunicación segura entre un cliente y un servidor.\r\n* **SSL/TLS**: Los protocolos de Capa de Conexión Segura y Seguridad de la Capa de Transporte se utilizan para proporcionar comunicación segura por Internet.\r\n\r\nComprender estos conceptos y términos básicos es esencial para trabajar con Internet y desarrollar aplicaciones y servicios basados en la red.\r\n\r\n#### El papel de los protocolos en Internet\r\nLos protocolos juegan un papel crítico al facilitar la comunicación y el intercambio de datos a través de Internet. Un protocolo es un conjunto de reglas y normas que definen cómo se intercambia la información entre dispositivos y sistemas.\r\n\r\nExisten muchos protocolos diferentes utilizados en la comunicación por Internet, incluyendo el Protocolo de Internet (IP), el Protocolo de Control de Transmisión (TCP), el Protocolo de Datagramas de Usuario (UDP), el Sistema de Nombres de Dominio (DNS) y muchos otros.\r\n\r\nIP se encarga de dirigir paquetes de datos a su destino correcto, mientras que TCP y UDP aseguran que los paquetes se transmitan de manera confiable y eficiente. DNS se utiliza para traducir nombres de dominio en direcciones IP, y HTTP se utiliza para transferir datos entre clientes y servidores.\r\n\r\nUno de los principales beneficios de utilizar protocolos estandarizados es que permiten que dispositivos y sistemas de diferentes fabricantes y proveedores se comuniquen entre sí de manera fluida. Por ejemplo, un navegador web desarrollado por una empresa puede comunicarse con un servidor web desarrollado por otra empresa, siempre y cuando ambos se adhieran al protocolo HTTP.\r\n\r\nComo desarrollador, es importante entender los diversos protocolos utilizados en la comunicación por Internet y cómo trabajan juntos para permitir la transferencia de datos e información a través de la red.\r\n\r\n#### Comprensión de las direcciones IP y los nombres de dominio\r\nLas direcciones IP y los nombres de dominio son conceptos importantes para entender al trabajar con Internet.\r\n\r\nUna dirección IP es un identificador único asignado a cada dispositivo en una red. Se utiliza para dirigir datos al destino correcto, asegurando que la información se envíe al destinatario previsto. Las direcciones IP suelen representarse como una serie de cuatro números separados por puntos, como \"192.168.1.1\".\r\n\r\nPor otro lado, los nombres de dominio son nombres legibles por humanos utilizados para identificar sitios web y otros recursos en Internet. Típicamente, están compuestos por dos o más partes separadas por puntos. Por ejemplo, \"google.com\" es un nombre de dominio. Los nombres de dominio se traducen a direcciones IP mediante el Sistema de Nombres de Dominio (DNS).\r\n\r\nDNS es una parte crítica de la infraestructura de Internet y es responsable de traducir nombres de dominio en direcciones IP. Cuando ingresas un nombre de dominio en tu navegador web, tu computadora envía una consulta DNS a un servidor DNS, que devuelve la dirección IP correspondiente. Luego, tu computadora utiliza esa dirección IP para conectarse al sitio web u otro recurso que hayas solicitado.\r\n\r\n#### Introducción a HTTP y HTTPS\r\nHTTP (Protocolo de Transferencia de Hipertexto) y HTTPS (HTTP Seguro) son dos de los protocolos más comúnmente utilizados en aplicaciones y servicios basados en Internet.\r\n\r\nHTTP es el protocolo utilizado para transferir datos entre un cliente (como un navegador web) y un servidor (como un sitio web). Cuando visitas un sitio web, tu navegador web envía una solicitud HTTP al servidor, solicitando la página web u otro recurso que hayas pedido. El servidor luego envía una respuesta HTTP al cliente, que contiene los datos solicitados.\r\n\r\nHTTPS es una versión más segura de HTTP que cifra los datos transmitidos entre el cliente y el servidor mediante cifrado SSL/TLS (Capa de Conexión Segura/Seguridad de la Capa de Transporte). Esto proporciona una capa adicional de seguridad, ayudando a proteger información sensible como credenciales de inicio de sesión, información de pago y otros datos personales.\r\n\r\nCuando visitas un sitio web que utiliza HTTPS, tu navegador web mostrará un ícono de candado en la barra de direcciones, indicando que la conexión es segura. También es posible que veas las letras \"https\" al principio de la dirección del sitio web en lugar de \"http\".\r\n\r\n#### Construcción de aplicaciones con TCP/IP\r\nTCP/IP (Protocolo de Control de Transmisión/Protocolo de Internet) es el protocolo de comunicación subyacente utilizado por la mayoría de las aplicaciones y servicios basados en Internet. Proporciona una entrega de datos confiable, ordenada y verificada contra errores entre aplicaciones que se ejecutan en dispositivos diferentes.\r\n\r\nAl construir aplicaciones con TCP/IP, hay algunos conceptos clave para entender:\r\n\r\n* **Puertos**: Los puertos se utilizan para identificar la aplicación o servicio en ejecución en un dispositivo. A cada aplicación o servicio se le asigna un número de puerto único, lo que permite enviar datos al destino correcto.\r\n* **Sockets**: Un socket es una combinación de una dirección IP y un número de puerto, que representa un punto final específico para la comunicación. Los sockets se utilizan para establecer conexiones entre dispositivos y transferir datos entre aplicaciones.\r\n* **Conexiones**: Una conexión se establece entre dos sockets cuando dos dispositivos desean comunicarse entre sí. Durante el proceso de establecimiento de la conexión, los dispositivos negocian varios parámetros, como el tamaño máximo del segmento y el tamaño de la ventana, que determinan cómo se transmitirán los datos sobre la conexión.\r\n* **Transferencia de datos**: Una vez que se establece una conexión, los datos pueden transferirse entre las aplicaciones que se ejecutan en cada dispositivo. Los datos se transmiten típicamente en segmentos, y cada segmento contiene un número de secuencia y otros metadatos para garantizar una entrega confiable.\r\n\r\nAl construir aplicaciones con TCP/IP, es necesario asegurarse de que la aplicación esté diseñada para funcionar con los puertos, sockets y conexiones apropiados. También es importante estar familiarizado con los diversos protocolos y estándares que se utilizan comúnmente con TCP/IP, como HTTP, FTP (Protocolo de Transferencia de Archivos) y SMTP (Protocolo Simple de Transferencia de Correo). Comprender estos conceptos y protocolos es esencial para construir aplicaciones y servicios efectivos, escalables y seguros basados en Internet.\r\n\r\n#### Seguridad en la comunicación por internet con SSL/TLS\r\nComo discutimos anteriormente, SSL/TLS es un protocolo utilizado para cifrar datos que se transmiten por Internet. Se utiliza comúnmente para proporcionar conexiones seguras para aplicaciones como navegadores web, clientes de correo electrónico y programas de transferencia de archivos.\r\n\r\nCuando se utiliza SSL/TLS para asegurar la comunicación por Internet, hay algunos conceptos clave que entender:\r\n\r\n* **Certificados**: Los certificados SSL/TLS se utilizan para establecer confianza entre el cliente y el servidor. Contienen información sobre la identidad del servidor y están firmados por una entidad de confianza (una Autoridad de Certificación) para verificar su autenticidad.\r\n\r\n* **Handshake**: Durante el proceso de saludo de SSL/TLS, el cliente y el servidor intercambian información para negociar el algoritmo de cifrado y otros parámetros para la conexión segura.\r\n\r\n* **Cifrado**: Una vez que se establece la conexión segura, los datos se cifran mediante el algoritmo acordado y se pueden transmitir de manera segura entre el cliente y el servidor.\r\n\r\nAl construir aplicaciones y servicios basados en Internet, es importante entender cómo funciona SSL/TLS y asegurarse de que tu aplicación esté diseñada para utilizar SSL/TLS al transmitir datos sensibles como credenciales de inicio de sesión, información de pago y otros datos personales. También deberás asegurarte de obtener y mantener certificados SSL/TLS válidos para tus servidores, y seguir las mejores prácticas para configurar y asegurar tus conexiones SSL/TLS. Al hacerlo, puedes contribuir a proteger los datos de tus usuarios y garantizar la integridad y confidencialidad de la comunicación de tu aplicación por Internet.\r\n\r\n#### El futuro: Tendencias y tecnologías emergentes\r\nLa internet está en constante evolución, y continuamente surgen nuevas tecnologías y tendencias. Como desarrollador, es importante mantenerse actualizado con los últimos avances para construir aplicaciones y servicios innovadores y efectivos.\r\n\r\nAquí hay algunas de las tendencias y tecnologías emergentes que están dando forma al futuro de Internet:\r\n\r\n* **5G**: 5G es la última generación de tecnología de redes móviles, que ofrece velocidades más rápidas, menor latencia y mayor capacidad que las generaciones anteriores. Se espera que permita nuevos casos de uso y aplicaciones, como vehículos autónomos y cirugías remotas.\r\n\r\n* **Internet de las cosas (IoT)**: IoT se refiere a la red de dispositivos físicos, vehículos, electrodomésticos y otros objetos que están conectados a Internet y pueden intercambiar datos. A medida que IoT continúa creciendo, se espera que revolucione industrias como la salud, el transporte y la manufactura.\r\n\r\n* **Inteligencia Artificial (IA)**: Tecnologías de IA como el aprendizaje automático y el procesamiento del lenguaje natural ya se están utilizando para impulsar una amplia gama de aplicaciones y servicios, desde asistentes de voz hasta detección de fraudes. A medida que la IA avanza, se espera que permita nuevos casos de uso y transforme industrias como la salud, las finanzas y la educación.\r\n\r\n* **Blockchain**: Blockchain es una tecnología de libro de contabilidad distribuido que permite transacciones seguras y descentralizadas. Se está utilizando para alimentar una amplia variedad de aplicaciones, desde criptomonedas hasta la gestión de la cadena de suministro.\r\n\r\n* **Edge computing**: La computación en el borde se refiere al procesamiento y almacenamiento de datos en el borde de la red, en lugar de en centros de datos centralizados. Se espera que permita nuevos casos de uso y aplicaciones, como análisis en tiempo real y aplicaciones de baja latencia.\r\n\r\nManteniéndote al día con estas y otras tendencias y tecnologías emergentes, puedes asegurarte de que tus aplicaciones y servicios estén diseñados para aprovechar las últimas capacidades y ofrecer la mejor experiencia posible para tus usuarios.\r\n\r\n#### Conclusión\r\nY así llegamos al final de este artículo. Hemos cubierto mucho terreno, así que tomémonos un momento para revisar lo que hemos aprendido:\r\n\r\n* Internet es una red global de computadoras interconectadas que utiliza un conjunto estándar de protocolos de comunicación para intercambiar datos.\r\n* Internet funciona conectando dispositivos y sistemas informáticos mediante protocolos estandarizados, como IP y TCP.\r\n* El núcleo de Internet es una red global de routers interconectados que dirigen el tráfico entre diferentes dispositivos y sistemas.\r\n* Conceptos y terminología básicos con los que necesitas familiarizarte incluyen paquetes, routers, direcciones IP, nombres de dominio, DNS, HTTP, HTTPS y SSL/TLS.\r\n* Los protocolos juegan un papel crítico al facilitar la comunicación y el intercambio de datos por Internet, permitiendo que dispositivos y sistemas de diferentes fabricantes y proveedores se comuniquen sin problemas.\r\n\r\nEspero que hayas encontrado útil este artículo. Si tienes alguna pregunta o comentario, no dudes en dejarlos abajo. ¡Gracias por leer!\r\n\r\n## ¿Cómo funciona internet? - 2\r\n\r\n> [Recurso Original](http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm) (Version - 2002)\r\n\r\n#### Introducción\r\n¿Cómo funciona Internet? ¡Buena pregunta! El crecimiento de Internet se ha vuelto explosivo y parece imposible escapar del bombardeo de www.com que se ve constantemente en la televisión, se escucha en la radio y se ve en revistas. Debido a que Internet se ha convertido en una parte tan grande de nuestras vidas, se necesita una comprensión sólida para utilizar esta nueva herramienta de la manera más efectiva.\r\n\r\nEste documento técnico explica la infraestructura subyacente y las tecnologías que hacen que Internet funcione. No se adentra demasiado en profundidad, pero cubre lo suficiente de cada área para proporcionar una comprensión básica de los conceptos involucrados. Para cualquier pregunta sin respuesta, se proporciona una lista de recursos al final del documento. Se fomentan los comentarios, sugerencias, preguntas, etc., y pueden dirigirse al autor en rshuler@gobcg.com.\r\n\r\n#### ¿Por dónde empezar? Direcciones de Internet\r\nDebido a que Internet es una red global de computadoras, cada computadora conectada a Internet debe tener una dirección única. Las direcciones de Internet tienen la forma nnn.nnn.nnn.nnn, donde nnn debe ser un número de 0 a 255. Esta dirección se conoce como una dirección IP. (IP significa Protocolo de Internet; más sobre esto más adelante).\r\n\r\nLa imagen a continuación ilustra dos computadoras conectadas a Internet; su computadora con la dirección IP 1.2.3.4 y otra computadora con la dirección IP 5.6.7.8. Internet se representa como un objeto abstracto en medio. (A medida que avanza este documento, la parte de Internet del Diagrama 1 se explicará y redibujará varias veces a medida que se revelen los detalles de Internet.)\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif\" width=\"650\" alt=\"Diagrama 1\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 1\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nSi te conectas a Internet a través de un Proveedor de Servicios de Internet (ISP), generalmente se te asigna una dirección IP temporal durante la sesión de marcado. Si te conectas a Internet desde una red de área local (LAN), tu computadora puede tener una dirección IP permanente o puede obtener una temporal de un servidor DHCP (Protocolo de Configuración Dinámica de Host). En cualquier caso, si estás conectado a Internet, tu computadora tiene una dirección IP única.\r\n\r\n| ¡Compruébalo! - El programa Ping |\r\n| :--- |\r\n| Si estás utilizando Microsoft Windows o una versión de Unix y tienes una conexión a Internet, hay un programa útil para ver si una computadora en Internet está activa. Se llama ping, probablemente después del sonido emitido por los antiguos sistemas de sonar de submarinos.1 Si estás utilizando Windows, abre una ventana de símbolo del sistema. Si estás utilizando una versión de Unix, accede a un símbolo del sistema. Escribe ping www.yahoo.com. El programa ping enviará un 'ping' (en realidad, un mensaje de solicitud de eco ICMP (Protocolo de Mensajes de Control de Internet)) a la computadora nombrada. La computadora pingeada responderá con una respuesta. El programa ping contará el tiempo transcurrido hasta que llegue la respuesta (si es que llega). Además, si ingresas un nombre de dominio (es decir, www.yahoo.com) en lugar de una dirección IP, ping resolverá el nombre de dominio y mostrará la dirección IP de la computadora. Más sobre nombres de dominio y resolución de direcciones más adelante. |\r\n\r\n#### Pilas de protocolos y paquetes\r\nEntonces, tu computadora está conectada a Internet y tiene una dirección única. ¿Cómo 'habla' con otras computadoras conectadas a Internet? Un ejemplo debería servir aquí: Digamos que tu dirección IP es 1.2.3.4 y deseas enviar un mensaje a la computadora 5.6.7.8. El mensaje que deseas enviar es \"¡Hola computadora 5.6.7.8!\". Obviamente, el mensaje debe transmitirse sobre el tipo de cable que conecta tu computadora a Internet. Digamos que te has conectado a tu ISP desde casa y el mensaje debe transmitirse a través de la línea telefónica. Por lo tanto, el mensaje debe traducirse de texto alfabético a señales electrónicas, transmitirse por Internet y luego traducirse nuevamente a texto alfabético. ¿Cómo se logra esto? A través del uso de una pila de protocolos. Cada computadora necesita una para comunicarse en Internet y generalmente está integrada en el sistema operativo de la computadora (por ejemplo, Windows, Unix, etc.). La pila de protocolos utilizada en Internet se conoce como la pila de protocolos TCP/IP debido a los dos principales protocolos de comunicación utilizados. La pila TCP/IP se ve así:\r\n\r\n| **Capa de protocolo** | **Comentarios** |\r\n| ----------- | ----------- |\r\n| Capa de protocolos de aplicación | Protocolos específicos para aplicaciones como WWW, correo electrónico, FTP, etc. |\r\n| Capa de protocolo de control de transmisión  | TCP dirige paquetes a una aplicación específica en una computadora mediante un número de puerto. |\r\n| Capa de protocolo de Internet  | IP dirige paquetes a una computadora específica mediante una dirección IP. |\r\n| Capa de hardware | Convierte datos de paquetes binarios a señales de red y viceversa. (Por ejemplo, tarjeta de red Ethernet, módem para líneas telefónicas, etc.) |\r\n\r\nSi siguiéramos el camino que tomó el mensaje \"¡Hola computadora 5.6.7.8!\" desde nuestra computadora hasta la computadora con la dirección IP 5.6.7.8, ocurriría algo así:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif\" width=\"650\" alt=\"Diagrama 2\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 2\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\n1. El mensaje comenzaría en la parte superior de la pila de protocolos en tu computadora y avanzaría hacia abajo.\r\n2. Si el mensaje que se va a enviar es largo, cada capa de la pila que atraviesa el mensaje puede dividirlo en trozos más pequeños de datos. Esto se debe a que los datos enviados por Internet (y la mayoría de las redes informáticas) se envían en trozos manejables. En Internet, estos trozos de datos se conocen como paquetes.\r\n3. Los paquetes pasarían por la Capa de Aplicación y continuarían hacia la capa TCP. A cada paquete se le asigna un número de puerto. Los puertos se explicarán más adelante, pero basta decir que muchos programas pueden estar utilizando la pila TCP/IP y enviando mensajes. Necesitamos saber qué programa en la computadora de destino debe recibir el mensaje porque estará escuchando en un puerto específico.\r\n4. Después de pasar por la capa TCP, los paquetes pasan a la capa IP. Aquí es donde cada paquete recibe su dirección de destino, 5.6.7.8.\r\n5. Ahora que nuestros paquetes de mensaje tienen un número de puerto y una dirección IP, están listos para ser enviados por Internet. La capa de hardware se encarga de convertir nuestros paquetes que contienen el texto alfabético de nuestro mensaje en señales electrónicas y transmitirlos por la línea telefónica.\r\n6. Al otro lado de la línea telefónica, tu ISP tiene una conexión directa a Internet. El enrutador del ISP examina la dirección de destino en cada paquete y determina a dónde enviarlo. A menudo, la próxima parada del paquete es otro enrutador. Más sobre enrutadores e infraestructura de Internet más adelante.\r\n7. Eventualmente, los paquetes llegan a la computadora 5.6.7.8. Aquí, los paquetes comienzan en la parte inferior de la pila TCP/IP de la computadora de destino y avanzan hacia arriba.\r\n8. A medida que los paquetes avanzan hacia arriba a través de la pila, se eliminan todos los datos de enrutamiento que agregó la pila de la computadora de envío (como la dirección IP y el número de puerto) de los paquetes.\r\n9. Cuando los datos llegan a la parte superior de la pila, los paquetes se han vuelto a ensamblar en su forma original, \"¡Hola computadora 5.6.7.8!\"\r\n\r\n#### Infraestructura de red\r\nAhora sabes cómo los paquetes viajan de una computadora a otra a través de Internet. Pero, ¿qué hay en medio? ¿Qué compone realmente Internet? Veamos otro diagrama:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\" width=\"650\" alt=\"Diagrama 3\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 3\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nAquí vemos el Diagrama 1 dibujado de nuevo con más detalle. La conexión física a través de la red telefónica hasta el proveedor de servicios de Internet podría haber sido fácil de adivinar, pero más allá de eso podría necesitar alguna explicación.\r\n\r\nEl ISP mantiene un grupo de módems para sus clientes de conexión telefónica. Esto es gestionado por alguna forma de computadora (generalmente una dedicada) que controla el flujo de datos desde el grupo de módems hasta un enrutador de red principal o una línea dedicada. Este conjunto puede llamarse servidor de puerto, ya que 'sirve' el acceso a la red. También se recopila información de facturación y uso aquí generalmente.\r\n\r\nDespués de que tus paquetes atraviesan la red telefónica y el equipo local de tu ISP, se dirigen a la red principal de tu ISP o una red principal de la que tu ISP compra ancho de banda. Desde aquí, los paquetes generalmente viajarán a través de varios enrutadores y sobre varias redes principales, líneas dedicadas y otras redes hasta que encuentren su destino, la computadora con la dirección 5.6.7.8. Pero ¿no sería bueno si supiéramos la ruta exacta que toman nuestros paquetes por Internet? Resulta que hay una manera...\r\n\r\n| **Verifica Esto - El Programa Traceroute** |\r\n|-----|\r\n| Si estás utilizando Microsoft Windows o alguna variante de Unix y tienes una conexión a Internet, aquí tienes otro programa útil de Internet. Este se llama traceroute y muestra la ruta que están tomando tus paquetes hacia un destino específico en Internet. Al igual que ping, debes usar traceroute desde un símbolo del sistema. En Windows, utiliza tracert www.yahoo.com. Desde un símbolo de Unix, escribe traceroute www.yahoo.com. Al igual que con ping, también puedes ingresar direcciones IP en lugar de nombres de dominio. Traceroute imprimirá una lista de todos los enrutadores, computadoras y cualquier otra entidad de Internet por la que deben pasar tus paquetes para llegar a su destino. |\r\n\r\nSi usas traceroute, notarás que tus paquetes deben pasar por muchas cosas para llegar a su destino. La mayoría tiene nombres largos como sjc2-core1-h2-0-0.atlas.digex.net y fddi0-0.br4.SJC.globalcenter.net. Estos son enrutadores de Internet que deciden hacia dónde enviar tus paquetes. Se muestran varios enrutadores en el Diagrama 3, pero solo unos pocos. El Diagrama 3 pretende mostrar una estructura de red simple. Internet es mucho más complejo.\r\n\r\n#### Infraestructura de Internet\r\n\r\nEl backbone de Internet está compuesta por muchas redes grandes que se interconectan entre sí. Estas grandes redes se conocen como Proveedores de Servicios de Red o NSP (por sus siglas en inglés). Algunos de los grandes NSP son UUNet, CerfNet, IBM, BBN Planet, SprintNet, PSINet, entre otros. Estas redes intercambian tráfico de paquetes entre sí. Cada NSP debe conectarse a tres Puntos de Acceso a la Red o NAPs. En los NAP, el tráfico de paquetes puede pasar de la backbone de un NSP a la backbone de otro NSP. Los NSP también se conectan en Intercambios Metropolitanos o MAEs. Los MAE cumplen el mismo propósito que los NAP pero son de propiedad privada. Los NAP fueron los puntos originales de interconexión de Internet. Tanto los NAP como los MAE se conocen como Puntos de Intercambio de Internet o IXs. Los NSP también venden ancho de banda a redes más pequeñas, como ISPs y proveedores de ancho de banda más pequeños. A continuación, hay una imagen que muestra esta infraestructura jerárquica.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif\" width=\"650\" alt=\"Diagrama 4\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 4\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nEsta no es una representación real de una parte de Internet. El Diagrama 4 solo pretende demostrar cómo los NSP podrían interconectarse entre sí y con ISPs más pequeños. Ninguno de los componentes físicos de la red se muestra en el Diagrama 4 como en el Diagrama 3. Esto se debe a que la infraestructura de la columna vertebral de un solo NSP es un dibujo complejo por sí mismo. La mayoría de los NSP publican mapas de su infraestructura de red en sus sitios web y se pueden encontrar fácilmente. Dibujar un mapa real de Internet sería casi imposible debido a su tamaño, complejidad y estructura siempre cambiante.\r\n\r\n#### Jerarquía de enrutamiento de Internet\r\n\r\nEntonces, ¿cómo encuentran su camino los paquetes a través de Internet? ¿Cada computadora conectada a Internet sabe dónde están las demás computadoras? ¿Los paquetes simplemente se 'transmiten' a cada computadora en Internet? La respuesta a ambas preguntas anteriores es 'no'. Ninguna computadora sabe dónde están las demás y los paquetes no se envían a cada computadora. La información utilizada para que los paquetes lleguen a sus destinos se encuentra en tablas de enrutamiento mantenidas por cada enrutador conectado a Internet.\r\n\r\n**Los enrutadores son interruptores de paquetes**. Un enrutador suele estar conectado entre redes para enrutar paquetes entre ellas. Cada enrutador conoce sus subredes y qué direcciones IP utilizan. El enrutador generalmente no sabe qué direcciones IP están 'por encima' de él. Examine el Diagrama 5 a continuación. Los cuadros negros que conectan las columnas vertebrales son enrutadores. Las columnas vertebrales más grandes de NSP en la parte superior están conectadas en un NAP. Debajo de ellas hay varias subredes y debajo de ellas, más subredes. En la parte inferior hay dos redes de área local con computadoras conectadas.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif\" width=\"650\" alt=\"Diagrama 5\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 5\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nCuando un paquete llega a un enrutador, el enrutador examina la dirección IP colocada allí por la capa de protocolo IP en la computadora de origen. El enrutador verifica su tabla de enrutamiento. Si se encuentra la red que contiene la dirección IP, el paquete se envía a esa red. Si no se encuentra la red que contiene la dirección IP, entonces el enrutador envía el paquete por una ruta predeterminada, generalmente hacia arriba en la jerarquía de la columna vertebral hasta el siguiente enrutador. Con suerte, el siguiente enrutador sabrá dónde enviar el paquete. Si no lo hace, nuevamente el paquete se enruta hacia arriba hasta que llega a una columna vertebral de NSP. Los enrutadores conectados a las columnas vertebrales de NSP tienen las tablas de enrutamiento más grandes y aquí el paquete se enrutará hacia la columna vertebral correcta, donde comenzará su viaje hacia 'abajo' a través de redes más pequeñas hasta que encuentre su destino.\r\n\r\n#### Nombres de dominio y resolución de direcciones\r\n\r\nPero, ¿qué pasa si no conoces la dirección IP de la computadora a la que quieres conectarte? ¿Qué pasa si necesitas acceder a un servidor web denominado www.otracomputadora.com? ¿Cómo sabe tu navegador web dónde vive esta computadora en Internet? La respuesta a todas estas preguntas es el Servicio de Nombres de Dominio o DNS. El DNS es una base de datos distribuida que realiza un seguimiento de los nombres de las computadoras y sus direcciones IP correspondientes en Internet.\r\n\r\nMuchas computadoras conectadas a Internet alojan parte de la base de datos de DNS y el software que permite a otras acceder a ella. Estas computadoras se conocen como servidores DNS. Ningún servidor DNS contiene toda la base de datos; solo contienen una parte de ella. Si un servidor DNS no contiene el nombre de dominio solicitado por otra computadora, el servidor DNS redirige a la computadora solicitante a otro servidor DNS.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif\" width=\"650\" alt=\"Diagrama 6\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 6\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nEl Servicio de Nombres de Dominio está estructurado jerárquicamente de manera similar a la jerarquía de enrutamiento IP. La computadora que solicita una resolución de nombre será redirigida hacia arriba en la jerarquía hasta que se encuentre un servidor DNS que pueda resolver el nombre de dominio solicitado. La Figura 6 ilustra una parte de la jerarquía. En la parte superior del árbol se encuentran las raíces del dominio. Algunos de los dominios más antiguos y comunes se encuentran cerca de la parte superior. Lo que no se muestra son las numerosas computadoras servidoras DNS en todo el mundo que forman el resto de la jerarquía.\r\n\r\nCuando se configura una conexión a Internet (por ejemplo, para una LAN o Conexión telefónica en Windows), generalmente se especifica un servidor DNS principal y uno o más servidores DNS secundarios como parte de la instalación. De esta manera, cualquier aplicación de Internet que necesite resolución de nombres de dominio podrá funcionar correctamente. Por ejemplo, cuando ingresas una dirección web en tu navegador, el navegador se conecta primero a tu servidor DNS principal. Después de obtener la dirección IP del nombre de dominio que ingresaste, el navegador se conecta al ordenador de destino y solicita la página web que deseabas.\r\n\r\n| **Revísalo - Deshabilitar DNS en Windows** |\r\n|---|\r\n| Si estás utilizando Windows 95/NT y accedes a Internet, puedes ver tus servidores DNS y deshabilitarlos.\r\nSi utilizas Dial-Up Networking:\r\nAbre tu ventana de Dial-Up Networking (que se encuentra en el Explorador de Windows debajo de tu unidad de CD-ROM y encima de Network Neighborhood). Haz clic derecho en tu conexión a Internet y haz clic en Propiedades. Cerca de la parte inferior de la ventana de propiedades de la conexión, presiona el botón Configuración de TCP/IP...\r\nSi tienes una conexión permanente a Internet:\r\nHaz clic derecho en Network Neighborhood y haz clic en Propiedades. Haz clic en Propiedades de TCP/IP. Selecciona la pestaña Configuración de DNS en la parte superior.\r\nAhora deberías estar viendo las direcciones IP de tus servidores DNS. Aquí puedes deshabilitar DNS o configurar tus servidores DNS en 0.0.0.0. (Escribe primero las direcciones IP de tus servidores DNS. Probablemente tendrás que reiniciar Windows también). Ahora ingresa una dirección en tu navegador web. El navegador no podrá resolver el nombre de dominio y probablemente obtendrás un molesto cuadro de diálogo explicando que no se pudo encontrar un servidor DNS. Sin embargo, si ingresas la dirección IP correspondiente en lugar del nombre de dominio, el navegador podrá recuperar la página web deseada. (Usa ping para obtener la dirección IP antes de deshabilitar DNS). Otros sistemas operativos de Microsoft son similares. |\r\n\r\n#### Protocolos de Internet revisados\r\nComo se insinuó anteriormente en la sección sobre pilas de protocolos, se puede suponer que existen muchos protocolos que se utilizan en Internet. Esto es cierto; hay muchos protocolos de comunicación necesarios para que funcione Internet. Estos incluyen los protocolos TCP e IP, protocolos de enrutamiento, protocolos de control de acceso al medio, protocolos a nivel de aplicación, etc. Las secciones siguientes describen algunos de los protocolos más importantes y comúnmente utilizados en Internet. Los protocolos de nivel superior se discuten primero, seguidos de los protocolos de nivel inferior.\r\n\r\n#### Protocolos de aplicación: HTTP y la World Wide Web\r\nUno de los servicios más comúnmente utilizados en Internet es la World Wide Web (WWW). El protocolo de aplicación que hace que funcione la web es el Protocolo de Transferencia de Hipertexto o HTTP. No confundir esto con el Lenguaje de Marcado de Hipertexto (HTML). HTML es el lenguaje utilizado para escribir páginas web. HTTP es el protocolo que utilizan los navegadores web y los servidores web para comunicarse entre sí a través de Internet. Es un protocolo de nivel de aplicación porque se encuentra en la parte superior de la capa TCP en la pila de protocolos y es utilizado por aplicaciones específicas para hablar entre sí. En este caso, las aplicaciones son navegadores web y servidores web.\r\n\r\nHTTP es un protocolo basado en texto y sin conexión. Los clientes (navegadores web) envían solicitudes a los servidores web para obtener elementos web como páginas web e imágenes. Después de que el servidor satisface la solicitud, la conexión entre el cliente y el servidor a través de Internet se desconecta. Se debe realizar una nueva conexión para cada solicitud. La mayoría de los protocolos son orientados a la conexión. Esto significa que las dos computadoras que se comunican entre sí mantienen la conexión abierta a través de Internet. Sin embargo, HTTP no lo hace. Antes de que un cliente pueda hacer una solicitud HTTP, se debe realizar una nueva conexión al servidor.\r\n\r\nCuando escribes una URL en un navegador web, esto es lo que sucede:\r\n\r\n1. Si la URL contiene un nombre de dominio, el navegador se conecta primero a un servidor de nombres de dominio y recupera la dirección IP correspondiente al servidor web.\r\n1. El navegador web se conecta al servidor web y envía una solicitud HTTP (a través de la pila de protocolos) para la página web deseada.\r\n1. El servidor web recibe la solicitud y verifica si la página deseada existe. Si la página existe, el servidor web la envía. Si el servidor no puede encontrar la página solicitada, enviará un mensaje de error HTTP 404. (404 significa 'Página no encontrada', como probablemente sepa cualquiera que haya navegado por la web).\r\n1. El navegador web recibe la página y se cierra la conexión.\r\n1. Luego, el navegador analiza la página y busca otros elementos necesarios para completar la página web. Estos suelen incluir imágenes, applets, etc.\r\n1. Para cada elemento necesario, el navegador realiza conexiones adicionales y solicitudes HTTP al servidor para cada elemento.\r\n1. Cuando el navegador ha terminado de cargar todas las imágenes, applets, etc., la página estará completamente cargada en la ventana del navegador.\r\n\r\n| **Échale un vistazo - Usa tu cliente Telnet para recuperar una página web usando HTTP** |\r\n|---|\r\n| Telnet es un servicio de terminal remota utilizado en Internet. Su uso ha disminuido últimamente, pero es una herramienta muy útil para estudiar Internet. En Windows, busca el programa Telnet por defecto. Puede estar ubicado en el directorio de Windows con el nombre telnet.exe. Cuando lo abras, despliega el menú Terminal y selecciona Preferencias. En la ventana de preferencias, marca la opción Local Echo. (Esto es para que puedas ver tu solicitud HTTP cuando la escribas). Ahora despliega el menú Conexión y selecciona Sistema remoto. Ingresa www.google.com como Nombre de host y 80 como Puerto. (Los servidores web suelen escuchar en el puerto 80 de forma predeterminada). Presiona Conectar. Ahora escribe GET / HTTP/1.0 y presiona Enter dos veces. Esta es una solicitud HTTP simple a un servidor web para obtener su página principal. Deberías ver una página web que pasa rápidamente y luego debería aparecer un cuadro de diálogo que te dirá que se perdió la conexión. Si deseas guardar la página recuperada, activa el registro en el programa Telnet. Luego puedes navegar por la página web y ver el HTML que se utilizó para escribirla.|\r\n\r\nLa mayoría de los protocolos de Internet están especificados por documentos de Internet conocidos como Solicitudes de Comentarios o RFC. Los RFC se pueden encontrar en varios lugares de Internet. Consulta la sección de Recursos más abajo para obtener las URL correspondientes. La versión 1.0 de HTTP está especificada por el RFC 1945.\r\n\r\n#### Protocolos de aplicación: SMTP y correo electrónico\r\nAquí tienes otro servicio comúnmente utilizado en Internet: el correo electrónico. El correo electrónico utiliza un protocolo de nivel de aplicación llamado Simple Mail Transfer Protocol o SMTP. SMTP también es un protocolo basado en texto, pero a diferencia de HTTP, SMTP es orientado a la conexión. Además, SMTP es más complicado que HTTP, ya que tiene muchos más comandos y consideraciones.\r\n\r\nCuando abres tu cliente de correo electrónico para leer tus correos electrónicos, esto es lo que suele suceder:\r\n\r\n1. El cliente de correo (Netscape Mail, Lotus Notes, Microsoft Outlook, etc.) abre una conexión con su servidor de correo predeterminado. La dirección IP o el nombre de dominio del servidor de correo generalmente se configuran al instalar el cliente de correo.\r\n1. El servidor de correo siempre transmitirá el primer mensaje para identificarse.\r\n1. El cliente enviará un comando SMTP HELO al que el servidor responderá con un mensaje 250 OK.\r\n1. Dependiendo de si el cliente está revisando correos, enviando correos, etc., se enviarán al servidor los comandos SMTP apropiados, que responderá en consecuencia.\r\n1. Esta transacción de solicitud/respuesta continuará hasta que el cliente envíe un comando SMTP QUIT. El servidor se despedirá y se cerrará la conexión.\r\n1. A continuación, se muestra una 'conversación' simple entre un cliente SMTP y un servidor SMTP. R: denota mensajes enviados por el servidor (receptor) y S: denota mensajes enviados por el cliente (emisor).\r\n\r\n```\r\nEste ejemplo de SMTP muestra un correo enviado por Smith desde \r\nel host USC-ISIF a Jones, Green y Brown en el host BBN-UNIX. \r\nAquí asumimos que el host USC-ISIF se comunica directamente \r\ncon el host BBN-UNIX. El correo se acepta para Jones y Brown. \r\nGreen no tiene un buzón en el host BBN-UNIX.\r\n\r\n      -------------------------------------------------------------\r\n\r\n         R: 220 BBN-UNIX.ARPA Simple Mail Transfer Service Ready\r\n         S: HELO USC-ISIF.ARPA\r\n         R: 250 BBN-UNIX.ARPA\r\n\r\n         S: MAIL FROM:\u003CSmith@USC-ISIF.ARPA>\r\n         R: 250 OK\r\n\r\n         S: RCPT TO:\u003CJones@BBN-UNIX.ARPA>\r\n         R: 250 OK\r\n\r\n         S: RCPT TO:\u003CGreen@BBN-UNIX.ARPA>\r\n         R: 550 No such user here\r\n\r\n         S: RCPT TO:\u003CBrown@BBN-UNIX.ARPA>\r\n         R: 250 OK\r\n\r\n         S: DATA\r\n         R: 354 Start mail input; end with \u003CCRLF>.\u003CCRLF>\r\n         S: Blah blah blah...\r\n         S: ...etc. etc. etc.\r\n         S: .\r\n         R: 250 OK\r\n\r\n         S: QUIT\r\n         R: 221 BBN-UNIX.ARPA Service closing transmission channel\r\n```\r\n\r\nEsta transacción SMTP está tomada del RFC 821, que especifica SMTP.\r\n\r\n#### Protocolo de control de transmisión\r\n\r\nBajo la capa de aplicación en la pila de protocolos se encuentra la capa de TCP. Cuando las aplicaciones abren una conexión a otra computadora en Internet, los mensajes que envían (utilizando un protocolo de capa de aplicación específico) se pasan hacia abajo en la pila hasta la capa de TCP. TCP es responsable de enrutar los protocolos de aplicación hacia la aplicación correcta en la computadora de destino. Para lograr esto, se utilizan números de puerto. Los puertos se pueden pensar como canales separados en cada computadora. Por ejemplo, puedes navegar por la web mientras lees el correo electrónico. Esto se debe a que estas dos aplicaciones (el navegador web y el cliente de correo) utilizan números de puerto diferentes. Cuando un paquete llega a una computadora y avanza por la pila de protocolos, la capa de TCP decide qué aplicación recibe el paquete según un número de puerto.\r\n\r\nTCP funciona de la siguiente manera:\r\n\r\n* Cuando la capa de TCP recibe los datos del protocolo de capa de aplicación desde arriba, los segmenta en \"trozos\" manejables y luego agrega un encabezado de TCP con información específica de TCP a cada \"trozo\". La información contenida en el encabezado de TCP incluye el número de puerto de la aplicación a la que se deben enviar los datos.\r\n* Cuando la capa de TCP recibe un paquete de la capa de IP debajo de ella, la capa de TCP elimina los datos del encabezado de TCP del paquete, realiza alguna reconstrucción de datos si es necesario y luego envía los datos a la aplicación correcta utilizando el número de puerto tomado del encabezado de TCP.\r\n\r\nAsí es como TCP enruta los datos que se mueven a través de la pila de protocolos a la aplicación correcta.\r\n\r\nTCP no es un protocolo textual. TCP es un servicio de flujo de bytes confiable y orientado a la conexión. Orientado a la conexión significa que dos aplicaciones que utilizan TCP deben establecer primero una conexión antes de intercambiar datos. TCP es confiable porque por cada paquete recibido, se envía un acuse de recibo al remitente para confirmar la entrega. TCP también incluye una suma de comprobación en su encabezado para verificar errores en los datos recibidos. El encabezado de TCP se ve así:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag7.gif\" width=\"650\" alt=\"Diagrama 7\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 7\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nEs importante destacar que no hay espacio para una dirección IP en el encabezado de TCP. Esto se debe a que TCP no sabe nada acerca de las direcciones IP. La tarea de TCP es llevar datos de nivel de aplicación de una aplicación a otra de manera confiable. La tarea de llevar datos de una computadora a otra es responsabilidad de IP.\r\n\r\n| **Consultar - Números de puerto de Internet bien conocidos** | |\r\n|---|---|\r\n| A continuación se enumeran los números de puerto para algunos de los servicios de Internet más comúnmente utilizados.|\r\n| FTP |\t20/21 |\r\n| Telnet | 23 |\r\n| SMTP |\t25 |\r\n| HTTP |\t80 |\r\n| Quake III Arena\t| 27960 |\r\n\r\n#### Protocolo de Internet\r\nA diferencia de TCP, IP es un protocolo no confiable y sin conexión. A IP no le importa si un paquete llega o no a su destino. Tampoco IP conoce las conexiones ni los números de puerto. La tarea de IP es enviar y dirigir paquetes a otras computadoras. Los paquetes de IP son entidades independientes y pueden llegar desordenados o no llegar en absoluto. La tarea de TCP es asegurarse de que los paquetes lleguen y estén en el orden correcto. Casi lo único que IP tiene en común con TCP es la forma en que recibe datos y agrega su propia información de encabezado IP a los datos de TCP. El encabezado de IP se ve así:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag8.gif\" width=\"650\" alt=\"Diagrama 8\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 8\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\nArriba vemos las direcciones IP de las computadoras emisora y receptora en el encabezado de IP. A continuación, se muestra cómo se ve un paquete después de pasar por la capa de aplicación, la capa de TCP y la capa de IP. Los datos de la capa de aplicación se segmentan en la capa de TCP, se agrega el encabezado de TCP, el paquete continúa hasta la capa de IP, se agrega el encabezado de IP, y luego el paquete se transmite a través de Internet.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg style=\"background-color: white;\" src=\"http://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag9.gif\" width=\"650\" alt=\"Diagrama 9\" />\r\n    \u003Cfigcaption>\u003Cem>Diagrama 9\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\n#### Resumen\r\nAhora conoces cómo funciona Internet. Pero, ¿cuánto tiempo seguirá así? La versión de IP actualmente utilizada en Internet (versión 4) solo permite 232 direcciones. Eventualmente, no quedará ninguna dirección IP libre. ¿Sorprendido? No te preocupes. La versión 6 de IP se está probando en estos momentos en una red de investigación por un consorcio de instituciones de investigación y corporaciones. ¿Y después de eso? Quién sabe. Internet ha recorrido un largo camino desde su inicio como un proyecto de investigación del Departamento de Defensa. Realmente, nadie sabe qué será de Internet. Una cosa es segura, sin embargo. Internet unirá al mundo de una manera como ningún otro mecanismo lo ha hecho. La Era de la Información está en pleno apogeo y me alegra ser parte de ella.\r\n\r\nRus Shuler, 1998\r\n\r\nActualizaciones realizadas en 2002\r\n\r\n#### Recursos\r\nAquí tienes algunos enlaces interesantes asociados con algunos de los temas discutidos. (Espero que todos sigan funcionando. Todos se abren en una nueva ventana.)\r\n\r\nhttp://www.ietf.org/ es la página principal del Internet Engineering Task Force. Este organismo es ampliamente responsable del desarrollo de los protocolos de Internet y similares.\r\n\r\nhttp://www.internic.org/ es la organización responsable de administrar los nombres de dominio.\r\n\r\nhttp://www.nexor.com/public/rfc/index/rfc.html es un excelente motor de búsqueda de RFC que resulta útil para encontrar cualquier RFC.\r\n\r\nhttp://www.internetweather.com/ muestra mapas animados de la latencia de Internet.\r\n\r\nhttp://routes.clubnet.net/iw/ es Internet Weather de ClubNET. Esta página muestra la pérdida de paquetes para varios proveedores.\r\n\r\nhttp://navigators.com/isp.html es la Página de ISP de Russ Haynal. Este es un gran sitio con enlaces a la mayoría de los NSP y mapas de infraestructura de sus backbones.\r\n\r\n#### Bibliografía\r\nLos siguientes libros son excelentes recursos y fueron de gran ayuda en la redacción de este documento. Creo que el libro de Stevens es la mejor referencia de TCP/IP y puede considerarse la biblia de Internet. El libro de Sheldon abarca un ámbito mucho más amplio y contiene una vasta cantidad de información sobre redes.\r\n\r\n* TCP/IP Illustrated, Volumen 1, The Protocols.\r\nW. Richard Stevens.\r\nAddison-Wesley, Reading, Massachusetts. 1994.\r\n\r\n* Encyclopedia of Networking.\r\nTom Sheldon.\r\nOsbourne McGraw-Hill, Nueva York. 1998.\r\n\r\nAunque no se utilizaron para escribir este documento, aquí hay algunos otros buenos libros sobre los temas de Internet y redes:\r\n\r\n* Firewalls and Internet Security; Repelling the Wiley Hacker.\r\nWilliam R. Cheswick, Steven M. Bellovin.\r\nAddison-Wesley, Reading, Massachusetts. 1994.\r\n\r\n* Data Communications, Computer Networks and Open Systems. Cuarta Edición.\r\nFred Halsall.\r\nAddison-Wesley, Harlow, Inglaterra. 1996.\r\n\r\n* Telecommunications: Protocols and Design.\r\nJohn D. Spragins con Joseph L. Hammond y Krzysztof Pawlikowski.\r\nAddison-Wesley, Reading, Massachusetts. 1992.\r\n\r\n## Internet Explicado\r\n\r\n> [Recurso Original](https://www.vox.com/2014/6/16/18076282/the-internet) (Version - Mayo 14, 2015)\r\n\r\n#### ¿Qué es Internet?\r\nEl internet es la red de computadoras más popular del mundo. Comenzó como un proyecto de investigación académica en 1969 y se convirtió en una red comercial global en la década de 1990. Hoy en día, es utilizado por más de 2 mil millones de personas en todo el mundo.\r\n\r\nEl internet es notable por su descentralización. Nadie es dueño del internet ni controla quién puede conectarse a él. En su lugar, miles de organizaciones diferentes operan sus propias redes y negocian acuerdos de interconexión voluntarios.\r\n\r\nLa mayoría de las personas accede al contenido de Internet utilizando un navegador web. De hecho, la web se ha vuelto tan popular que muchas personas tratan incorrectamente al internet y la web como sinónimos. Pero en realidad, la web es solo una de las muchas aplicaciones de internet. Otras aplicaciones populares de Internet incluyen el correo electrónico y BitTorrent.\r\n\r\n#### ¿Dónde está Internet?\r\n\r\nEl internet tiene tres partes básicas:\r\n\r\n* **La última milla (Last Mile):** Esta es la parte del internet que conecta hogares y pequeñas empresas al internet. Actualmente, [alrededor del 60 por ciento](https://leichtmanresearch.com/research-notes/) de las conexiones de internet residenciales en Estados Unidos son proporcionadas por compañías de televisión por cable como Comcast y Time Warner. Del 40 por ciento restante, una fracción en crecimiento utiliza cables de fibra óptica, la mayoría de los cuales forman parte del programa FiOS de Verizon o U-Verse de AT&T. Finalmente, un número significativo pero en disminución utiliza el antiguo servicio DSL proporcionado a través de cables telefónicos. La última milla también incluye las torres que permiten a las personas acceder al internet con sus teléfonos celulares. El servicio de internet inalámbrico representa una parte grande y en crecimiento de todo el uso de internet.\r\n\r\n* **Centros de datos (Data Centers):** Son salas llenas de servidores que almacenan datos de usuarios y alojan aplicaciones y contenido en línea. Algunos son propiedad de grandes empresas como Google y Facebook, mientras que otros son instalaciones comerciales que brindan servicio a muchos sitios web más pequeños. Los centros de datos tienen conexiones de internet muy rápidas, lo que les permite atender a muchos usuarios simultáneamente. Pueden estar ubicados en cualquier parte del mundo, pero a menudo se encuentran en áreas remotas donde la tierra y la electricidad son más económicas. Por ejemplo, [Google](https://www.datacenterknowledge.com/archives/2013/12/02/in-iowa-a-field-becomes-a-huge-google-server-farm/), [Facebook](http://www.wired.com/wiredenterprise/2013/11/facebook-iowa-wind/), y [Microsoft](http://www.wired.com/wiredenterprise/2013/06/microsoft-iowa-data-center/) han construido vastos centros de datos en Iowa.\r\n\r\n* **Backbone:** Consiste en redes de larga distancia, principalmente de cables de fibra óptica, que transportan datos entre centros de datos y usuarios. El mercado del backbone es altamente competitivo. Los proveedores de backbone conectan sus redes con frecuencia en [puntos de intercambio de internet](https://en.wikipedia.org/wiki/List_of_Internet_exchange_points_by_size), generalmente ubicados en ciudades principales. Establecer presencia en estos puntos de intercambio facilita que los proveedores de backbone mejoren sus conexiones con otros.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"https://cdn1.vox-cdn.com/assets/4195719/1024px-AMS-IX_optical_patch_panel_medium.jpg\" width=\"650\" alt=\"Pasos de compilación y ejecución de JS\" align=\"center\" />\r\n    \u003Cfigcaption>\u003Cem>Cables en un punto de intercambio de Internet. (\u003Ca href=\"https://en.wikipedia.org/wiki/File:AMS-IX_optical_patch_panel.jpg\" target=\"_blank\">Fabienne Serriere\u003C/a>)\u003C/em>\u003C/figcaption>\r\n    \u003Cbr/>\u003Cbr/>\r\n\u003C/figure>\r\n\r\n#### ¿Quién creó Internet?\r\nEl internet comenzó como [ARPANET](https://en.wikipedia.org/wiki/ARPANET), una red de investigación académica financiada por la Agencia de Proyectos de Investigación Avanzada del Departamento de Defensa de los Estados Unidos (ARPA, ahora DARPA). El proyecto fue liderado por [Bob Taylor](https://en.wikipedia.org/wiki/Robert_Taylor_(computer_scientist)), un administrador de ARPA, y la red fue construida por la firma de consultoría Bolt, Beranek y Newman. ARPANET comenzó sus operaciones en 1969.\r\n\r\nEn 1973, los ingenieros de software [Vint Cerf](https://en.wikipedia.org/wiki/Vint_Cerf) y [Bob Kahn](https://en.wikipedia.org/wiki/Bob_Kahn) comenzaron a trabajar en la siguiente generación de estándares de redes para ARPANET. Estos estándares, conocidos como [TCP/IP](https://en.wikipedia.org/wiki/Internet_protocol_suite), se convirtieron en la base del internet moderno. ARPANET cambió a TCP/IP el 1 de enero de 1983.\r\n\r\nDurante la década de 1980, la financiación para el internet pasó del ámbito militar a la [National Science Foundation](http://www.nsf.gov/). La NSF financió las redes de larga distancia que sirvieron como la columna vertebral del internet desde 1981 hasta 1994. En 1994, la administración Clinton [transfirió el control]((http://www.nytimes.com/1994/10/24/business/us-begins-privatizing-internet-s-operations.html)) de la columna vertebral del internet al sector privado. Ha sido operado y financiado de manera privada desde entonces.\r\n\r\n#### ¿Inventó Al Gore Internet?\r\nLa afirmación de que el exvicepresidente Al Gore se atribuye el mérito de la invención del internet es a menudo citada, pero lo que en realidad dijo en una [entrevista de CNN en 1999]((https://www.youtube.com/watch?v=BnFJ8cHAlco)) fue: \"Tomé la iniciativa en la creación del internet\". Gore fue ampliamente ridiculizado por esta declaración. Sin embargo, los hombres que realmente inventaron el internet, los diseñadores de TCP/IP Bob Kahn y Vint Cerf, [escribieron en defensa de Gore](http://amsterdam.nettime.org/Lists-Archives/nettime-l-0009/msg00311.html) en 2000. Argumentaron que Gore fue \"el primer líder político en reconocer la importancia del internet y promover y apoyar su desarrollo\".\r\n\r\n\"Tan atrás como en la década de 1970, el congresista Gore promovió la idea de las telecomunicaciones de alta velocidad\", escribieron. \"Como senador en la década de 1980, Gore instó a las agencias gubernamentales a consolidar lo que en ese momento eran varias docenas de redes diferentes e inconexas en una 'Red Interinstitucional'\". Gore patrocinó la [Ley de Computación y Comunicaciones de Alto Rendimiento](https://en.wikipedia.org/wiki/High_Performance_Computing_Act_of_1991) de 1991, que Kahn y Cerf dicen que \"se convirtió en uno de los principales vehículos para la expansión del internet más allá del campo de la informática\".\r\n\r\n#### ¿Quién dirige Internet?\r\nNadie administra el internet. Está organizado como una red descentralizada de redes. Miles de empresas, universidades, gobiernos y otras entidades operan sus propias redes e intercambian tráfico entre sí basándose en acuerdos de interconexión voluntarios.\r\n\r\nLos estándares técnicos compartidos que hacen que funcione el internet son gestionados por una organización llamada Grupo de Trabajo de Ingeniería de Internet ([Internet Engineering Task Force](http://www.ietf.org/), IETF). El IETF es una organización abierta; cualquiera puede asistir a las reuniones, proponer nuevos estándares y recomendar cambios a los estándares existentes. No se requiere que nadie adopte los estándares respaldados por el IETF, pero el proceso de toma de decisiones basado en el consenso del IETF ayuda a garantizar que sus recomendaciones sean generalmente adoptadas por la comunidad de internet.\r\n\r\nLa Corporación de Asignación de Nombres y Números de Internet ([Internet Corporation for Assigned Names and Numbers](https://www.icann.org/), ICANN) a veces se describe como responsable de la gobernanza del internet. Como su nombre indica, ICANN se encarga de distribuir nombres de dominio (como vox.com) y [direcciones IP](http://www.vox.com/cards/the-internet/whats-an-ip-address). Pero ICANN no controla quién puede conectarse a internet ni qué tipo de información se puede enviar a través de él.\r\n\r\n#### ¿Qué es una dirección IP?\r\nLas direcciones del Protocolo de Internet (IP) son números que las computadoras utilizan para identificarse entre sí en internet. Por ejemplo, una dirección IP para vox.com es 216.146.46.10.\r\n\r\nUn departamento de ICANN conocido como la Autoridad de Números Asignados de Internet ([Internet Assigned Numbers Authority](https://www.iana.org/), IANA) es responsable de distribuir direcciones IP para asegurar que dos organizaciones diferentes no utilicen la misma dirección.\r\n\r\n#### ¿Qué es IPv6?\r\nEl estándar actual de internet, conocido como IPv4, solo permite alrededor de 4 mil millones de direcciones IP. Esto se consideraba un número muy grande en la década de 1970, pero hoy en día, el suministro de direcciones IPv4 está casi agotado.\r\n\r\nPor lo tanto, los ingenieros de internet han desarrollado un nuevo estándar llamado [IPv6](https://en.wikipedia.org/wiki/IPv6). IPv6 permite un número asombroso de direcciones únicas, la cifra exacta es de [39 dígitos](http://royal.pingdom.com/2009/05/26/the-number-of-possible-ipv6-addresses-read-out-loud/), asegurando que el mundo nunca se quede sin direcciones nuevamente.\r\n\r\nAl principio, la transición a IPv6 fue lenta. El trabajo técnico en el estándar se completó en la década de 1990, pero la comunidad de internet enfrentó un serio problema de \"huevo y gallina\": mientras la mayoría de las personas estuvieran usando IPv4, había poco incentivo para que alguien cambiara a IPv6.\r\n\r\nPero a medida que las direcciones IPv4 escaseaban, la adopción de IPv6 se aceleró. La [fracción de usuarios que se conectaban a Google a través de IPv6](https://www.google.com/intl/en/ipv6/statistics.html) creció del 1 por ciento a principios de 2013 al 6 por ciento a mediados de 2015.\r\n\r\n#### ¿Cómo funciona Internet inalámbrico?\r\nEn sus primeros años, el acceso a internet se realizaba a través de cables físicos. Pero más recientemente, el acceso inalámbrico a internet se ha vuelto cada vez más común.\r\n\r\nHay dos tipos básicos de acceso inalámbrico a internet: wifi y celular. [Las redes wifi](https://en.wikipedia.org/wiki/Wi-Fi) son relativamente simples. Cualquiera puede comprar equipos de redes wifi para proporcionar acceso a internet en un hogar o negocio. Las redes wifi utilizan espectro no licenciado: frecuencias electromagnéticas que están disponibles para que cualquiera las use sin cargo. Para evitar que las redes de los vecinos interfieran entre sí, existen límites estrictos en la potencia (y, por lo tanto, en el alcance) de las redes wifi.\r\n\r\nLas redes celulares son más centralizadas. Funcionan dividiendo el territorio de servicio en celdas. En las áreas más densas, las celdas pueden ser tan pequeñas como una cuadra de la ciudad; en áreas rurales, una celda puede tener millas de tamaño. Cada celda tiene una torre en su centro que proporciona servicios a los dispositivos allí. Cuando un dispositivo se mueve de una celda a otra, la red transfiere automáticamente el dispositivo de una torre a otra, permitiendo al usuario continuar comunicándose sin interrupciones.\r\n\r\nLas celdas son demasiado grandes para usar el espectro no licenciado y de baja potencia utilizado por las redes wifi. En cambio, las redes celulares utilizan espectro licenciado para su uso exclusivo. Debido a que este espectro es escaso, generalmente se asigna mediante subasta. Las subastas inalámbricas han [generado decenas de miles de millones de dólares](https://en.wikipedia.org/wiki/United_States_2008_wireless_spectrum_auction) en ingresos para el tesoro de los Estados Unidos desde la primera que se llevó a cabo en 1994.\r\n\r\n#### ¿Qué es la nube?\r\n\r\nLa nube describe un enfoque para la informática que se volvió popular a principios de la década de 2000. Al almacenar archivos en servidores y proporcionar software a través de internet, la informática en la nube brinda a los usuarios una experiencia informática más simple y confiable. La informática en la nube permite a consumidores y empresas tratar la informática como un servicio público, dejando los detalles técnicos a las compañías de tecnología.\r\n\r\nPor ejemplo, en la década de 1990, muchas personas usaban Microsoft Office para editar documentos y hojas de cálculo. Almacenaban documentos en sus discos duros. Y cuando se lanzaba una nueva versión de Microsoft Office, los clientes debían comprarla e instalarla manualmente en sus computadoras.\r\n\r\nEn cambio, Google Docs es una suite de oficina en la nube. Cuando un usuario visita docs.google.com, obtiene automáticamente la última versión de Google Docs. Debido a que sus archivos se almacenan en los servidores de Google, están disponibles desde cualquier computadora. Mejor aún, no tiene que preocuparse por perder sus archivos en un fallo del disco duro. (Microsoft ahora tiene su propia suite de oficina en la nube llamada Office 365).\r\n\r\nHay muchos otros ejemplos. Gmail y Hotmail son servicios de correo electrónico en la nube que han reemplazado en gran medida a los clientes de correo electrónico de escritorio como Outlook. Dropbox es un servicio de informática en la nube que sincroniza automáticamente datos entre dispositivos, evitando que las personas tengan que llevar archivos en disquetes. iCloud de Apple copia automáticamente la música y otros archivos de los usuarios desde su computadora de escritorio a sus dispositivos móviles, evitando que los usuarios tengan que sincronizar a través de una conexión USB.\r\n\r\nLa informática en la nube también está teniendo un gran impacto en las empresas. En la década de 1990, las empresas que querían crear un sitio web necesitaban comprar y operar sus propios servidores. Pero en 2006, Amazon.com lanzó Amazon Web Services, que permite a los clientes alquilar servidores por hora. Esto ha reducido la barrera de entrada para la creación de sitios web y ha facilitado que los sitios amplíen rápidamente su capacidad a medida que se vuelven más populares.\r\n\r\n#### ¿Qué es un paquete?\r\nUn paquete es la unidad básica de información transmitida por internet. Dividir la información en piezas pequeñas y digeribles permite utilizar de manera más eficiente la capacidad de la red.\r\n\r\nUn paquete consta de dos partes. El [encabezado](https://en.wikipedia.org/wiki/IPv4#Header) contiene información que ayuda al paquete a llegar a su destino, incluida la longitud del paquete, su origen y destino, y un valor de suma de comprobación que ayuda al destinatario a detectar si un paquete se dañó en tránsito. Después del encabezado viene la información real. Un paquete puede contener hasta 64 kilobytes de datos, que es aproximadamente 20 páginas de texto sin formato.\r\n\r\nSi los enrutadores de internet experimentan congestión u otros problemas técnicos, se les permite lidiar con ello simplemente descartando paquetes. Es responsabilidad de la computadora emisora detectar que un paquete no llegó a su destino y enviar otra copia. Este enfoque puede parecer contraintuitivo, pero simplifica la infraestructura central de internet, lo que lleva a un rendimiento más alto a un menor costo.\r\n\r\n#### ¿Qué es la World Wide Web?\r\n\r\nLa World Wide Web (WWW) es una forma popular de publicar información en internet. La web fue creada por [Timothy Berners-Lee](https://en.wikipedia.org/wiki/Tim_Berners-Lee), un programador de computadoras en la organización europea de investigación científica [CERN](http://home.web.cern.ch/), en 1991. Ofrecía una interfaz más potente y fácil de usar que otras aplicaciones de internet. La web admitía hipervínculos, lo que permitía a los usuarios navegar de un documento a otro con un solo clic.\r\n\r\nCon el tiempo, la web se volvió cada vez más sofisticada, admitiendo imágenes, audio, video y contenido interactivo. A mediados de la década de 1990, empresas como Yahoo y Amazon.com comenzaron a construir negocios rentables basados en la web. En la década de 2000, se crearon aplicaciones basadas en la web con todas las funciones, como Yahoo Maps y Google Docs.\r\n\r\nEn 1994, Berners-Lee creó el [World Wide Web Consortium](http://www.w3.org/) (W3C) para ser la organización oficial de estándares de la web. Todavía es el director del W3C y sigue supervisando el desarrollo de estándares web. Sin embargo, la web es una plataforma abierta y el W3C no puede obligar a nadie a adoptar sus recomendaciones. En la práctica, las organizaciones con más influencia sobre la web son Microsoft, Google, Apple y Mozilla, las empresas que producen los principales navegadores web. Cualquier tecnología adoptada por estos cuatro se convierte en estándares web de facto.\r\n\r\nLa web se ha vuelto tan popular que muchas personas ahora la consideran sinónimo de internet mismo. Pero técnicamente, la web es solo una de las muchas aplicaciones de internet. Otras aplicaciones incluyen correo electrónico y BitTorrent.\r\n\r\n#### ¿Qué es un navegador web?\r\nUn navegador web es un programa de computadora que permite a los usuarios descargar y ver sitios web. Los navegadores web están disponibles para computadoras de escritorio, tabletas y teléfonos móviles.\r\n\r\nEl primer navegador ampliamente utilizado fue [Mosaic](https://en.wikipedia.org/wiki/Mosaic_(web_browser)), creado por investigadores de la Universidad de Illinois. El equipo de Mosaic se trasladó a California para fundar [Netscape](https://en.wikipedia.org/wiki/Netscape), que construyó el primer navegador web comercialmente exitoso en 1994.\r\n\r\nLa popularidad de Netscape fue pronto eclipsada por [Internet Explorer](http://windows.microsoft.com/en-us/internet-explorer/download-ie) de Microsoft, pero una versión de código abierto del navegador de Netscape se convirtió en el moderno navegador [Firefox](http://www.mozilla.org/en-US/firefox/new/). Apple lanzó su navegador [Safari](https://www.apple.com/safari/) en 2003 y Google lanzó un navegador llamado [Chrome](https://www.google.com/intl/en/chrome/browser/) en 2008. Para 2015, Chrome se había convertido en el [navegador web más popular](https://en.wikipedia.org/wiki/Usage_share_of_web_browsers) con una cuota de mercado de alrededor del 50 por ciento. Internet Explorer, Firefox y Safari también tenían una cuota de mercado significativa.\r\n\r\n#### ¿Qué es SSL?\r\n\r\nSSL, abreviatura de Secure Sockets Layer, es una familia de tecnologías de cifrado que permite a los usuarios de la web proteger la privacidad de la información que transmiten por internet.\r\n\r\nCuando visitas un sitio web seguro como Gmail.com, verás un candado junto a la URL, indicando que tus comunicaciones con el sitio están cifradas. Así es como se ve en el navegador Google Chrome:\r\n\r\n![Google's Chrome Browser](https://cdn3.vox-cdn.com/assets/4269173/Screen_Shot_2014-04-08_at_10.55.39_AM.png)\r\n\r\nEse candado debería señalar que terceros no podrán leer ninguna información que envíes o recibas. En el fondo, SSL logra esto transformando tus datos en un mensaje codificado que solo el destinatario sabe descifrar. Si una parte malintencionada está escuchando la conversación, solo verá una cadena aparentemente aleatoria de caracteres, no el contenido de tus correos electrónicos, publicaciones de Facebook, números de tarjetas de crédito u otra información privada.\r\n\r\nSSL fue introducido por Netscape en 1994. En sus primeros años, solo se usaba en algunos tipos de sitios web, como los sitios de banca en línea. A principios de la década de 2010, Google, Yahoo y Facebook utilizaban todos cifrado SSL para sus sitios web y servicios en línea. Más recientemente, ha habido un movimiento hacia hacer que el uso de SSL sea universal. En 2015, Mozilla anunció que las versiones futuras del navegador Firefox tratarían la falta de cifrado SSL como una falla de seguridad, como una forma de alentar a todos los sitios web a actualizar. Google está considerando [tomar la misma medida](https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure) con Chrome.\r\n\r\n#### ¿Qué es el sistema de nombres de dominio?\r\n\r\nEl Sistema de Nombres de Dominio (DNS) es la razón por la cual puedes acceder a Vox escribiendo vox.com en tu navegador en lugar de una dirección numérica difícil de recordar, como 216.146.46.10.\r\n\r\nEl sistema es jerárquico. Por ejemplo, el dominio .com es administrado por una empresa llamada Verisign. Verisign asigna subdominios como google.com y vox.com. Los propietarios de estos dominios de segundo nivel, a su vez, pueden crear subdominios como mail.google.com y maps.google.com.\r\n\r\nDado que los sitios web populares utilizan nombres de dominio para identificarse ante el público, la seguridad del DNS se ha convertido en una preocupación creciente. Tanto criminales como espías gubernamentales han intentado comprometer el DNS para suplantar a sitios web populares como facebook.com y gmail.com e interceptar sus comunicaciones privadas. Un estándar llamado [DNSSEC](https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions) busca reforzar la seguridad del DNS con cifrado, pero pocas personas lo han adoptado.\r\n\r\n#### ¿Quién decide qué nombres de dominio existen y quién los obtiene?\r\n\r\nEl sistema de nombres de dominio es administrado por la [Corporación de Internet para la Asignación de Nombres y Números]((https://www.icann.org/)) (ICANN), una organización sin fines de lucro con sede en California. ICANN fue fundada en 1998 y recibió la autoridad sobre el DNS del Departamento de Comercio de EE. UU., aunque ha afirmado cada vez más su independencia del gobierno estadounidense.\r\n\r\nHay dos tipos de nombres de dominio. El primero son los dominios de nivel superior genéricos (gTLD), como .com, .edu, .org y .gov. Debido a que internet se originó en Estados Unidos, estos dominios tienden a ser más populares allí. La autoridad sobre estos dominios generalmente se delega a organizaciones privadas.\r\n\r\nTambién existen los dominios de nivel superior de código de país (ccTLD). Cada país en el mundo tiene su propio código de 2 letras. Por ejemplo, el ccTLD para Estados Unidos es .us, el de Gran Bretaña es .uk y el de China es .cn. Estos dominios son administrados por autoridades en cada país. Algunos ccTLD, como .tv (para la isla de Tuvalu) y .io (el Territorio Británico del Océano Índico), se han vuelto populares para su uso fuera de sus países de origen.\r\n\r\nEn 2011, ICANN [votó](http://arstechnica.com/business/2011/06/icann-approves-plan-to-vastly-expand-top-level-domains/) para facilitar la creación de nuevos gTLD. Como resultado, puede haber docenas o incluso cientos de nuevos dominios en los próximos años.\r\n\r\n## Introducción a internet\r\n\r\n\u003CRecommend />\r\n\r\n> [Recurso Original](https://roadmap.sh/guides/what-is-internet) (Version - Diciembre 20, 2023) | [Kamran Ahmed](https://twitter.com/kamrify)\r\n\r\n> Aprenda los conceptos básicos de Internet y todo lo relacionado con esta breve serie de videos. Los videos están en inglés, pero cuentan con subtítulos en español\r\n\r\nDado el crecimiento explosivo de las aplicaciones basadas en la web, cada desarrollador puede beneficiarse al entender cómo funciona Internet. A través de este artículo y su serie introductoria de videos cortos sobre Internet de [code.org](https://code.org), aprenderás los conceptos básicos de Internet y su funcionamiento. Después de revisar este artículo, podrás responder a las siguientes preguntas:\r\n\r\n* ¿Qué es Internet?\r\n* ¿Cómo se mueve la información en Internet?\r\n* ¿Cómo se comunican las redes entre sí y cuáles son los protocolos involucrados?\r\n* ¿Cuál es la relación entre paquetes, enrutadores y confiabilidad?\r\n* HTTP y HTML: ¿Cómo estás viendo esta página web en tu navegador?\r\n* ¿Cómo se asegura la transferencia de información en Internet?\r\n* ¿Qué es la ciberseguridad y cuáles son algunos delitos comunes en Internet?\r\n\r\n#### ¿Qué es Internet?\r\n\r\nInternet es una red global de computadoras interconectadas que se comunican entre sí a través de un conjunto estandarizado de protocolos.\r\n\r\nEn el siguiente video, Vint Cerf, uno de los \"padres de Internet\", explica la historia de cómo funciona Internet y cómo ninguna persona u organización realmente está a cargo de ella.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Dxcc6ycZ73M?si=YnOiS8TJEmx1Uzhk&cc_load_policy=1&cc_lang_pref=e\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### Wires, Cables, y Wi-Fi\r\n\r\nLa información en Internet se mueve de una computadora a otra en forma de bits a través de varios medios, que incluyen cables Ethernet, cables de fibra óptica y señales inalámbricas (es decir, ondas de radio).\r\n\r\nEn el video vinculado a continuación, aprenderás sobre los diferentes medios para la transferencia de datos en Internet y las ventajas y desventajas de cada uno.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZhEf7e4kopM?si=HUEergWBxwbomqw8&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### IP Addresses y DNS\r\n\r\nAhora que conoces el medio físico para la transferencia de datos a través de Internet, es hora de aprender sobre los protocolos involucrados. ¿Cómo atraviesa la información de una computadora a otra en esta enorme red global de computadoras?\r\n\r\nEn el siguiente video, obtendrás una breve introducción a IP, DNS y cómo estos protocolos hacen que funcione Internet.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5o8CwafCxnU?si=M0yqb4EvTI7_gF9c&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### Packets, Routing, and Reliability\r\n\r\nLa transferencia de información en Internet de una computadora a otra no necesita seguir un camino fijo; de hecho, puede cambiar de ruta durante la transferencia. Esta transferencia de información se realiza en forma de paquetes y estos paquetes pueden seguir rutas diferentes según ciertos factores.\r\n\r\nEn este video, aprenderás cómo se enrutan los paquetes de información de una computadora a otra para llegar al destino.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AYdF7b3nMto?si=pIh4pGvBP9y6mqls&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### HTTP and HTML\r\n\r\nHTTP es el protocolo estándar mediante el cual se transfieren las páginas web a través de Internet. El siguiente video es una breve introducción a HTTP y cómo los navegadores web cargan sitios web para ti.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kBXQZMmiA4s?si=n69s8c3mr0kSRvOO&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### Encryption and Public Keys\r\n\r\nLa criptografía es lo que mantiene segura nuestra comunicación en Internet. En este breve video, aprenderás los conceptos básicos de la criptografía, SSL/TLS y cómo ayudan a asegurar la comunicación en Internet.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZghMPWGXexs?si=yxVG9Lc09AoAqrei&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n#### Cybersecurity and Crime\r\n\r\nCiberseguridad se refiere a las medidas de protección contra la actividad criminal llevada a cabo a través de redes, dispositivos tecnológicos y el internet. En este video, aprenderás sobre los conceptos básicos de la ciberseguridad y los delitos cibernéticos comunes.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AuYNXgO_f3Y?si=UDyK5cOfqutBpvxu&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\nY eso concluye este artículo. Para aprender más sobre Internet, [Kamran Ahmed](https://twitter.com/kamrify) tiene una guía interesante sobre [DNS: Cómo se encuentra un sitio web en Internet](/recursos/dns-in-one-picture). Además, revisa los episodios de [howdns.works](https://howdns.works/es) y lee esta [introducción animada a DNS sobre HTTPS](https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/).","src/content/blog/internet/como-funciona-internet.mdx","6a3e817420083a1c","internet/como-funciona-internet.mdx","redes-protocolos/osi-tcp-ip",{"id":602,"data":604,"body":609,"filePath":610,"digest":611,"legacyId":612,"deferredRender":25},{"rutas":605,"title":606,"description":16,"lang":17,"dir":18,"pubDate":607,"updatedDate":608},[573],"Modelo OSI y TCP/IP",["Date","2025-05-02T07:00:00.000Z"],["Date","2025-05-02T07:00:00.000Z"],"- [Modelo OSI](https://www.cloudflare.com/es-es/learning/ddos/glossary/open-systems-interconnection-model-osi/)","src/content/blog/redes-protocolos/osi-tcp-ip.mdx","bb339013b0d74acc","redes-protocolos/osi-tcp-ip.mdx","scaling-db",{"id":613,"data":615,"body":620,"filePath":621,"digest":622,"legacyId":623,"deferredRender":25},{"rutas":616,"title":617,"description":16,"lang":17,"dir":18,"pubDate":618,"updatedDate":619},[15],"Escalando Bases de Datos",["Date","2023-12-22T07:00:00.000Z"],["Date","2023-12-22T07:00:00.000Z"],"import Subtitles from '@Components/signals/Subtitles.astro'\r\n\r\nEscalar bases de datos es el proceso de adaptarlas para manejar más datos y usuarios de manera eficiente. Se logra ya sea mejorando el hardware existente (escalamiento vertical) o agregando más servidores (escalamiento horizontal). Técnicas como el particionamiento (sharding) y la replicación son clave. Esto asegura que las bases de datos sigan siendo un recurso robusto a medida que crecen.\r\n\r\n* [Escalabilidad de Bases de Datos](https://www.grapheverywhere.com/escalabilidad-de-bases-de-datos/)\r\n\r\n## Índices de bases de datos\r\n\r\nUn índice es una estructura de datos que construyes y asignas encima de una tabla existente que básicamente examina tu tabla y trata de analizar y resumir para que pueda crear accesos directos.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PBB3mzbyPL4?si=wGsrY9x87xwFg5eQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n* [Wikipedia](https://es.wikipedia.org/wiki/Índice_(base_de_datos))\r\n\r\n## Replicación de datos\r\n\r\nLa replicación de datos es el proceso mediante el cual los datos que residen en un servidor físico/virtual o instancia en la nube (instancia principal) se replican o copian continuamente en un servidor secundario o instancia en la nube (instancia de respaldo). Las organizaciones replican datos para respaldar la alta disponibilidad, la copia de seguridad y/o la recuperación ante desastres.\r\n\r\n\u003CSubtitles />\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/fUrKt-AQYtE?si=aVy52CXN2fdCS7Wb\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Estrategias de fragmentación\r\n\r\nLa estrategia de shard (fragmentación) es una técnica para dividir un conjunto de datos grande en fragmentos más pequeños (shards lógicos), distribuyendo estos fragmentos en diferentes máquinas/nodos de base de datos para distribuir la carga de tráfico. Es un buen mecanismo para mejorar la escalabilidad de una aplicación. Muchas bases de datos admiten sharding, pero no todas.\r\n\r\n* [Geeks for Geeks - (Hay una opción para traducir en el menú)](https://www.geeksforgeeks.org/database-sharding-a-system-design-concept/)\r\n* [Wikipedia](https://es.wikipedia.org/wiki/Shard_(arquitectura_de_base_de_datos))\r\n\r\n## Teorema CAP\r\n\r\nEl teorema CAP es un acrónimo que significa Consistencia, Disponibilidad y Tolerancia a particiones (Consistency, Availability and Partition Tolerance). Según el teorema CAP, cualquier sistema distribuido solo puede garantizar dos de las tres propiedades en cualquier momento. No se pueden garantizar las tres propiedades al mismo tiempo.\r\n\r\n* [Wikipedia](https://es.wikipedia.org/wiki/Teorema_CAP)\r\n* [IBM](https://www.ibm.com/mx-es/topics/cap-theorem)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ydv-y_oH_CY?si=DE6t80O7bmlIO0_T\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/scaling-db/index.mdx","ea1f2baf4f5cd1e4","scaling-db/index.mdx","testing",{"id":624,"data":626,"body":631,"filePath":632,"digest":633,"legacyId":634,"deferredRender":25},{"rutas":627,"title":628,"description":16,"lang":17,"dir":18,"pubDate":629,"updatedDate":630},[15],"Pruebas",["Date","2023-12-21T07:00:00.000Z"],["Date","2023-12-21T07:00:00.000Z"],"import Subtitles from '@Components/signals/Subtitles.astro'\r\n\r\nUna clave para construir software que cumpla con los requisitos sin defectos es la prueba. Las pruebas de software ayudan a los desarrolladores a saber que están construyendo el software correcto. Cuando las pruebas se ejecutan como parte del proceso de desarrollo (a menudo con herramientas de integración continua), generan confianza y previenen regresiones en el código.\r\n\r\n## Recursos\r\n\r\n* [¿Qué es una prueba de software?](https://www.ibm.com/mx-es/topics/software-testing)\r\n* [¿Qué es la Pirámide de Pruebas?](https://medium.com/nicasource/qué-es-la-pirámide-de-pruebas-6ac4356c963f)\r\n\r\n## Pruebas de integración\r\n\r\nLas pruebas de integración son una categoría amplia de pruebas en las que varios módulos de software se integran y prueban como un grupo. Están destinadas a probar la interacción entre varios servicios, recursos o módulos. Por ejemplo, la interacción de una API con un servicio backend, o un servicio con una base de datos.\r\n\r\n* [¿Qué son las pruebas de integración?](https://www.zaptest.com/es/que-son-las-pruebas-de-integracion-profundizacion-en-los-tipos-el-proceso-y-la-aplicacion)\r\n* [Integrar y probar](https://www.ibm.com/docs/es/urbancode-release/6.1.0?topic=releases-integrate-test)\r\n\r\n\u003CSubtitles/>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QYCaaNz8emY?si=ku1xeIyFCMRwN33n\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Pruebas unitarias\r\n\r\nLas pruebas unitarias son aquellas en las que se prueban unidades individuales (módulos, funciones/métodos, rutinas, etc.) de software para asegurar su corrección. Estas pruebas de bajo nivel garantizan que los componentes más pequeños sean funcionalmente sólidos, aliviando la carga de las pruebas de nivel superior. Por lo general, un desarrollador escribe estas pruebas durante el proceso de desarrollo y se ejecutan como pruebas automatizadas.\r\n\r\n* [¿Qué son las pruebas unitarias?](https://aws.amazon.com/es/what-is/unit-testing/#:~:text=Una%20prueba%20unitaria%20es%20un,la%20lógica%20teórica%20del%20desarrollador.)\r\n\r\n\u003CSubtitles/>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWtxEDE1IR4?si=7a0G6jWrO1kGCGTA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Pruebas funcionales\r\n\r\nLas pruebas funcionales son aquellas en las que se prueba el software para asegurar que se cumplan los requisitos funcionales. Por lo general, es una forma de prueba de caja negra en la que el probador no tiene comprensión del código fuente; las pruebas se realizan proporcionando entrada y comparando la salida esperada/real. Contrasta con las pruebas no funcionales, que incluyen pruebas de rendimiento, carga, escalabilidad y penetración.\r\n\r\n* [¿Qué son las pruebas funcionales?](https://www.zaptest.com/es/que-son-las-pruebas-funcionales-tipos-ejemplos-lista-de-comprobacion-y-aplicacion)\r\n\r\n\u003CSubtitles/>\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/j_79AXkG4PY?si=NILhAzKIMmS1aizy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/testing/index.mdx","35e1c2455bd28237","testing/index.mdx","seguridad-web",{"id":635,"data":637,"body":642,"filePath":643,"digest":644,"rendered":645,"legacyId":691},{"rutas":638,"title":639,"description":16,"lang":17,"dir":18,"pubDate":640,"updatedDate":641},[15],"Conocimientos de seguridad web",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"La seguridad web hace referencia a las medidas de protección adoptadas por los desarrolladores para proteger las aplicaciones web de las amenazas que podrían afectar a la empresa.\r\n\r\n## Algoritmos hash\r\n\r\n### MD5\r\nMD5 (Message-Digest Algorithm 5) es una función hash cuyo uso se desaconseja actualmente debido a sus numerosas vulnerabilidades. Se sigue utilizando como suma de comprobación para verificar la integridad de los datos.\r\n\r\n### Familia SHA\r\nSHA (Secure Hash Algorithms) es una familia de funciones hash criptográficas creada por el NIST (National Institute of Standards and Technology). La familia incluye:\r\n\r\n* SHA-0: Publicado en 1993, es el primer algoritmo de la familia. Poco después de su lanzamiento, dejó de utilizarse debido a un fallo importante no revelado.\r\n* SHA-1: Creado para sustituir a SHA-0 y que se parece a MD5, este algoritmo se considera inseguro desde 2010.\r\n* SHA-2: No es un algoritmo, sino un conjunto de ellos, siendo SHA-256 y SHA-512 los más populares. SHA-2 sigue siendo seguro y ampliamente utilizado.\r\n* SHA-3: Nacido en una competición, es el miembro más nuevo de la familia. SHA-3 es muy seguro y no presenta los mismos defectos de diseño que sus hermanos.\r\n\r\n### Scrypt\r\nScrypt (pronunciado \"ess crypt\") es una función de hash de contraseñas (como bcrypt). Está diseñado para utilizar mucho hardware, lo que dificulta los ataques de fuerza bruta. Scrypt se utiliza principalmente como algoritmo de prueba de trabajo para criptomonedas.\r\n\r\n### Bcrypt\r\nbcrypt es una función de hash de contraseñas, que ha demostrado ser fiable y segura desde su lanzamiento en 1999. Se ha implementado en los lenguajes de programación más utilizados.\r\n\r\n## [Buenas prácticas de seguridad en APIs](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis)\r\n\r\n### HTTPS\r\nHTTPS es una forma segura de enviar datos entre un servidor web y un navegador.\r\n\r\nUna comunicación a través de HTTPS comienza con la fase de \"handshake\", durante la cual el servidor y el cliente acuerdan cómo encriptar la comunicación, en concreto eligen un algoritmo de encriptación y una clave secreta. Tras el apretón de manos, toda la comunicación entre el servidor y el cliente se cifrará utilizando el algoritmo y la clave acordados.\r\n\r\nLa fase de \"apretón de manos\" utiliza un tipo particular de criptografía, llamada criptografía asimétrica, para comunicarse de forma segura aunque el cliente y el servidor aún no hayan acordado una clave secreta. Después de la fase de apretón de manos, la comunicación HTTPS se cifra con criptografía simétrica, que es mucho más eficiente pero requiere que tanto el cliente como el servidor conozcan la clave secreta.\r\n\r\n### Riesgos de seguridad OWASP\r\nOWASP o Open Web Application Security Project es una comunidad en línea que produce artículos, metodologías, documentación, herramientas y tecnologías de libre acceso en el campo de la seguridad de las aplicaciones web.\r\n\r\n### Cors\r\nCross-Origin Resource Sharing (CORS) es un mecanismo basado en cabeceras HTTP que permite a un servidor indicar cualquier origen (dominio, esquema o puerto) distinto del suyo desde el que un navegador debe permitir la carga de recursos.\r\n\r\n### SSL/TLS\r\nSecure Sockets Layer (SSL) y Transport Layer Security (TLS) son protocolos criptográficos utilizados para proporcionar seguridad en las comunicaciones por Internet. Estos protocolos cifran los datos que se transmiten a través de la red, de modo que cualquiera que intente interceptar los paquetes no podrá interpretar los datos. Una diferencia que es importante conocer es que SSL está ahora obsoleto debido a fallos de seguridad, y la mayoría de los navegadores web modernos ya no lo soportan. Pero TLS sigue siendo seguro y ampliamente soportado, por lo que es preferible utilizar TLS.\r\n\r\n### Content Security Policy\r\nContent Security Policy es un estándar de seguridad informática introducido para prevenir ataques de cross-site scripting, clickjacking y otros ataques de inyección de código resultantes de la ejecución de contenido malicioso en el contexto de una página web de confianza.\r\n\r\n### Seguridad del servidor\r\nInfórmate sobre la seguridad de tu servidor y cómo protegerlo. Estos son algunos de los temas que me vienen a la cabeza:\r\n\r\n* Utiliza un cortafuegos: Una de las formas más eficaces de proteger un servidor es utilizar un cortafuegos para bloquear todo el tráfico entrante innecesario. Para ello, puedes utilizar iptables en sistemas Linux o un cortafuegos de hardware.\r\n* Cierre los puertos innecesarios: Asegúrate de cerrar todos los puertos que no sean necesarios para que tu servidor funcione correctamente. Esto reducirá la superficie de ataque de tu servidor y dificultará el acceso a los atacantes.\r\n* Utilice contraseñas seguras: Utilice contraseñas largas y complejas para todas sus cuentas, y considere la posibilidad de utilizar un gestor de contraseñas para almacenarlas de forma segura.\r\n* Mantén tu sistema actualizado: Asegúrate de mantener tu sistema operativo y software actualizados con los últimos parches de seguridad. Esto ayudará a evitar que los atacantes se aprovechen de las vulnerabilidades.\r\n* Utilice SSL/TLS para la comunicación: Utilice Secure Sockets Layer (SSL) o Transport Layer Security (TLS) para cifrar la comunicación entre su servidor y los dispositivos cliente. Esto le ayudará a protegerse contra los ataques de intermediario y otros tipos de ciberamenazas.\r\n* Utilice un sistema de detección de intrusos (IDS): un IDS supervisa el tráfico de la red y le alerta de cualquier actividad sospechosa, lo que puede ayudarle a identificar y responder a tiempo a posibles amenazas.\r\n* Activa la autenticación de dos factores: La autenticación de dos factores añade una capa adicional de seguridad a tus cuentas al requerir una segunda forma de autenticación, como un código enviado a tu teléfono, además de tu contraseña.\r\n\r\nAprenda también sobre OpenSSL y a crear su propia PKI, así como a gestionar certificados, renovaciones y autenticación mutua de clientes con certificados x509.","src/content/blog/seguridad-web/index.md","6e029284a31de534",{"html":646,"metadata":647},"\u003Cp>La seguridad web hace referencia a las medidas de protección adoptadas por los desarrolladores para proteger las aplicaciones web de las amenazas que podrían afectar a la empresa.\u003C/p>\n\u003Ch2 id=\"algoritmos-hash\">Algoritmos hash\u003C/h2>\n\u003Ch3 id=\"md5\">MD5\u003C/h3>\n\u003Cp>MD5 (Message-Digest Algorithm 5) es una función hash cuyo uso se desaconseja actualmente debido a sus numerosas vulnerabilidades. Se sigue utilizando como suma de comprobación para verificar la integridad de los datos.\u003C/p>\n\u003Ch3 id=\"familia-sha\">Familia SHA\u003C/h3>\n\u003Cp>SHA (Secure Hash Algorithms) es una familia de funciones hash criptográficas creada por el NIST (National Institute of Standards and Technology). La familia incluye:\u003C/p>\n\u003Cul>\n\u003Cli>SHA-0: Publicado en 1993, es el primer algoritmo de la familia. Poco después de su lanzamiento, dejó de utilizarse debido a un fallo importante no revelado.\u003C/li>\n\u003Cli>SHA-1: Creado para sustituir a SHA-0 y que se parece a MD5, este algoritmo se considera inseguro desde 2010.\u003C/li>\n\u003Cli>SHA-2: No es un algoritmo, sino un conjunto de ellos, siendo SHA-256 y SHA-512 los más populares. SHA-2 sigue siendo seguro y ampliamente utilizado.\u003C/li>\n\u003Cli>SHA-3: Nacido en una competición, es el miembro más nuevo de la familia. SHA-3 es muy seguro y no presenta los mismos defectos de diseño que sus hermanos.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"scrypt\">Scrypt\u003C/h3>\n\u003Cp>Scrypt (pronunciado “ess crypt”) es una función de hash de contraseñas (como bcrypt). Está diseñado para utilizar mucho hardware, lo que dificulta los ataques de fuerza bruta. Scrypt se utiliza principalmente como algoritmo de prueba de trabajo para criptomonedas.\u003C/p>\n\u003Ch3 id=\"bcrypt\">Bcrypt\u003C/h3>\n\u003Cp>bcrypt es una función de hash de contraseñas, que ha demostrado ser fiable y segura desde su lanzamiento en 1999. Se ha implementado en los lenguajes de programación más utilizados.\u003C/p>\n\u003Ch2 id=\"buenas-prácticas-de-seguridad-en-apis\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis\">Buenas prácticas de seguridad en APIs\u003C/a>\u003C/h2>\n\u003Ch3 id=\"https\">HTTPS\u003C/h3>\n\u003Cp>HTTPS es una forma segura de enviar datos entre un servidor web y un navegador.\u003C/p>\n\u003Cp>Una comunicación a través de HTTPS comienza con la fase de “handshake”, durante la cual el servidor y el cliente acuerdan cómo encriptar la comunicación, en concreto eligen un algoritmo de encriptación y una clave secreta. Tras el apretón de manos, toda la comunicación entre el servidor y el cliente se cifrará utilizando el algoritmo y la clave acordados.\u003C/p>\n\u003Cp>La fase de “apretón de manos” utiliza un tipo particular de criptografía, llamada criptografía asimétrica, para comunicarse de forma segura aunque el cliente y el servidor aún no hayan acordado una clave secreta. Después de la fase de apretón de manos, la comunicación HTTPS se cifra con criptografía simétrica, que es mucho más eficiente pero requiere que tanto el cliente como el servidor conozcan la clave secreta.\u003C/p>\n\u003Ch3 id=\"riesgos-de-seguridad-owasp\">Riesgos de seguridad OWASP\u003C/h3>\n\u003Cp>OWASP o Open Web Application Security Project es una comunidad en línea que produce artículos, metodologías, documentación, herramientas y tecnologías de libre acceso en el campo de la seguridad de las aplicaciones web.\u003C/p>\n\u003Ch3 id=\"cors\">Cors\u003C/h3>\n\u003Cp>Cross-Origin Resource Sharing (CORS) es un mecanismo basado en cabeceras HTTP que permite a un servidor indicar cualquier origen (dominio, esquema o puerto) distinto del suyo desde el que un navegador debe permitir la carga de recursos.\u003C/p>\n\u003Ch3 id=\"ssltls\">SSL/TLS\u003C/h3>\n\u003Cp>Secure Sockets Layer (SSL) y Transport Layer Security (TLS) son protocolos criptográficos utilizados para proporcionar seguridad en las comunicaciones por Internet. Estos protocolos cifran los datos que se transmiten a través de la red, de modo que cualquiera que intente interceptar los paquetes no podrá interpretar los datos. Una diferencia que es importante conocer es que SSL está ahora obsoleto debido a fallos de seguridad, y la mayoría de los navegadores web modernos ya no lo soportan. Pero TLS sigue siendo seguro y ampliamente soportado, por lo que es preferible utilizar TLS.\u003C/p>\n\u003Ch3 id=\"content-security-policy\">Content Security Policy\u003C/h3>\n\u003Cp>Content Security Policy es un estándar de seguridad informática introducido para prevenir ataques de cross-site scripting, clickjacking y otros ataques de inyección de código resultantes de la ejecución de contenido malicioso en el contexto de una página web de confianza.\u003C/p>\n\u003Ch3 id=\"seguridad-del-servidor\">Seguridad del servidor\u003C/h3>\n\u003Cp>Infórmate sobre la seguridad de tu servidor y cómo protegerlo. Estos son algunos de los temas que me vienen a la cabeza:\u003C/p>\n\u003Cul>\n\u003Cli>Utiliza un cortafuegos: Una de las formas más eficaces de proteger un servidor es utilizar un cortafuegos para bloquear todo el tráfico entrante innecesario. Para ello, puedes utilizar iptables en sistemas Linux o un cortafuegos de hardware.\u003C/li>\n\u003Cli>Cierre los puertos innecesarios: Asegúrate de cerrar todos los puertos que no sean necesarios para que tu servidor funcione correctamente. Esto reducirá la superficie de ataque de tu servidor y dificultará el acceso a los atacantes.\u003C/li>\n\u003Cli>Utilice contraseñas seguras: Utilice contraseñas largas y complejas para todas sus cuentas, y considere la posibilidad de utilizar un gestor de contraseñas para almacenarlas de forma segura.\u003C/li>\n\u003Cli>Mantén tu sistema actualizado: Asegúrate de mantener tu sistema operativo y software actualizados con los últimos parches de seguridad. Esto ayudará a evitar que los atacantes se aprovechen de las vulnerabilidades.\u003C/li>\n\u003Cli>Utilice SSL/TLS para la comunicación: Utilice Secure Sockets Layer (SSL) o Transport Layer Security (TLS) para cifrar la comunicación entre su servidor y los dispositivos cliente. Esto le ayudará a protegerse contra los ataques de intermediario y otros tipos de ciberamenazas.\u003C/li>\n\u003Cli>Utilice un sistema de detección de intrusos (IDS): un IDS supervisa el tráfico de la red y le alerta de cualquier actividad sospechosa, lo que puede ayudarle a identificar y responder a tiempo a posibles amenazas.\u003C/li>\n\u003Cli>Activa la autenticación de dos factores: La autenticación de dos factores añade una capa adicional de seguridad a tus cuentas al requerir una segunda forma de autenticación, como un código enviado a tu teléfono, además de tu contraseña.\u003C/li>\n\u003C/ul>\n\u003Cp>Aprenda también sobre OpenSSL y a crear su propia PKI, así como a gestionar certificados, renovaciones y autenticación mutua de clientes con certificados x509.\u003C/p>",{"headings":648,"localImagePaths":685,"remoteImagePaths":686,"frontmatter":687,"imagePaths":690},[649,652,655,658,661,664,667,670,673,676,679,682],{"depth":76,"slug":650,"text":651},"algoritmos-hash","Algoritmos hash",{"depth":211,"slug":653,"text":654},"md5","MD5",{"depth":211,"slug":656,"text":657},"familia-sha","Familia SHA",{"depth":211,"slug":659,"text":660},"scrypt","Scrypt",{"depth":211,"slug":662,"text":663},"bcrypt","Bcrypt",{"depth":76,"slug":665,"text":666},"buenas-prácticas-de-seguridad-en-apis","Buenas prácticas de seguridad en APIs",{"depth":211,"slug":668,"text":669},"https","HTTPS",{"depth":211,"slug":671,"text":672},"riesgos-de-seguridad-owasp","Riesgos de seguridad OWASP",{"depth":211,"slug":674,"text":675},"cors","Cors",{"depth":211,"slug":677,"text":678},"ssltls","SSL/TLS",{"depth":211,"slug":680,"text":681},"content-security-policy","Content Security Policy",{"depth":211,"slug":683,"text":684},"seguridad-del-servidor","Seguridad del servidor",[],[],{"rutas":688,"title":639,"description":16,"pubDate":151,"updatedDate":151,"link":689,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web",[],"seguridad-web/index.md","servicio-alojamiento-repo",{"id":692,"data":694,"body":699,"filePath":700,"digest":701,"rendered":702,"legacyId":724},{"rutas":695,"title":696,"description":16,"lang":17,"dir":18,"pubDate":697,"updatedDate":698},[15],"Servicios de alojamiento de repos",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Cuando se trabaja en equipo, a menudo se necesita un lugar remoto donde colocar el código para que otros puedan acceder a él, crear sus propias ramas y crear o revisar pull requests. Estos servicios suelen incluir funciones de seguimiento de incidencias, revisión de código e integración continua. Algunas opciones populares son GitHub, GitLab, BitBucket y AWS CodeCommit.\r\n\r\n## GitHub (Recomendado)\r\nGitHub es un proveedor de alojamiento en Internet para el desarrollo de software y el control de versiones mediante Git. Ofrece la funcionalidad de control de versiones distribuidas y gestión de código fuente de Git, además de sus propias características.\r\n\r\n* [Inicio](https://docs.github.com/es/get-started/quickstart)\r\n* [Git Branching](https://learngitbranching.js.org/?locale=es_MX)\r\n\r\n---\r\nActivar subtitulos en español\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w3jLJU7DT5E?si=G1b5BLHXkTLIQK7a&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wpISo9TNjfU?si=64cTlt2YcqRfPAkQ&cc_load_policy=1&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## GitLab\r\nGitLab es un proveedor de alojamiento en Internet para el desarrollo de software y el control de versiones mediante Git. Ofrece la funcionalidad de control de versiones distribuidas y gestión de código fuente de Git, además de sus propias características.\r\n\r\n* [GitLab](https://git-scm.com/book/es/v2/Git-en-el-Servidor-GitLab)\r\n\r\n## Bitbucket\r\nBitbucket es un servicio de alojamiento y repositorio de código fuente basado en Git que es la alternativa de Atlassian a otros productos como GitHub, GitLab, etc.\r\n\r\nBitbucket ofrece opciones de alojamiento a través de Bitbucket Cloud (servidores de Atlassian), Bitbucket Server (local del cliente) o Bitbucket Data Centre (número de servidores en el entorno local o en la nube del cliente).\r\n\r\n* [Breve presentación de BitBucket](https://bitbucket.org/product/es/guides/getting-started/overview#a-brief-overview-of-bitbucket)\r\n* [Aprende a usar Git con Bitbucket Cloud](https://www.atlassian.com/es/git/tutorials/learn-git-with-bitbucket-cloud)\r\n\r\n---\r\n### [Cómo elegir el mejor repositorio de código fuente](https://aulab.es/noticia/24/github-bitbucket-gitlab-las-diferencias)","src/content/blog/servicio-alojamiento-repo/index.md","e89a4351d67d2715",{"html":703,"metadata":704},"\u003Cp>Cuando se trabaja en equipo, a menudo se necesita un lugar remoto donde colocar el código para que otros puedan acceder a él, crear sus propias ramas y crear o revisar pull requests. Estos servicios suelen incluir funciones de seguimiento de incidencias, revisión de código e integración continua. Algunas opciones populares son GitHub, GitLab, BitBucket y AWS CodeCommit.\u003C/p>\n\u003Ch2 id=\"github-recomendado\">GitHub (Recomendado)\u003C/h2>\n\u003Cp>GitHub es un proveedor de alojamiento en Internet para el desarrollo de software y el control de versiones mediante Git. Ofrece la funcionalidad de control de versiones distribuidas y gestión de código fuente de Git, además de sus propias características.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://docs.github.com/es/get-started/quickstart\">Inicio\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learngitbranching.js.org/?locale=es_MX\">Git Branching\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>Activar subtitulos en español\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w3jLJU7DT5E?si=G1b5BLHXkTLIQK7a&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wpISo9TNjfU?si=64cTlt2YcqRfPAkQ&#x26;cc_load_policy=1&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"gitlab\">GitLab\u003C/h2>\n\u003Cp>GitLab es un proveedor de alojamiento en Internet para el desarrollo de software y el control de versiones mediante Git. Ofrece la funcionalidad de control de versiones distribuidas y gestión de código fuente de Git, además de sus propias características.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://git-scm.com/book/es/v2/Git-en-el-Servidor-GitLab\">GitLab\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"bitbucket\">Bitbucket\u003C/h2>\n\u003Cp>Bitbucket es un servicio de alojamiento y repositorio de código fuente basado en Git que es la alternativa de Atlassian a otros productos como GitHub, GitLab, etc.\u003C/p>\n\u003Cp>Bitbucket ofrece opciones de alojamiento a través de Bitbucket Cloud (servidores de Atlassian), Bitbucket Server (local del cliente) o Bitbucket Data Centre (número de servidores en el entorno local o en la nube del cliente).\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://bitbucket.org/product/es/guides/getting-started/overview#a-brief-overview-of-bitbucket\">Breve presentación de BitBucket\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.atlassian.com/es/git/tutorials/learn-git-with-bitbucket-cloud\">Aprende a usar Git con Bitbucket Cloud\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Ch3 id=\"cómo-elegir-el-mejor-repositorio-de-código-fuente\">\u003Ca href=\"https://aulab.es/noticia/24/github-bitbucket-gitlab-las-diferencias\">Cómo elegir el mejor repositorio de código fuente\u003C/a>\u003C/h3>",{"headings":705,"localImagePaths":718,"remoteImagePaths":719,"frontmatter":720,"imagePaths":723},[706,709,712,715],{"depth":76,"slug":707,"text":708},"github-recomendado","GitHub (Recomendado)",{"depth":76,"slug":710,"text":711},"gitlab","GitLab",{"depth":76,"slug":713,"text":714},"bitbucket","Bitbucket",{"depth":211,"slug":716,"text":717},"cómo-elegir-el-mejor-repositorio-de-código-fuente","Cómo elegir el mejor repositorio de código fuente",[],[],{"rutas":721,"title":696,"description":16,"pubDate":151,"updatedDate":151,"link":722,"lastModified":152},[15],"/blog/Backend/servicio-alojamiento-repo",[],"servicio-alojamiento-repo/index.md","libros/the-c-programming-language/inicio",{"id":725,"data":727,"body":734,"filePath":735,"digest":736,"legacyId":737,"deferredRender":25},{"rutas":728,"title":730,"description":731,"lang":17,"dir":18,"pubDate":732,"updatedDate":733},[729],"The_C_Programming_Language","The C Programming Language - 2nd Edition","Inicio",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"\u003Cimg src=\"/images/the-c-programming-language/cover.jpg\" width=\"300\" />\r\n\r\n-----\r\n\r\n**[Compra el Libro](https://www.goodreads.com/book/515601.The_C_Programming_Language/get_a_copy)**\r\n\r\n-----\r\n\r\nTabla de Contenidos\r\n\r\n* [Prefacio](./prefacio)\r\n* [Prefacio a la primera edición](./prefacio1ed)\r\n* [Introducción](./introduccion)\r\n* Capítulo 1: Introducción general\r\n* Capítulo 2: Tipos, operadores y expresiones\r\n* Capítulo 3: Control de flujo\r\n* Capítulo 4: Funciones y la estructura del programa\r\n* Capítulo 5: Apuntadores y arreglos\r\n* Capítulo 6: Estructuras\r\n* Capítulo 7: Entrada y Salida\r\n* Capítulo 8: La interfaz del sistema UNIX\r\n* Apéndice A: Manual de Referencia\r\n* Apéndice B: Biblioteca estándar\r\n* Apéndice C: Resumen de modificaciones\r\n* Indice","src/content/blog/libros/the-c-programming-language/inicio.mdx","f3b1b8ee1ca54b5e","libros/the-c-programming-language/inicio.mdx","libros/the-c-programming-language/introduccion",{"id":738,"data":740,"filePath":746,"digest":747,"rendered":748,"legacyId":757},{"rutas":741,"title":742,"description":16,"lang":17,"dir":18,"pubDate":743,"updatedDate":744,"heroImage":745},[729],"Introducción",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"/blog-placeholder-3.jpg","src/content/blog/libros/the-c-programming-language/introduccion.md","3ea714b10d953d16",{"html":87,"metadata":749},{"headings":750,"localImagePaths":751,"remoteImagePaths":752,"frontmatter":753,"imagePaths":756},[],[],[],{"rutas":754,"title":742,"description":16,"pubDate":151,"updatedDate":151,"heroImage":745,"link":755,"lastModified":152},[729],"/blog/libros/the-c-programming-language/introduccion",[],"libros/the-c-programming-language/introduccion.md","libros/the-c-programming-language/prefacio1ed",{"id":758,"data":760,"body":765,"filePath":766,"digest":767,"rendered":768,"legacyId":778},{"rutas":761,"title":762,"description":16,"lang":17,"dir":18,"pubDate":763,"updatedDate":764,"heroImage":745},[729],"Prefacio de la primera edición",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"C es un lenguaje de programación de propósito general que ofrece como ventajas economía de expresión, control de flujo y estructuras de datos modernos y un rico conjunto de operadores. Además, C no es un lenguaje de “muy alto nivel” ni “grande”, y no está especializado en alguna área especial de aplicación. Pero su ausencia de restricciones y su generalidad lo hacen más conveniente y efectivo para muchas tareas que otros lenguajes supuestamente más poderosos. Originalmente, C fue diseñado para el sistema operativo UNIX y Dennis Ritchie lo implantó sobre el mismo en la DEC PDP-11. El sistema operativo, el compilador de C y esencialmente todos los programas de aplicación de UNIX (incluyendo todo el sofware utilizado para preparar este libro) están escritos en C. También existen compiladores para la producción en otras máquinas, incluyendo la IBM System/370, la Honeywell 6000 y la Interdata 8/32. El lenguaje C no está ligado a ningún hardware o sistema en particular y es fácil escribir programas que correrán sin cambios en cualquier máquina que maneje C.\r\n\r\nLa finalidad de este libro es ayudar al lector a aprender cómo programar en C. Contiene una introducción general para hacer que los nuevos usuarios se inicien lo más pronto posible, capítulos separados sobre cada característica importante y un manual de referencia. L a mayoría de las exposiciones están basadas en la lectura, escritura y revisión de ejemplos, más que en el simple establecimiento de reglas. En su mayoría, los ejemplos son programas reales y completos, no fragmentos aislados. Todos los ejemplos han sido probados directamente a partir del texto, el cual está en forma legible para la máquina. Además de demostrar cómo hacer un uso efectivo del lenguaje, donde ha sido posible, tratamos de ilustrar algoritmos útiles y principios de buen estilo y diseño.\r\n\r\nEl libro no es un manual de introducción a la programación; se supone en él familiaridad con los conceptos básicos de programación, como variables, proposiciones de asignación, ciclos y funciones. No obstante, un programador novato deber ser capaz de leer y obtener los conceptos del lenguaje, aunque le ayudaría la cooperación de un colega más experimentado.\r\n\r\nDe acuerdo con nuestra experiencia, C ha demostrado ser un lenguaje agradable, expresivo y versátil para una amplia variedad de programas. Es fácil de aprender y se obtienen mejores resultados a medida que aumenta nuestra experiencia con él. Deseamos que este libro le ayude al lector a usarlo correctamente.\r\n\r\nLas críticas y sugerencias de muchos amigos y colegas han aumentado muchísimo los conceptos de este libro y ha sido un placer escribirlo. En particular nuestro agradecimiento a Mike Bianchi, Jim Blue, Stu Feldman, Doug Mcllroy, Bill Roome, Bob Rosin y Larry Rosler que leyeron cuidadosamente las numerosas versiones. También agradecemos Al Aho, Steve Bourne, Dan Dvorak, Chuck Haley, Debbie Haley, Marión Harrris, Rick Holt, Steve Johnson, John Mashey, Bob Mitze, Ralph Muha, Peter Nelson, Elliot Pinson, Bill Plauger, Jerry Spivack, Ken Thompson y Peter Weinberger por sus valiosos comentarios a través de varias etapas; a Mike Lesk y Joe Ossanna, por su invaluable ayuda en la impresión.\r\n\r\n\u003Cdiv style=\"text-align: right\">Brian W. Kernighan\u003Cbr>Dennis M. Ritchie\u003C/div>","src/content/blog/libros/the-c-programming-language/prefacio1ed.md","73addf3b84e452c6",{"html":769,"metadata":770},"\u003Cp>C es un lenguaje de programación de propósito general que ofrece como ventajas economía de expresión, control de flujo y estructuras de datos modernos y un rico conjunto de operadores. Además, C no es un lenguaje de “muy alto nivel” ni “grande”, y no está especializado en alguna área especial de aplicación. Pero su ausencia de restricciones y su generalidad lo hacen más conveniente y efectivo para muchas tareas que otros lenguajes supuestamente más poderosos. Originalmente, C fue diseñado para el sistema operativo UNIX y Dennis Ritchie lo implantó sobre el mismo en la DEC PDP-11. El sistema operativo, el compilador de C y esencialmente todos los programas de aplicación de UNIX (incluyendo todo el sofware utilizado para preparar este libro) están escritos en C. También existen compiladores para la producción en otras máquinas, incluyendo la IBM System/370, la Honeywell 6000 y la Interdata 8/32. El lenguaje C no está ligado a ningún hardware o sistema en particular y es fácil escribir programas que correrán sin cambios en cualquier máquina que maneje C.\u003C/p>\n\u003Cp>La finalidad de este libro es ayudar al lector a aprender cómo programar en C. Contiene una introducción general para hacer que los nuevos usuarios se inicien lo más pronto posible, capítulos separados sobre cada característica importante y un manual de referencia. L a mayoría de las exposiciones están basadas en la lectura, escritura y revisión de ejemplos, más que en el simple establecimiento de reglas. En su mayoría, los ejemplos son programas reales y completos, no fragmentos aislados. Todos los ejemplos han sido probados directamente a partir del texto, el cual está en forma legible para la máquina. Además de demostrar cómo hacer un uso efectivo del lenguaje, donde ha sido posible, tratamos de ilustrar algoritmos útiles y principios de buen estilo y diseño.\u003C/p>\n\u003Cp>El libro no es un manual de introducción a la programación; se supone en él familiaridad con los conceptos básicos de programación, como variables, proposiciones de asignación, ciclos y funciones. No obstante, un programador novato deber ser capaz de leer y obtener los conceptos del lenguaje, aunque le ayudaría la cooperación de un colega más experimentado.\u003C/p>\n\u003Cp>De acuerdo con nuestra experiencia, C ha demostrado ser un lenguaje agradable, expresivo y versátil para una amplia variedad de programas. Es fácil de aprender y se obtienen mejores resultados a medida que aumenta nuestra experiencia con él. Deseamos que este libro le ayude al lector a usarlo correctamente.\u003C/p>\n\u003Cp>Las críticas y sugerencias de muchos amigos y colegas han aumentado muchísimo los conceptos de este libro y ha sido un placer escribirlo. En particular nuestro agradecimiento a Mike Bianchi, Jim Blue, Stu Feldman, Doug Mcllroy, Bill Roome, Bob Rosin y Larry Rosler que leyeron cuidadosamente las numerosas versiones. También agradecemos Al Aho, Steve Bourne, Dan Dvorak, Chuck Haley, Debbie Haley, Marión Harrris, Rick Holt, Steve Johnson, John Mashey, Bob Mitze, Ralph Muha, Peter Nelson, Elliot Pinson, Bill Plauger, Jerry Spivack, Ken Thompson y Peter Weinberger por sus valiosos comentarios a través de varias etapas; a Mike Lesk y Joe Ossanna, por su invaluable ayuda en la impresión.\u003C/p>\n\u003Cdiv style=\"text-align: right\">Brian W. Kernighan\u003Cbr>Dennis M. Ritchie\u003C/div>",{"headings":771,"localImagePaths":772,"remoteImagePaths":773,"frontmatter":774,"imagePaths":777},[],[],[],{"rutas":775,"title":762,"description":16,"pubDate":151,"updatedDate":151,"heroImage":745,"link":776,"lastModified":152},[729],"/blog/libros/the-c-programming-language/prefacio1ed",[],"libros/the-c-programming-language/prefacio1ed.md","libros/the-c-programming-language/prefacio",{"id":779,"data":781,"body":786,"filePath":787,"digest":788,"rendered":789,"legacyId":799},{"rutas":782,"title":783,"description":16,"lang":17,"dir":18,"pubDate":784,"updatedDate":785,"heroImage":745},[729],"Prefacio",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"El mundo de la computación ha sufrido una revolución desde la publicación, en 1978, de *El lenguaje de programación C*. Las grandes computadoras son ahora mucho más grandes, y las computadoras personales tienen capacidades que rivalizan con los mainframes de hace una década. También el lenguaje C a cambiado en ese tiempo, aunque solo en forma modesta, y se ha extendido más allá de lo que fueron sus orígenes como el lenguaje del sistema operativo UNIX.\r\n\r\nLa creciente popularidad de C, los cambios en el lenguaje a lo largo de los años, y la creación de compiladores por grupos no involucrados en su diseño, se combinaron para demostrar la necesidad de una definición del lenguaje más precisa y contemporánea que la que proporcionó la primera edición de este libro. En 1983, el *American National Standards Instilute* (ANSI) estableció un comité cuyos propósitos eran producir “una definición no ambigua del lenguaje C e, independiente de la máquina”, cuidando la conservación de su espíritu. El resultado es el estándar ANSI para el lenguaje C.\r\n\r\nEl estándar formaliza construcciones sugeridas pero no descritas en la primera edición, particularmente la asignación de estructura y las enumeraciones. Proporciona una nueva forma de declaración de funciones, que permite revisar comparativamente su definición y uso. Especifica una biblioteca estándar, con un conjunto extensivo de funciones para realizar la entrada y salida, la administración de memoria, la manipulación de cadenas y tareas semejantes. Precisa el comportamiento de características que no se mencionaron en la definición original, y al mismo tiempo establece explícitamente cuáles aspectos del lenguaje tienen aún dependencia de máquina.\r\n\r\nEsta segunda edición de *El lenguaje de programación C* lo describe tal como lo definió el estándar ANSI. (En el momento de escribir esta edición, el estándar se encontraba en la etapa final de revisión; se esperaba su aprobación a finales \r\nde 1988. Las diferencias entre lo que se ha descrito aquí y la forma final deberán ser mínimas.) Aunque hemos hecho anotaciones en los lugares donde el lenguaje ha evolucionado, preferimos escribir exclusivamente en la nueva forma. En general, esto no hace una diferencia significativa; el cambio más visible es la nueva forma de declaración y definición de funciones. Los modernos compiladores manejan ya la mayoría de las posibilidades del estándar\r\n\r\nHemos tratado de mantener la brevedad de la primera edición. El lenguaje C no es grande, y no le está bien un gran libro. Hemos mejorado la exposición de características críticas, como los apuntadores, que son parte central en la programación con C. Hemos redefinido los ejemplos originales y agregamos ejemplos nuevos en varios capítulos. Por ejemplo, se aumentó el tratamiento de declaraciones complicadas con programas que convierten declaraciones en palabras y viceversa. Como antes, todos los ejemplos se han probado directamente a partir del texto, el cual está diseñado de manera que lo pueda leer la máquina.\r\n\r\nEl apéndice A, manual de referencia, no es el estándar, sino que nuestra intención fue trasladar la esencia del estándar a un espacio más pequeño. Está hecho con el ánimo de que proporcione una fácil comprensión para los programadores, pero no como una definición del lenguaje para quienes escriben compiladores —ese papel propiamente le corresponde al estándar en sí. El apéndice B es un resumen de las posibilidades de la biblioteca estándar. También tiene el propósito de ser una referencia para programadores, no para implantadores. En el apéndice C se ofrece un resumen de los cambios de la versión original.\r\n\r\nComo mencionamos en el prefacio a la primera edición, C “se lleva bien, en la medida en que aumenta nuestra experiencia con él”. Con una década más de experiencia, aún lo sentimos así. Deseamos que este libro le ayude a aprender el lenguaje C y también cómo usarlo.\r\n\r\nTenemos un profundo reconocimiento hacia los amigos que nos ayudaron a producir esta segunda edición. Jon Bentley, Doug Gwyn, Doug Mcllroy, Peter Nelson y Rob Pike nos dieron valiosos comentarios sobre casi cada página del borrador de este manuscrito. Estamos agradecidos por la cuidadosa lectura de AI Aho, Dennis Allison, Joe Campbell, G. R. Emlin, Karen Fortgang, Alien Holub, Andrew Hume, Dave Kristol, John Linderman, Dave Prosser, Gene Spafford, y Chris Van Wyk. También recibimos útiles sugerencias de Bill Cheswick, Mark Kernighan, Andy Koening, Robin Lake, Tom London, Jim Reeds, Clovis Tondo y Peter Weinberger. Dave Prosser respondió muchas preguntas detalladas acerca del estándar ANSI. Utilizamos extensivamente el intérprete de C + + de Bjarne Stroustrup, para la prueba local de nuestros programas, y Dave Kristol nos ofreció un compilador ANSI C para las pruebas finales. Rich Drechsler nos ayudó grandemente con la composición.\r\n\r\nNuestro sincero agradecimiento a todos.\r\n\r\n\u003Cdiv style=\"text-align: right\">Brian W. Kernighan\u003Cbr>Dennis M. Ritchie\u003C/div>","src/content/blog/libros/the-c-programming-language/prefacio.md","31cce4fe31a31532",{"html":790,"metadata":791},"\u003Cp>El mundo de la computación ha sufrido una revolución desde la publicación, en 1978, de \u003Cem>El lenguaje de programación C\u003C/em>. Las grandes computadoras son ahora mucho más grandes, y las computadoras personales tienen capacidades que rivalizan con los mainframes de hace una década. También el lenguaje C a cambiado en ese tiempo, aunque solo en forma modesta, y se ha extendido más allá de lo que fueron sus orígenes como el lenguaje del sistema operativo UNIX.\u003C/p>\n\u003Cp>La creciente popularidad de C, los cambios en el lenguaje a lo largo de los años, y la creación de compiladores por grupos no involucrados en su diseño, se combinaron para demostrar la necesidad de una definición del lenguaje más precisa y contemporánea que la que proporcionó la primera edición de este libro. En 1983, el \u003Cem>American National Standards Instilute\u003C/em> (ANSI) estableció un comité cuyos propósitos eran producir “una definición no ambigua del lenguaje C e, independiente de la máquina”, cuidando la conservación de su espíritu. El resultado es el estándar ANSI para el lenguaje C.\u003C/p>\n\u003Cp>El estándar formaliza construcciones sugeridas pero no descritas en la primera edición, particularmente la asignación de estructura y las enumeraciones. Proporciona una nueva forma de declaración de funciones, que permite revisar comparativamente su definición y uso. Especifica una biblioteca estándar, con un conjunto extensivo de funciones para realizar la entrada y salida, la administración de memoria, la manipulación de cadenas y tareas semejantes. Precisa el comportamiento de características que no se mencionaron en la definición original, y al mismo tiempo establece explícitamente cuáles aspectos del lenguaje tienen aún dependencia de máquina.\u003C/p>\n\u003Cp>Esta segunda edición de \u003Cem>El lenguaje de programación C\u003C/em> lo describe tal como lo definió el estándar ANSI. (En el momento de escribir esta edición, el estándar se encontraba en la etapa final de revisión; se esperaba su aprobación a finales\r\nde 1988. Las diferencias entre lo que se ha descrito aquí y la forma final deberán ser mínimas.) Aunque hemos hecho anotaciones en los lugares donde el lenguaje ha evolucionado, preferimos escribir exclusivamente en la nueva forma. En general, esto no hace una diferencia significativa; el cambio más visible es la nueva forma de declaración y definición de funciones. Los modernos compiladores manejan ya la mayoría de las posibilidades del estándar\u003C/p>\n\u003Cp>Hemos tratado de mantener la brevedad de la primera edición. El lenguaje C no es grande, y no le está bien un gran libro. Hemos mejorado la exposición de características críticas, como los apuntadores, que son parte central en la programación con C. Hemos redefinido los ejemplos originales y agregamos ejemplos nuevos en varios capítulos. Por ejemplo, se aumentó el tratamiento de declaraciones complicadas con programas que convierten declaraciones en palabras y viceversa. Como antes, todos los ejemplos se han probado directamente a partir del texto, el cual está diseñado de manera que lo pueda leer la máquina.\u003C/p>\n\u003Cp>El apéndice A, manual de referencia, no es el estándar, sino que nuestra intención fue trasladar la esencia del estándar a un espacio más pequeño. Está hecho con el ánimo de que proporcione una fácil comprensión para los programadores, pero no como una definición del lenguaje para quienes escriben compiladores —ese papel propiamente le corresponde al estándar en sí. El apéndice B es un resumen de las posibilidades de la biblioteca estándar. También tiene el propósito de ser una referencia para programadores, no para implantadores. En el apéndice C se ofrece un resumen de los cambios de la versión original.\u003C/p>\n\u003Cp>Como mencionamos en el prefacio a la primera edición, C “se lleva bien, en la medida en que aumenta nuestra experiencia con él”. Con una década más de experiencia, aún lo sentimos así. Deseamos que este libro le ayude a aprender el lenguaje C y también cómo usarlo.\u003C/p>\n\u003Cp>Tenemos un profundo reconocimiento hacia los amigos que nos ayudaron a producir esta segunda edición. Jon Bentley, Doug Gwyn, Doug Mcllroy, Peter Nelson y Rob Pike nos dieron valiosos comentarios sobre casi cada página del borrador de este manuscrito. Estamos agradecidos por la cuidadosa lectura de AI Aho, Dennis Allison, Joe Campbell, G. R. Emlin, Karen Fortgang, Alien Holub, Andrew Hume, Dave Kristol, John Linderman, Dave Prosser, Gene Spafford, y Chris Van Wyk. También recibimos útiles sugerencias de Bill Cheswick, Mark Kernighan, Andy Koening, Robin Lake, Tom London, Jim Reeds, Clovis Tondo y Peter Weinberger. Dave Prosser respondió muchas preguntas detalladas acerca del estándar ANSI. Utilizamos extensivamente el intérprete de C + + de Bjarne Stroustrup, para la prueba local de nuestros programas, y Dave Kristol nos ofreció un compilador ANSI C para las pruebas finales. Rich Drechsler nos ayudó grandemente con la composición.\u003C/p>\n\u003Cp>Nuestro sincero agradecimiento a todos.\u003C/p>\n\u003Cdiv style=\"text-align: right\">Brian W. Kernighan\u003Cbr>Dennis M. Ritchie\u003C/div>",{"headings":792,"localImagePaths":793,"remoteImagePaths":794,"frontmatter":795,"imagePaths":798},[],[],[],{"rutas":796,"title":783,"description":16,"pubDate":151,"updatedDate":151,"heroImage":745,"link":797,"lastModified":152},[729],"/blog/libros/the-c-programming-language/prefacio",[],"libros/the-c-programming-language/prefacio.md","libros/you-dont-know-js-yet/readme",{"id":800,"data":802,"body":807,"filePath":808,"digest":809,"rendered":810,"legacyId":839},{"rutas":803,"title":731,"description":16,"lang":17,"dir":18,"pubDate":805,"updatedDate":806},[804],"You_Dont_Know_JS_Yet",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"# You Don't Know JS Yet (Series) - 2nd Edition\r\n\r\nEsta es una serie de libros que se sumergen profundamente en los mecanismos centrales del lenguaje JavaScript. Esta es la **segunda edición** de la serie de libros.\r\n\r\n\u003Ca href=\"https://leanpub.com/ydkjsy-get-started\">\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"75\">\u003C/a>&nbsp;&nbsp;\r\n\u003Ca href=\"https://leanpub.com/ydkjsy-scope-closures\">\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"75\">\u003C/a>&nbsp;&nbsp;...\r\n\r\n**Para obtener más información sobre las motivaciones y la perspectiva detrás de esta serie de libros, consulta el [Prefacio](preface).**\r\n\r\nSi estás buscando los libros de la **primera edición**, [puedes encontrarlos aquí](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md).\r\n\r\n## Títulos\r\n\r\nRecomiendo leer los libros de la **segunda edición** en este orden:\r\n\r\n* [Get Started](get-started/readme) | [Comprar en Leanpub](https://leanpub.com/ydkjsy-get-started) | [Comprar en Amazon](https://www.amazon.com/dp/B084BNMN7T)\r\n* [Scope & Closures](scope-closures/readme) | [Comprar en Leanpub](https://leanpub.com/ydkjsy-scope-closures) | [Comprar en Amazon](https://www.amazon.com/dp/B08634PZ3N)\r\n* [Objects & Classes](objects-classes/readme) (Recurso estable)\r\n* [Types & Grammar](types-grammar/readme) (Recurso en progreso)\r\n* Sync & Async (No iniciado aún)\r\n* ES.Next & Beyond (No iniciado aún)\r\n\r\nSi estás buscando los libros de la **primera edición**, [puedes encontrarlos aquí](https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md).\r\n\r\n## Publicación\r\n\r\nComo siempre, podrás leer estos libros en línea aquí completamente gratis.\r\n\r\nEsta edición de los libros se está autopublicando a través de la editorial [GetiPub](https://geti.pub). Los libros publicados estarán disponibles para la venta a través de fuentes normales de venta de libros.\r\n\r\nSi deseas contribuir financieramente al esfuerzo (o a cualquiera de mis otros esfuerzos de código abierto), además de comprar los libros publicados, considera estas opciones:\r\n\r\n* [Github Sponsorship](https://github.com/users/getify/sponsorship)\r\n* [Patreon](https://www.patreon.com/getify)\r\n* [Paypal](https://www.paypal.me/getify)\r\n\r\n## Contribuciones\r\n\r\nSiéntete libre de contribuir a la calidad de este contenido enviando Pull Requests para mejorar los fragmentos de código, explicaciones, etc. Aunque las correcciones de errores tipográficos son bienvenidas, es probable que se detecten a través de los procesos normales de edición/publicación, **así que no te preocupes por ellos en este momento.**\r\n\r\nCualquier contribución que realices a este esfuerzo es, **por supuesto, muy apreciada**.\r\n\r\nPero **POR FAVOR** lee la [guía de contribución](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/CONTRIBUTING.md) detenidamente antes de enviar una Pull Request.\r\n\r\n## Gracias a estos maravillosos patrocinadores.\r\n\r\n\u003Ca href=\"https://frontendmasters.com#gh-light-mode-only\" class=\"dark-images\">\u003Cimg src=\"/images/you-dont-know-js-yet/fem_logo.svg\">\u003C/a>\r\n\u003Ca href=\"https://frontendmasters.com#gh-dark-mode-only\" class=\"light-images\">\u003Cimg src=\"/images/you-dont-know-js-yet/fem_logo-light.svg\">\u003C/a>\r\n\r\n**Los primeros dos libros de esta segunda edición** son exclusivamente patrocinados por **[Frontend Masters](https://frontendmasters.com)**.\r\n\r\nFrontend Masters es el estándar dorado para material de formación de expertos de alta calidad en el desarrollo de software orientado al frontend. Con más de 150 cursos sobre todo lo relacionado con el frontend, este debería ser tu primer y único recurso para capacitación en video de calidad sobre HTML, CSS, JS y tecnologías relacionadas.\r\n\r\n**Nota**: Imparto [todos mis talleres](https://frontendmasters.com/kyle-simpson) exclusivamente a través de Frontend Masters. Si te gusta el contenido de este libro, por favor, echa un vistazo a mis cursos de formación en video.\r\n\r\nQuiero expresar un cálido y profundo agradecimiento a Marc Grabanski y a todo el equipo de Frontend Masters, no solo por su excelente trabajo con la plataforma de formación en video, sino también por su apoyo inquebrantable hacia mí y hacia los libros \"You Don't Know JS\".\r\n\r\n----\r\n\r\n## Licencia y derechos de autor\r\n\r\nThe materials herein are all &copy; 2019-2022 Kyle Simpson.\r\n\r\n\u003Ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">\u003Cimg alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" />\u003C/a>\u003Cbr />This work is licensed under a \u003Ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution-NonCommercial-NoDerivs 4.0 Unported License\u003C/a>.","src/content/blog/libros/you-dont-know-js-yet/README.md","281523fd6b59e3b6",{"html":811,"metadata":812},"\u003Ch1 id=\"you-dont-know-js-yet-series---2nd-edition\">You Don’t Know JS Yet (Series) - 2nd Edition\u003C/h1>\n\u003Cp>Esta es una serie de libros que se sumergen profundamente en los mecanismos centrales del lenguaje JavaScript. Esta es la \u003Cstrong>segunda edición\u003C/strong> de la serie de libros.\u003C/p>\n\u003Cp>\u003Ca href=\"https://leanpub.com/ydkjsy-get-started\">\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"75\">\u003C/a>  \r\n\u003Ca href=\"https://leanpub.com/ydkjsy-scope-closures\">\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"75\">\u003C/a>  …\u003C/p>\n\u003Cp>\u003Cstrong>Para obtener más información sobre las motivaciones y la perspectiva detrás de esta serie de libros, consulta el \u003Ca href=\"preface\">Prefacio\u003C/a>.\u003C/strong>\u003C/p>\n\u003Cp>Si estás buscando los libros de la \u003Cstrong>primera edición\u003C/strong>, \u003Ca href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md\">puedes encontrarlos aquí\u003C/a>.\u003C/p>\n\u003Ch2 id=\"títulos\">Títulos\u003C/h2>\n\u003Cp>Recomiendo leer los libros de la \u003Cstrong>segunda edición\u003C/strong> en este orden:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"get-started/readme\">Get Started\u003C/a> | \u003Ca href=\"https://leanpub.com/ydkjsy-get-started\">Comprar en Leanpub\u003C/a> | \u003Ca href=\"https://www.amazon.com/dp/B084BNMN7T\">Comprar en Amazon\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"scope-closures/readme\">Scope &#x26; Closures\u003C/a> | \u003Ca href=\"https://leanpub.com/ydkjsy-scope-closures\">Comprar en Leanpub\u003C/a> | \u003Ca href=\"https://www.amazon.com/dp/B08634PZ3N\">Comprar en Amazon\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"objects-classes/readme\">Objects &#x26; Classes\u003C/a> (Recurso estable)\u003C/li>\n\u003Cli>\u003Ca href=\"types-grammar/readme\">Types &#x26; Grammar\u003C/a> (Recurso en progreso)\u003C/li>\n\u003Cli>Sync &#x26; Async (No iniciado aún)\u003C/li>\n\u003Cli>ES.Next &#x26; Beyond (No iniciado aún)\u003C/li>\n\u003C/ul>\n\u003Cp>Si estás buscando los libros de la \u003Cstrong>primera edición\u003C/strong>, \u003Ca href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md\">puedes encontrarlos aquí\u003C/a>.\u003C/p>\n\u003Ch2 id=\"publicación\">Publicación\u003C/h2>\n\u003Cp>Como siempre, podrás leer estos libros en línea aquí completamente gratis.\u003C/p>\n\u003Cp>Esta edición de los libros se está autopublicando a través de la editorial \u003Ca href=\"https://geti.pub\">GetiPub\u003C/a>. Los libros publicados estarán disponibles para la venta a través de fuentes normales de venta de libros.\u003C/p>\n\u003Cp>Si deseas contribuir financieramente al esfuerzo (o a cualquiera de mis otros esfuerzos de código abierto), además de comprar los libros publicados, considera estas opciones:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/users/getify/sponsorship\">Github Sponsorship\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.patreon.com/getify\">Patreon\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.paypal.me/getify\">Paypal\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"contribuciones\">Contribuciones\u003C/h2>\n\u003Cp>Siéntete libre de contribuir a la calidad de este contenido enviando Pull Requests para mejorar los fragmentos de código, explicaciones, etc. Aunque las correcciones de errores tipográficos son bienvenidas, es probable que se detecten a través de los procesos normales de edición/publicación, \u003Cstrong>así que no te preocupes por ellos en este momento.\u003C/strong>\u003C/p>\n\u003Cp>Cualquier contribución que realices a este esfuerzo es, \u003Cstrong>por supuesto, muy apreciada\u003C/strong>.\u003C/p>\n\u003Cp>Pero \u003Cstrong>POR FAVOR\u003C/strong> lee la \u003Ca href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/CONTRIBUTING.md\">guía de contribución\u003C/a> detenidamente antes de enviar una Pull Request.\u003C/p>\n\u003Ch2 id=\"gracias-a-estos-maravillosos-patrocinadores\">Gracias a estos maravillosos patrocinadores.\u003C/h2>\n\u003Cp>\u003Ca href=\"https://frontendmasters.com#gh-light-mode-only\" class=\"dark-images\">\u003Cimg src=\"/images/you-dont-know-js-yet/fem_logo.svg\">\u003C/a>\r\n\u003Ca href=\"https://frontendmasters.com#gh-dark-mode-only\" class=\"light-images\">\u003Cimg src=\"/images/you-dont-know-js-yet/fem_logo-light.svg\">\u003C/a>\u003C/p>\n\u003Cp>\u003Cstrong>Los primeros dos libros de esta segunda edición\u003C/strong> son exclusivamente patrocinados por \u003Cstrong>\u003Ca href=\"https://frontendmasters.com\">Frontend Masters\u003C/a>\u003C/strong>.\u003C/p>\n\u003Cp>Frontend Masters es el estándar dorado para material de formación de expertos de alta calidad en el desarrollo de software orientado al frontend. Con más de 150 cursos sobre todo lo relacionado con el frontend, este debería ser tu primer y único recurso para capacitación en video de calidad sobre HTML, CSS, JS y tecnologías relacionadas.\u003C/p>\n\u003Cp>\u003Cstrong>Nota\u003C/strong>: Imparto \u003Ca href=\"https://frontendmasters.com/kyle-simpson\">todos mis talleres\u003C/a> exclusivamente a través de Frontend Masters. Si te gusta el contenido de este libro, por favor, echa un vistazo a mis cursos de formación en video.\u003C/p>\n\u003Cp>Quiero expresar un cálido y profundo agradecimiento a Marc Grabanski y a todo el equipo de Frontend Masters, no solo por su excelente trabajo con la plataforma de formación en video, sino también por su apoyo inquebrantable hacia mí y hacia los libros “You Don’t Know JS”.\u003C/p>\n\u003Chr>\n\u003Ch2 id=\"licencia-y-derechos-de-autor\">Licencia y derechos de autor\u003C/h2>\n\u003Cp>The materials herein are all © 2019-2022 Kyle Simpson.\u003C/p>\n\u003Cp>\u003Ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">\u003Cimg alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\">\u003C/a>\u003Cbr>This work is licensed under a \u003Ca rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution-NonCommercial-NoDerivs 4.0 Unported License\u003C/a>.\u003C/p>",{"headings":813,"localImagePaths":833,"remoteImagePaths":834,"frontmatter":835,"imagePaths":838},[814,818,821,824,827,830],{"depth":815,"slug":816,"text":817},1,"you-dont-know-js-yet-series---2nd-edition","You Don’t Know JS Yet (Series) - 2nd Edition",{"depth":76,"slug":819,"text":820},"títulos","Títulos",{"depth":76,"slug":822,"text":823},"publicación","Publicación",{"depth":76,"slug":825,"text":826},"contribuciones","Contribuciones",{"depth":76,"slug":828,"text":829},"gracias-a-estos-maravillosos-patrocinadores","Gracias a estos maravillosos patrocinadores.",{"depth":76,"slug":831,"text":832},"licencia-y-derechos-de-autor","Licencia y derechos de autor",[],[],{"rutas":836,"title":731,"description":16,"pubDate":151,"updatedDate":151,"link":837,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/readme",[],"libros/you-dont-know-js-yet/README.md","libros/you-dont-know-js-yet/preface",{"id":840,"data":842,"body":846,"filePath":847,"digest":848,"rendered":849,"legacyId":871},{"rutas":843,"title":783,"description":16,"lang":17,"dir":18,"pubDate":844,"updatedDate":845},[804],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Bienvenido a la segunda edición de la ampliamente aclamada serie de libros \"You Don't Know JS\" (**YDKJS**): \"You Don't Know JS **Yet**\" (**YDKJSY**).\r\n\r\nSi has leído alguno de los libros de la primera edición, puedes esperar un enfoque renovado en estos nuevos, con una cobertura actualizada de los cambios en JS en los últimos cinco años. Pero lo que espero y creo que seguirás *obteniendo* es el mismo compromiso de respetar JS y profundizar en lo que realmente lo hace funcionar.\r\n\r\nSi esta es la primera vez que lees estos libros, me alegra que estés aquí. Prepárate para un viaje profundo y extenso por todos los rincones de JavaScript.\r\n\r\nSi eres nuevo en la programación o en JS, ten en cuenta que estos libros no están destinados como una \"introducción suave a JavaScript\". Este material, en ocasiones, es complejo y desafiante, y profundiza mucho más de lo que es típico para un aprendizaje de primera vez. Eres bienvenido aquí sin importar cuál sea tu experiencia, pero estos libros están escritos asumiendo que ya te sientes cómodo con JS y tienes al menos 6-9 meses de experiencia con él.\r\n\r\n## Las Partes\r\n\r\nEstos libros abordan JavaScript intencionalmente de manera opuesta a cómo \"The Good Parts\" trata el lenguaje. No, eso no significa que estemos examinando las partes malas, sino más bien explorando **todas las partes**.\r\n\r\nEs posible que te hayan dicho, o que lo hayas sentido tú mismo, que JS es un lenguaje profundamente defectuoso, mal diseñado e implementado de manera inconsistente. Muchos han afirmado que es el peor lenguaje más popular del mundo; que nadie escribe JS porque quiere, sino porque tiene que hacerlo dada su posición en el centro de la web. Esa es una afirmación ridícula, perjudicial y completamente condescendiente.\r\n\r\nMillones de desarrolladores escriben JavaScript todos los días, y muchos de ellos aprecian y respetan el lenguaje.\r\n\r\nComo cualquier gran lenguaje, tiene partes brillantes así como sus cicatrices. Incluso el creador de JavaScript, Brendan Eich, lamenta algunas de esas partes como errores. Pero está equivocado: no fueron errores en absoluto. JS es lo que es hoy, el lenguaje de programación más omnipresente y, por lo tanto, más influyente del mundo, precisamente debido a *todas esas partes*.\r\n\r\nNo compres la mentira de que solo debes aprender y usar una pequeña colección de *buenas partes* mientras evitas todas las cosas malas. No compres el \"X es el nuevo Y\" como un elixir milagroso, que alguna nueva característica del lenguaje relega instantáneamente todo el uso de una característica anterior como obsoleto e ignorante. No escuches cuando alguien dice que tu código no es \"moderno\" porque aún no está utilizando una característica de etapa-0 que se propuso hace solo unas semanas.\r\n\r\nCada parte de JS es útil. Algunas partes son más útiles que otras. Algunas partes requieren que seas más cuidadoso e intencional.\r\n\r\nMe parece absurdo intentar ser un desarrollador de JavaScript verdaderamente eficaz mientras solo usas una pequeña parte de lo que el lenguaje tiene para ofrecer. ¿Puedes imaginar a un trabajador de la construcción con una caja de herramientas llena de herramientas que solo usa su martillo y desprecia el destornillador o la cinta métrica como inferiores? Eso es simplemente absurdo.\r\n\r\nMi afirmación sin reservas es que deberías aprender todas las partes de JavaScript y, cuando sea apropiado, ¡usarlas! Y, si me permites ser tan audaz, creo que es hora de desechar cualquier libro de JS que te diga lo contrario.\r\n\r\n## ¿El título?\r\n\r\nEntonces, ¿de qué se trata el título de la serie?\r\n\r\nNo estoy tratando de insultarte con críticas sobre tu actual falta de conocimiento o comprensión de JavaScript. No estoy sugiriendo que no puedas o no podrás aprender JavaScript. No estoy presumiendo de una sabiduría secreta avanzada que solo poseo yo y unos pocos seleccionados.\r\n\r\nEn serio, todas esas fueron reacciones reales al título original de la serie antes de que la gente incluso leyera los libros. Y son infundadas.\r\n\r\nEl punto principal del título \"You Don't Know JS Yet\" es señalar que la mayoría de los desarrolladores de JS no se toman el tiempo para entender realmente cómo funciona el código que escriben. Saben que funciona, que produce el resultado deseado. Pero o bien no entienden exactamente cómo, o peor aún, tienen un modelo mental inexacto para el cómo que falla con un examen más detenido.\r\n\r\nEstoy presentando un desafío amable pero sincero para ti, el lector, de dejar de lado las suposiciones que tienes sobre JS y abordarlo con ojos frescos y una curiosidad renovada que te lleve a preguntarte *¿por qué?* para cada línea de código que escribas. ¿Por qué hace lo que hace? ¿Por qué una forma es mejor o más apropiada que las otras media docena de formas que podrías haberlo logrado? ¿Por qué todos los \"niños populares\" dicen que debes hacer X con tu código, pero resulta que Y podría ser una mejor elección?\r\n\r\nAñadí \"Yet\"(Aún) al título, no solo porque es la segunda edición, sino porque, en última instancia, quiero que estos libros te desafíen de una manera esperanzadora en lugar de desalentadora.\r\nI added \"Yet\" to the title, not only because it's the second edition, but because ultimately I want these books to challenge you in a hopeful rather than discouraging way.\r\n\r\nPero dejame ser claro: no creo que sea posible *conocer* completamente JS. Eso no es un logro que se obtenga, sino un objetivo al que se aspira. No terminas de conocer todo sobre JS, simplemente sigues aprendiendo más y más a medida que pasas más tiempo con el lenguaje. Y cuanto más profundizas, más revisas lo que *sabías antes*, y lo vuelves a aprender desde esa perspectiva más experimentada.\r\n\r\nTe animo a adoptar una mentalidad en torno a JavaScript, y de hecho, a todo el desarrollo de software, que nunca lo dominarás por completo, pero que puedes y debes seguir trabajando para acercarte a ese fin, un viaje que se extenderá durante toda tu carrera en el desarrollo de software y más allá.\r\n\r\nSiempre puedes conocer JS mejor de lo que lo haces actualmente. Eso es lo que espero que representen estos libros de YDKJSY.\r\n\r\n## La misión\r\n\r\nRealmente no es necesario argumentar por qué los desarrolladores deberían tomar en serio a JS, creo que ya ha demostrado ser merecedor de un estatus de primera clase entre los lenguajes de programación del mundo.\r\n\r\nPero aún se necesita hacer un caso diferente, más importante, y estos libros se enfrentan a ese desafío.\r\n\r\nHe enseñado a más de 5,000 desarrolladores de equipos y empresas de todo el mundo, en más de 25 países en seis continentes. Y lo que he visto es que con demasiada frecuencia, lo que *cuenta* generalmente es solo el resultado del programa, no cómo se escribe el programa o cómo/por qué funciona.\r\n\r\nMi experiencia, no solo como desarrollador sino también al enseñar a muchos otros desarrolladores, me dice que siempre serás más efectivo en tu trabajo de desarrollo si comprendes más completamente cómo funciona tu código que *simplemente* lograr que produzca un resultado deseado.\r\n\r\nEn otras palabras, *lo suficientemente bueno para que funcione* no es, y no debería ser, *lo suficientemente bueno*.\r\n\r\nTodos los desarrolladores luchan regularmente con alguna parte del código que no funciona correctamente, y no pueden entender por qué. Pero con demasiada frecuencia, los desarrolladores de JS culparán al lenguaje en lugar de admitir que es su propia comprensión la que falla. Estos libros sirven como tanto la pregunta como la respuesta: ¿por qué hizo *esto*, y aquí está cómo hacer que haga *aquello* en su lugar.\r\n\r\nMi misión con YDKJSY es capacitar a cada desarrollador de JS para que posea completamente el código que escriben, para entenderlo y escribir con intención y claridad.\r\n\r\n## El camino\r\n\r\nAlgunos de ustedes han comenzado a leer este libro con el objetivo de completar los seis libros de un tirón.\r\n\r\nMe gustaría advertirles que consideren cambiar ese plan.\r\n\r\nNo es mi intención que YDKJSY se lea de un tirón. El material en estos libros es denso, porque JavaScript es potente, sofisticado y en partes bastante complejo. Nadie puede realmente esperar *descargar* toda esta información a sus cerebros de una sola vez y retener una cantidad significativa de ella. Eso es irrazonable, y es insensato intentarlo.\r\n\r\nMi sugerencia es que se tomen su tiempo para pasar por YDKJSY. Tomen un capítulo, léanlo completamente de principio a fin, y luego vuelvan a leerlo sección por sección. Paren entre cada sección y practiquen el código o las ideas de esa sección. Para conceptos más grandes, probablemente sea una buena idea esperar pasar varios días digiriendo, releyendo, practicando, y luego digiriendo un poco más.\r\n\r\nPodrían pasar una semana o dos en cada capítulo, y un mes o dos en cada libro, y un año o más en toda la serie, y aún así no estarían exprimiendo cada gramo de YDKJSY.\r\n\r\nNo devoren estos libros; tengan paciencia y distribuyan su lectura. Intercale la lectura con mucha práctica en código real en su trabajo o en proyectos en los que participen. Enfrenten las opiniones que he presentado en el camino, debatan con otros y, sobre todo, ¡no estén de acuerdo conmigo! Organicen un grupo de estudio o un club de lectura. Den mini talleres en su oficina. Escriban publicaciones de blog sobre lo que han aprendido. Hablen sobre estos temas en encuentros locales de JS.\r\n\r\nNunca es mi objetivo convencerlos de que estén de acuerdo con mi opinión, sino animarlos a que posean y puedan defender sus opiniones. No pueden llegar *allí* con una lectura rápida de estos libros. Eso es algo que tarda mucho tiempo en emerger, poco a poco, a medida que estudian, reflexionan y vuelven a visitar.\r\n\r\nEstos libros están destinados a ser una guía en sus paseos por JavaScript, desde donde se encuentren actualmente con el lenguaje, hasta un lugar de comprensión más profunda. ¡Y cuanto más comprendan JS, más preguntas harán y más tendrán que explorar! ¡Eso es lo que encuentro tan emocionante!\r\n\r\nEstoy muy contento de que estén embarcándose en este viaje, y me siento muy honrado de que consideren y consulten estos libros en el camino. Es hora de *empezar a conocer a JS*.","src/content/blog/libros/you-dont-know-js-yet/preface.md","b9fb2d8804284a88",{"html":850,"metadata":851},"\u003Cp>Bienvenido a la segunda edición de la ampliamente aclamada serie de libros “You Don’t Know JS” (\u003Cstrong>YDKJS\u003C/strong>): “You Don’t Know JS \u003Cstrong>Yet\u003C/strong>” (\u003Cstrong>YDKJSY\u003C/strong>).\u003C/p>\n\u003Cp>Si has leído alguno de los libros de la primera edición, puedes esperar un enfoque renovado en estos nuevos, con una cobertura actualizada de los cambios en JS en los últimos cinco años. Pero lo que espero y creo que seguirás \u003Cem>obteniendo\u003C/em> es el mismo compromiso de respetar JS y profundizar en lo que realmente lo hace funcionar.\u003C/p>\n\u003Cp>Si esta es la primera vez que lees estos libros, me alegra que estés aquí. Prepárate para un viaje profundo y extenso por todos los rincones de JavaScript.\u003C/p>\n\u003Cp>Si eres nuevo en la programación o en JS, ten en cuenta que estos libros no están destinados como una “introducción suave a JavaScript”. Este material, en ocasiones, es complejo y desafiante, y profundiza mucho más de lo que es típico para un aprendizaje de primera vez. Eres bienvenido aquí sin importar cuál sea tu experiencia, pero estos libros están escritos asumiendo que ya te sientes cómodo con JS y tienes al menos 6-9 meses de experiencia con él.\u003C/p>\n\u003Ch2 id=\"las-partes\">Las Partes\u003C/h2>\n\u003Cp>Estos libros abordan JavaScript intencionalmente de manera opuesta a cómo “The Good Parts” trata el lenguaje. No, eso no significa que estemos examinando las partes malas, sino más bien explorando \u003Cstrong>todas las partes\u003C/strong>.\u003C/p>\n\u003Cp>Es posible que te hayan dicho, o que lo hayas sentido tú mismo, que JS es un lenguaje profundamente defectuoso, mal diseñado e implementado de manera inconsistente. Muchos han afirmado que es el peor lenguaje más popular del mundo; que nadie escribe JS porque quiere, sino porque tiene que hacerlo dada su posición en el centro de la web. Esa es una afirmación ridícula, perjudicial y completamente condescendiente.\u003C/p>\n\u003Cp>Millones de desarrolladores escriben JavaScript todos los días, y muchos de ellos aprecian y respetan el lenguaje.\u003C/p>\n\u003Cp>Como cualquier gran lenguaje, tiene partes brillantes así como sus cicatrices. Incluso el creador de JavaScript, Brendan Eich, lamenta algunas de esas partes como errores. Pero está equivocado: no fueron errores en absoluto. JS es lo que es hoy, el lenguaje de programación más omnipresente y, por lo tanto, más influyente del mundo, precisamente debido a \u003Cem>todas esas partes\u003C/em>.\u003C/p>\n\u003Cp>No compres la mentira de que solo debes aprender y usar una pequeña colección de \u003Cem>buenas partes\u003C/em> mientras evitas todas las cosas malas. No compres el “X es el nuevo Y” como un elixir milagroso, que alguna nueva característica del lenguaje relega instantáneamente todo el uso de una característica anterior como obsoleto e ignorante. No escuches cuando alguien dice que tu código no es “moderno” porque aún no está utilizando una característica de etapa-0 que se propuso hace solo unas semanas.\u003C/p>\n\u003Cp>Cada parte de JS es útil. Algunas partes son más útiles que otras. Algunas partes requieren que seas más cuidadoso e intencional.\u003C/p>\n\u003Cp>Me parece absurdo intentar ser un desarrollador de JavaScript verdaderamente eficaz mientras solo usas una pequeña parte de lo que el lenguaje tiene para ofrecer. ¿Puedes imaginar a un trabajador de la construcción con una caja de herramientas llena de herramientas que solo usa su martillo y desprecia el destornillador o la cinta métrica como inferiores? Eso es simplemente absurdo.\u003C/p>\n\u003Cp>Mi afirmación sin reservas es que deberías aprender todas las partes de JavaScript y, cuando sea apropiado, ¡usarlas! Y, si me permites ser tan audaz, creo que es hora de desechar cualquier libro de JS que te diga lo contrario.\u003C/p>\n\u003Ch2 id=\"el-título\">¿El título?\u003C/h2>\n\u003Cp>Entonces, ¿de qué se trata el título de la serie?\u003C/p>\n\u003Cp>No estoy tratando de insultarte con críticas sobre tu actual falta de conocimiento o comprensión de JavaScript. No estoy sugiriendo que no puedas o no podrás aprender JavaScript. No estoy presumiendo de una sabiduría secreta avanzada que solo poseo yo y unos pocos seleccionados.\u003C/p>\n\u003Cp>En serio, todas esas fueron reacciones reales al título original de la serie antes de que la gente incluso leyera los libros. Y son infundadas.\u003C/p>\n\u003Cp>El punto principal del título “You Don’t Know JS Yet” es señalar que la mayoría de los desarrolladores de JS no se toman el tiempo para entender realmente cómo funciona el código que escriben. Saben que funciona, que produce el resultado deseado. Pero o bien no entienden exactamente cómo, o peor aún, tienen un modelo mental inexacto para el cómo que falla con un examen más detenido.\u003C/p>\n\u003Cp>Estoy presentando un desafío amable pero sincero para ti, el lector, de dejar de lado las suposiciones que tienes sobre JS y abordarlo con ojos frescos y una curiosidad renovada que te lleve a preguntarte \u003Cem>¿por qué?\u003C/em> para cada línea de código que escribas. ¿Por qué hace lo que hace? ¿Por qué una forma es mejor o más apropiada que las otras media docena de formas que podrías haberlo logrado? ¿Por qué todos los “niños populares” dicen que debes hacer X con tu código, pero resulta que Y podría ser una mejor elección?\u003C/p>\n\u003Cp>Añadí “Yet”(Aún) al título, no solo porque es la segunda edición, sino porque, en última instancia, quiero que estos libros te desafíen de una manera esperanzadora en lugar de desalentadora.\r\nI added “Yet” to the title, not only because it’s the second edition, but because ultimately I want these books to challenge you in a hopeful rather than discouraging way.\u003C/p>\n\u003Cp>Pero dejame ser claro: no creo que sea posible \u003Cem>conocer\u003C/em> completamente JS. Eso no es un logro que se obtenga, sino un objetivo al que se aspira. No terminas de conocer todo sobre JS, simplemente sigues aprendiendo más y más a medida que pasas más tiempo con el lenguaje. Y cuanto más profundizas, más revisas lo que \u003Cem>sabías antes\u003C/em>, y lo vuelves a aprender desde esa perspectiva más experimentada.\u003C/p>\n\u003Cp>Te animo a adoptar una mentalidad en torno a JavaScript, y de hecho, a todo el desarrollo de software, que nunca lo dominarás por completo, pero que puedes y debes seguir trabajando para acercarte a ese fin, un viaje que se extenderá durante toda tu carrera en el desarrollo de software y más allá.\u003C/p>\n\u003Cp>Siempre puedes conocer JS mejor de lo que lo haces actualmente. Eso es lo que espero que representen estos libros de YDKJSY.\u003C/p>\n\u003Ch2 id=\"la-misión\">La misión\u003C/h2>\n\u003Cp>Realmente no es necesario argumentar por qué los desarrolladores deberían tomar en serio a JS, creo que ya ha demostrado ser merecedor de un estatus de primera clase entre los lenguajes de programación del mundo.\u003C/p>\n\u003Cp>Pero aún se necesita hacer un caso diferente, más importante, y estos libros se enfrentan a ese desafío.\u003C/p>\n\u003Cp>He enseñado a más de 5,000 desarrolladores de equipos y empresas de todo el mundo, en más de 25 países en seis continentes. Y lo que he visto es que con demasiada frecuencia, lo que \u003Cem>cuenta\u003C/em> generalmente es solo el resultado del programa, no cómo se escribe el programa o cómo/por qué funciona.\u003C/p>\n\u003Cp>Mi experiencia, no solo como desarrollador sino también al enseñar a muchos otros desarrolladores, me dice que siempre serás más efectivo en tu trabajo de desarrollo si comprendes más completamente cómo funciona tu código que \u003Cem>simplemente\u003C/em> lograr que produzca un resultado deseado.\u003C/p>\n\u003Cp>En otras palabras, \u003Cem>lo suficientemente bueno para que funcione\u003C/em> no es, y no debería ser, \u003Cem>lo suficientemente bueno\u003C/em>.\u003C/p>\n\u003Cp>Todos los desarrolladores luchan regularmente con alguna parte del código que no funciona correctamente, y no pueden entender por qué. Pero con demasiada frecuencia, los desarrolladores de JS culparán al lenguaje en lugar de admitir que es su propia comprensión la que falla. Estos libros sirven como tanto la pregunta como la respuesta: ¿por qué hizo \u003Cem>esto\u003C/em>, y aquí está cómo hacer que haga \u003Cem>aquello\u003C/em> en su lugar.\u003C/p>\n\u003Cp>Mi misión con YDKJSY es capacitar a cada desarrollador de JS para que posea completamente el código que escriben, para entenderlo y escribir con intención y claridad.\u003C/p>\n\u003Ch2 id=\"el-camino\">El camino\u003C/h2>\n\u003Cp>Algunos de ustedes han comenzado a leer este libro con el objetivo de completar los seis libros de un tirón.\u003C/p>\n\u003Cp>Me gustaría advertirles que consideren cambiar ese plan.\u003C/p>\n\u003Cp>No es mi intención que YDKJSY se lea de un tirón. El material en estos libros es denso, porque JavaScript es potente, sofisticado y en partes bastante complejo. Nadie puede realmente esperar \u003Cem>descargar\u003C/em> toda esta información a sus cerebros de una sola vez y retener una cantidad significativa de ella. Eso es irrazonable, y es insensato intentarlo.\u003C/p>\n\u003Cp>Mi sugerencia es que se tomen su tiempo para pasar por YDKJSY. Tomen un capítulo, léanlo completamente de principio a fin, y luego vuelvan a leerlo sección por sección. Paren entre cada sección y practiquen el código o las ideas de esa sección. Para conceptos más grandes, probablemente sea una buena idea esperar pasar varios días digiriendo, releyendo, practicando, y luego digiriendo un poco más.\u003C/p>\n\u003Cp>Podrían pasar una semana o dos en cada capítulo, y un mes o dos en cada libro, y un año o más en toda la serie, y aún así no estarían exprimiendo cada gramo de YDKJSY.\u003C/p>\n\u003Cp>No devoren estos libros; tengan paciencia y distribuyan su lectura. Intercale la lectura con mucha práctica en código real en su trabajo o en proyectos en los que participen. Enfrenten las opiniones que he presentado en el camino, debatan con otros y, sobre todo, ¡no estén de acuerdo conmigo! Organicen un grupo de estudio o un club de lectura. Den mini talleres en su oficina. Escriban publicaciones de blog sobre lo que han aprendido. Hablen sobre estos temas en encuentros locales de JS.\u003C/p>\n\u003Cp>Nunca es mi objetivo convencerlos de que estén de acuerdo con mi opinión, sino animarlos a que posean y puedan defender sus opiniones. No pueden llegar \u003Cem>allí\u003C/em> con una lectura rápida de estos libros. Eso es algo que tarda mucho tiempo en emerger, poco a poco, a medida que estudian, reflexionan y vuelven a visitar.\u003C/p>\n\u003Cp>Estos libros están destinados a ser una guía en sus paseos por JavaScript, desde donde se encuentren actualmente con el lenguaje, hasta un lugar de comprensión más profunda. ¡Y cuanto más comprendan JS, más preguntas harán y más tendrán que explorar! ¡Eso es lo que encuentro tan emocionante!\u003C/p>\n\u003Cp>Estoy muy contento de que estén embarcándose en este viaje, y me siento muy honrado de que consideren y consulten estos libros en el camino. Es hora de \u003Cem>empezar a conocer a JS\u003C/em>.\u003C/p>",{"headings":852,"localImagePaths":865,"remoteImagePaths":866,"frontmatter":867,"imagePaths":870},[853,856,859,862],{"depth":76,"slug":854,"text":855},"las-partes","Las Partes",{"depth":76,"slug":857,"text":858},"el-título","¿El título?",{"depth":76,"slug":860,"text":861},"la-misión","La misión",{"depth":76,"slug":863,"text":864},"el-camino","El camino",[],[],{"rutas":868,"title":783,"description":16,"pubDate":151,"updatedDate":151,"link":869,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/preface",[],"libros/you-dont-know-js-yet/preface.md","seguridad-web/buenas-practicas-apis/jwt",{"id":872,"data":874,"body":878,"filePath":879,"digest":880,"rendered":881,"legacyId":906},{"rutas":875,"title":324,"description":16,"lang":17,"dir":18,"pubDate":876,"updatedDate":877},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## JWT Secret\r\n> Debe tener un buen JWT secret para protegerse contra el templado de tokens, así como para evitar ataques de fuerza bruta.\r\n\r\nUna clave secreta fuerte debe ser generada aleatoriamente, larga y compleja, y debe ser almacenada de forma segura y rotada periódicamente.\r\n\r\n## Algoritmo JWT\r\n> No extraiga el algoritmo de la cabecera, utilice el backend.\r\n\r\nExtraer el algoritmo de la cabecera de un token JWT puede suponer un riesgo de seguridad, ya que un atacante podría modificar el algoritmo y potencialmente obtener acceso no autorizado. Por lo tanto, se recomienda verificar el algoritmo en el backend en lugar de extraerlo de la cabecera. Esto puede ayudar a garantizar que el algoritmo utilizado para firmar y verificar el token es seguro y no ha sido manipulado.\r\n\r\n## Caducidad de los tokens\r\n> La caducidad de los tokens debe establecerse en un tiempo razonable para reducir la ventana de vulnerabilidad, limitar el impacto del robo de tokens y mejorar la seguridad general.\r\n\r\nEstablecer un tiempo de expiración de token (TTL, RTTL) corto es importante para la seguridad, ya que reduce la ventana de vulnerabilidad, limita el impacto del robo de tokens y mejora la seguridad general. Sin embargo, el tiempo de caducidad debe equilibrarse con la usabilidad, ya que establecerlo demasiado corto puede incomodar a los usuarios y reducir la productividad.\r\n\r\n## Carga útil JWT\r\n> Evite almacenar datos confidenciales en la carga JWT\r\n\r\nAlmacenar datos sensibles en la carga útil de un token JWT puede aumentar el riesgo de violación de datos y otros incidentes de seguridad. Si un atacante es capaz de obtener o manipular el token, podría potencialmente acceder a los datos sensibles almacenados en la carga útil.\r\n\r\n## Tamaño de la carga JWT\r\n> Evite almacenar grandes cargas útiles en los tokens JWT\r\n\r\nUna carga útil más pequeña puede reducir la sobrecarga de la red, mejorar la velocidad de procesamiento y disminuir el riesgo de ataques dirigidos a sobrecargar el sistema.","src/content/blog/seguridad-web/buenas-practicas-apis/jwt.md","26ec5f26775ea055",{"html":882,"metadata":883},"\u003Ch2 id=\"jwt-secret\">JWT Secret\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Debe tener un buen JWT secret para protegerse contra el templado de tokens, así como para evitar ataques de fuerza bruta.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Una clave secreta fuerte debe ser generada aleatoriamente, larga y compleja, y debe ser almacenada de forma segura y rotada periódicamente.\u003C/p>\n\u003Ch2 id=\"algoritmo-jwt\">Algoritmo JWT\u003C/h2>\n\u003Cblockquote>\n\u003Cp>No extraiga el algoritmo de la cabecera, utilice el backend.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Extraer el algoritmo de la cabecera de un token JWT puede suponer un riesgo de seguridad, ya que un atacante podría modificar el algoritmo y potencialmente obtener acceso no autorizado. Por lo tanto, se recomienda verificar el algoritmo en el backend en lugar de extraerlo de la cabecera. Esto puede ayudar a garantizar que el algoritmo utilizado para firmar y verificar el token es seguro y no ha sido manipulado.\u003C/p>\n\u003Ch2 id=\"caducidad-de-los-tokens\">Caducidad de los tokens\u003C/h2>\n\u003Cblockquote>\n\u003Cp>La caducidad de los tokens debe establecerse en un tiempo razonable para reducir la ventana de vulnerabilidad, limitar el impacto del robo de tokens y mejorar la seguridad general.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Establecer un tiempo de expiración de token (TTL, RTTL) corto es importante para la seguridad, ya que reduce la ventana de vulnerabilidad, limita el impacto del robo de tokens y mejora la seguridad general. Sin embargo, el tiempo de caducidad debe equilibrarse con la usabilidad, ya que establecerlo demasiado corto puede incomodar a los usuarios y reducir la productividad.\u003C/p>\n\u003Ch2 id=\"carga-útil-jwt\">Carga útil JWT\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Evite almacenar datos confidenciales en la carga JWT\u003C/p>\n\u003C/blockquote>\n\u003Cp>Almacenar datos sensibles en la carga útil de un token JWT puede aumentar el riesgo de violación de datos y otros incidentes de seguridad. Si un atacante es capaz de obtener o manipular el token, podría potencialmente acceder a los datos sensibles almacenados en la carga útil.\u003C/p>\n\u003Ch2 id=\"tamaño-de-la-carga-jwt\">Tamaño de la carga JWT\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Evite almacenar grandes cargas útiles en los tokens JWT\u003C/p>\n\u003C/blockquote>\n\u003Cp>Una carga útil más pequeña puede reducir la sobrecarga de la red, mejorar la velocidad de procesamiento y disminuir el riesgo de ataques dirigidos a sobrecargar el sistema.\u003C/p>",{"headings":884,"localImagePaths":900,"remoteImagePaths":901,"frontmatter":902,"imagePaths":905},[885,888,891,894,897],{"depth":76,"slug":886,"text":887},"jwt-secret","JWT Secret",{"depth":76,"slug":889,"text":890},"algoritmo-jwt","Algoritmo JWT",{"depth":76,"slug":892,"text":893},"caducidad-de-los-tokens","Caducidad de los tokens",{"depth":76,"slug":895,"text":896},"carga-útil-jwt","Carga útil JWT",{"depth":76,"slug":898,"text":899},"tamaño-de-la-carga-jwt","Tamaño de la carga JWT",[],[],{"rutas":903,"title":324,"description":16,"pubDate":151,"updatedDate":151,"link":904,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt",[],"seguridad-web/buenas-practicas-apis/jwt.md","seguridad-web/buenas-practicas-apis",{"id":907,"data":909,"body":915,"filePath":916,"digest":917,"rendered":918,"legacyId":951},{"rutas":910,"title":911,"description":912,"lang":17,"dir":18,"pubDate":913,"updatedDate":914},[15],"Buenas prácticas de seguridad de las APIs","Buenas prácticas de seguridad de las APIs o Backend",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## [Autenticación](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion)\r\n* [Evite la \"autenticación básica\", utilice lo estándar (por ejemplo, JWT)](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#evite-la-autenticación-básica)\r\n* [No reinvente la rueda en los mecanismos de autenticación.](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#mecanismos-de-autenticación)\r\n* [Utilizar las funciones \"Max Retry\" y jail en Login](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#max-retryjail-en-el-inicio-de-sesión)\r\n* [Cifrar todos los datos sensibles](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#cifrado-de-datos-sensibles)\r\n\r\n## [JWT](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt)\r\n* [Utilice un buen \"JWT Secret\" para dificultar los ataques de fuerza bruta](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#jwt-secret)\r\n* [No extraer el algoritmo de la cabecera, utilize el backend](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#algoritmo-jwt)\r\n* [Haga que la caducidad de los tokens (TTL, RTTL) sea lo más corta posible](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#caducidad-de-los-tokens)\r\n* [Evitar el almacenamiento de datos sensibles en la carga JWT](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#carga-útil-jwt)\r\n* [Mantenga la carga útil pequeña para reducir el tamaño del token JWT](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#tamaño-de-la-carga-jwt)\r\n\r\n## [Control de acceso](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control)\r\n* [Limitar solicitudes (throttling) para evitar DDoS/Fuerza Bruta](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#limitar-peticiones)\r\n* [Utilice HTTPS en el lado del servidor y cifrados seguros](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#utilizar-https)\r\n* [Utilice el encabezado HSTS con SSL para evitar ataques SSL Strip](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#cabecera-hsts)\r\n* [Desactivar listados de directorios](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#listados-de-directorios)\r\n* [Las API privadas solo serán accesibles desde direcciones IP seguras](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#restringir-las-api-privadas)\r\n\r\n## [OAuth](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth)\r\n* [Valide siempre \"redirect_uri\" en el lado del servidor](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#redirect_uri)\r\n* [Evite \"response_type=token\" e intente cambiarlo por código](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#evite-el-flujo-de-concesión-implícito)\r\n* [Utilice el parámetro \"state\" para evitar ataques CSRF](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#usar-parámetro-de-state)\r\n* [Tener scope predeterminado y validar scope para cada aplicación](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#validar-scope)\r\n\r\n## [Procesamiento](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing)\r\n* [Compruebe si todos los endpoints están protegidos mediante autenticación para evitar un proceso de autenticación interrumpido](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#autenticación-de-endpoints)\r\n* [Evite la identificación personal del usuario en las URL de recursos, ej. usuarios/242/pedidos](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#evitar-el-id-personal-en-las-url)\r\n* [Prefiera usar UUID en lugar de ID autoincremental](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#elija-uuid)\r\n* [Deshabilite entity parsing si está usando parsing XML para evitar ataques XXE](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-el-análisis-sintáctico-de-entidades-en-xml)\r\n* [Deshabilite entity expansion si usa XML, YML o cualquier otro idioma](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-la-expansión-de-entidades)\r\n* [Utilice CDN para cargar archivos](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#usar-cdn-para-subir-archivos)\r\n* [Evite el HTTP blocking si utiliza una gran cantidad de datos](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#evitar-el-bloqueo-http)\r\n* [Asegúrese de desactivar el modo de depuración en producción](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-el-modo-de-depuración)\r\n* [Utilice pilas no ejecutables cuando estén disponibles](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#pilas-no-ejecutables)\r\n\r\n## [Entrada](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada)\r\n* [Utilice métodos HTTP adecuados para la operación](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#métodos-http-adecuados)\r\n* [Validar \"content-type\" en el encabezado de la solicitud](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#validación-del-content-type)\r\n* [Validar la entrada del usuario para evitar vulnerabilidades comunes](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#validación-de-la-entrada-del-usuario)\r\n* [Utilice el encabezado de Authorization estándar para datos confidenciales](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#cabecera-de-authorization)\r\n* [Utilice únicamente cifrado del lado del servidor](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#evite-el-cifrado-del-lado-del-cliente)\r\n* [Utilice una API Gateway para almacenamiento en caché, políticas de límite de velocidad, etc](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#api-gateway)\r\n\r\n## [Salida](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida)\r\n* [Enviar encabezado \"X-Content-Type-Options: nosniff\"](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#x-content-type-options-nosniff)\r\n* [Enviar encabezado \"X-Frame-Options: deny\"](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#x-frame-options-deny)\r\n* [Enviar encabezado \"Content-Security-Policy: default-src 'none' \"](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#política-de-seguridad-de-contenidos)\r\n* [Eliminar encabezados de huellas digitales (es decir, x-powered-by, etc.)](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#eliminar-huellas-digitales)\r\n* [Forzar \"content-type\" para su respuesta](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#forzar-content-type)\r\n* [Evite devolver datos confidenciales (credenciales, tokens, etc.)](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#evite-devolver-datos-sensibles)\r\n* [Devolver códigos de respuesta adecuados según la operación](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#código-de-respuesta-adecuado)\r\n\r\n## [CI & CD](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd)\r\n* [Audite su diseño e implementación con pruebas unitarias/integración](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#pruebas-unitariasintegración)\r\n* [Utilice un proceso de revisión de código y no use la autoaprobación.](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#proceso-de-revisión-del-código)\r\n* [Ejecute continuamente análisis de seguridad en su código](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#análisis-de-seguridad)\r\n* [Verifique sus dependencias para detectar vulnerabilidades conocidas](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#dependencias)\r\n* [Diseñar una solución rollback para implementaciones](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#rollback)\r\n\r\n## [Monitorizacion](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring)\r\n* [Utilice inicios de sesión centralizados para todos los servicios y componentes](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#inicio-de-sesión-centralizado)\r\n* [Utilice agents para monitorear todos los requests, responses y errores.](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#monitorícelo-todo)\r\n* [Utilice alertas para SMS, Slack, correo electrónico, Kibana, Cloudwatch, etc.](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#configurar-alertas)\r\n* [Asegúrese de no registrar ningún dato confidencial](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#evite-registrar-datos-sensibles)\r\n* [Utilice un sistema IDS y/o IPS para monitorear todo](/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#utilizar-sistemas-idsips)\r\n\r\n## Otros Recursos Recomendados\r\n\r\n* [HTTP API Development Tools - Ingles](https://github.com/yosriady/awesome-api-devtools?tab=readme-ov-file)\r\n* [CS 253 - Ingles](https://www.youtube.com/watch?v=5JJrJGZ_LjM&list=PL1y1iaEtjSYiiSGVlL1cHsXN_kvJOOhu-)\r\n* [MIT 6.858 - Ingles](https://www.youtube.com/watch?v=GqmQg-cszw4&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh)","src/content/blog/seguridad-web/buenas-practicas-apis/index.md","22ef0120aa6a853f",{"html":919,"metadata":920},"\u003Ch2 id=\"autenticación\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion\">Autenticación\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#evite-la-autenticaci%C3%B3n-b%C3%A1sica\">Evite la “autenticación básica”, utilice lo estándar (por ejemplo, JWT)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#mecanismos-de-autenticaci%C3%B3n\">No reinvente la rueda en los mecanismos de autenticación.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#max-retryjail-en-el-inicio-de-sesi%C3%B3n\">Utilizar las funciones “Max Retry” y jail en Login\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion#cifrado-de-datos-sensibles\">Cifrar todos los datos sensibles\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"jwt\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt\">JWT\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#jwt-secret\">Utilice un buen “JWT Secret” para dificultar los ataques de fuerza bruta\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#algoritmo-jwt\">No extraer el algoritmo de la cabecera, utilize el backend\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#caducidad-de-los-tokens\">Haga que la caducidad de los tokens (TTL, RTTL) sea lo más corta posible\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#carga-%C3%BAtil-jwt\">Evitar el almacenamiento de datos sensibles en la carga JWT\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/jwt#tama%C3%B1o-de-la-carga-jwt\">Mantenga la carga útil pequeña para reducir el tamaño del token JWT\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"control-de-acceso\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control\">Control de acceso\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#limitar-peticiones\">Limitar solicitudes (throttling) para evitar DDoS/Fuerza Bruta\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#utilizar-https\">Utilice HTTPS en el lado del servidor y cifrados seguros\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#cabecera-hsts\">Utilice el encabezado HSTS con SSL para evitar ataques SSL Strip\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#listados-de-directorios\">Desactivar listados de directorios\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control#restringir-las-api-privadas\">Las API privadas solo serán accesibles desde direcciones IP seguras\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"oauth\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth\">OAuth\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#redirect_uri\">Valide siempre “redirect_uri” en el lado del servidor\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#evite-el-flujo-de-concesi%C3%B3n-impl%C3%ADcito\">Evite “response_type=token” e intente cambiarlo por código\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#usar-par%C3%A1metro-de-state\">Utilice el parámetro “state” para evitar ataques CSRF\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth#validar-scope\">Tener scope predeterminado y validar scope para cada aplicación\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"procesamiento\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing\">Procesamiento\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#autenticaci%C3%B3n-de-endpoints\">Compruebe si todos los endpoints están protegidos mediante autenticación para evitar un proceso de autenticación interrumpido\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#evitar-el-id-personal-en-las-url\">Evite la identificación personal del usuario en las URL de recursos, ej. usuarios/242/pedidos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#elija-uuid\">Prefiera usar UUID en lugar de ID autoincremental\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-el-an%C3%A1lisis-sint%C3%A1ctico-de-entidades-en-xml\">Deshabilite entity parsing si está usando parsing XML para evitar ataques XXE\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-la-expansi%C3%B3n-de-entidades\">Deshabilite entity expansion si usa XML, YML o cualquier otro idioma\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#usar-cdn-para-subir-archivos\">Utilice CDN para cargar archivos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#evitar-el-bloqueo-http\">Evite el HTTP blocking si utiliza una gran cantidad de datos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#desactivar-el-modo-de-depuraci%C3%B3n\">Asegúrese de desactivar el modo de depuración en producción\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing#pilas-no-ejecutables\">Utilice pilas no ejecutables cuando estén disponibles\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"entrada\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada\">Entrada\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#m%C3%A9todos-http-adecuados\">Utilice métodos HTTP adecuados para la operación\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#validaci%C3%B3n-del-content-type\">Validar “content-type” en el encabezado de la solicitud\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#validaci%C3%B3n-de-la-entrada-del-usuario\">Validar la entrada del usuario para evitar vulnerabilidades comunes\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#cabecera-de-authorization\">Utilice el encabezado de Authorization estándar para datos confidenciales\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#evite-el-cifrado-del-lado-del-cliente\">Utilice únicamente cifrado del lado del servidor\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada#api-gateway\">Utilice una API Gateway para almacenamiento en caché, políticas de límite de velocidad, etc\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"salida\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida\">Salida\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#x-content-type-options-nosniff\">Enviar encabezado “X-Content-Type-Options: nosniff”\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#x-frame-options-deny\">Enviar encabezado “X-Frame-Options: deny”\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#pol%C3%ADtica-de-seguridad-de-contenidos\">Enviar encabezado “Content-Security-Policy: default-src ‘none’ ”\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#eliminar-huellas-digitales\">Eliminar encabezados de huellas digitales (es decir, x-powered-by, etc.)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#forzar-content-type\">Forzar “content-type” para su respuesta\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#evite-devolver-datos-sensibles\">Evite devolver datos confidenciales (credenciales, tokens, etc.)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida#c%C3%B3digo-de-respuesta-adecuado\">Devolver códigos de respuesta adecuados según la operación\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"ci--cd\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd\">CI &#x26; CD\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#pruebas-unitariasintegraci%C3%B3n\">Audite su diseño e implementación con pruebas unitarias/integración\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#proceso-de-revisi%C3%B3n-del-c%C3%B3digo\">Utilice un proceso de revisión de código y no use la autoaprobación.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#an%C3%A1lisis-de-seguridad\">Ejecute continuamente análisis de seguridad en su código\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#dependencias\">Verifique sus dependencias para detectar vulnerabilidades conocidas\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd#rollback\">Diseñar una solución rollback para implementaciones\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"monitorizacion\">\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring\">Monitorizacion\u003C/a>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#inicio-de-sesi%C3%B3n-centralizado\">Utilice inicios de sesión centralizados para todos los servicios y componentes\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#monitor%C3%ADcelo-todo\">Utilice agents para monitorear todos los requests, responses y errores.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#configurar-alertas\">Utilice alertas para SMS, Slack, correo electrónico, Kibana, Cloudwatch, etc.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#evite-registrar-datos-sensibles\">Asegúrese de no registrar ningún dato confidencial\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring#utilizar-sistemas-idsips\">Utilice un sistema IDS y/o IPS para monitorear todo\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"otros-recursos-recomendados\">Otros Recursos Recomendados\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/yosriady/awesome-api-devtools?tab=readme-ov-file\">HTTP API Development Tools - Ingles\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=5JJrJGZ_LjM&#x26;list=PL1y1iaEtjSYiiSGVlL1cHsXN_kvJOOhu-\">CS 253 - Ingles\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=GqmQg-cszw4&#x26;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">MIT 6.858 - Ingles\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":921,"localImagePaths":945,"remoteImagePaths":946,"frontmatter":947,"imagePaths":950},[922,923,924,927,928,931,934,937,939,942],{"depth":76,"slug":320,"text":321},{"depth":76,"slug":323,"text":324},{"depth":76,"slug":925,"text":926},"control-de-acceso","Control de acceso",{"depth":76,"slug":332,"text":333},{"depth":76,"slug":929,"text":930},"procesamiento","Procesamiento",{"depth":76,"slug":932,"text":933},"entrada","Entrada",{"depth":76,"slug":935,"text":936},"salida","Salida",{"depth":76,"slug":938,"text":412},"ci--cd",{"depth":76,"slug":940,"text":941},"monitorizacion","Monitorizacion",{"depth":76,"slug":943,"text":944},"otros-recursos-recomendados","Otros Recursos Recomendados",[],[],{"rutas":948,"title":911,"description":912,"pubDate":151,"updatedDate":151,"link":949,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis",[],"seguridad-web/buenas-practicas-apis/index.md","seguridad-web/buenas-practicas-apis/ci-cd",{"id":952,"data":954,"body":958,"filePath":959,"digest":960,"rendered":961,"legacyId":986},{"rutas":955,"title":412,"description":16,"lang":17,"dir":18,"pubDate":956,"updatedDate":957},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Pruebas unitarias/integración\r\n> Audite su diseño e implementación con cobertura de pruebas unitarias/integración.\r\n\r\nLas pruebas unitarias y de integración pueden ayudar a identificar vulnerabilidades en el código y el diseño de la API, como errores de validación de entrada, fallos de autenticación y autorización, y otros problemas relacionados con la seguridad. Mediante la realización de pruebas exhaustivas, los desarrolladores pueden garantizar que la API funciona según lo previsto y que es segura frente a ataques comunes, como ataques de inyección, secuencias de comandos en sitios cruzados y otros exploits. Unas pruebas adecuadas también pueden ayudar a identificar y resolver cuellos de botella en el rendimiento, mejorar la escalabilidad y la fiabilidad, y garantizar la calidad general de la API.\r\n\r\n## Proceso de revisión del código\r\n> Utilice un proceso de revisión del código y prescinda de la autoaprobación.\r\n\r\nContar con un buen proceso de revisión del código permite que otros ojos revisen el código e identifiquen posibles problemas de seguridad o vulnerabilidades. Un proceso de revisión del código implica que otros miembros del equipo revisen el código para asegurarse de que sigue las mejores prácticas y es seguro. Desestimar la autoaprobación significa que el desarrollador que escribió el código no debe ser el único responsable de aprobarlo para su publicación. Esto ayuda a detectar posibles errores o descuidos antes de que el código se despliegue, reduciendo el riesgo de brechas de seguridad u otros problemas.\r\n\r\n## Análisis de seguridad\r\n> Ejecute continuamente análisis de seguridad en su código.\r\n\r\nEl análisis continuo de la seguridad ayuda a identificar y corregir las vulnerabilidades de seguridad en el código antes de que puedan ser explotadas por los atacantes. Consiste en utilizar herramientas automatizadas y técnicas manuales para escanear el código en busca de posibles puntos débiles, como prácticas de codificación inseguras, errores de configuración y dependencias obsoletas. Al identificar y corregir las vulnerabilidades en una fase temprana del ciclo de desarrollo, puede reducirse significativamente el riesgo de violación de la seguridad o pérdida de datos, lo que mejora la seguridad general del sistema.\r\n\r\n## Dependencias\r\n> Compruebe si sus dependencias presentan vulnerabilidades conocidas y manténgalas actualizadas.\r\n\r\nLas vulnerabilidades en bibliotecas y componentes de terceros pueden ser explotadas por atacantes para obtener acceso a su sistema o datos. Estas vulnerabilidades pueden introducirse a través de dependencias obsoletas o inseguras que no han sido actualizadas con los últimos parches de seguridad.\r\n\r\nSi comprueba periódicamente si existen vulnerabilidades y mantiene sus dependencias actualizadas, puede asegurarse de que su API no es susceptible de sufrir riesgos de seguridad conocidos. Para ello puede utilizar herramientas o servicios automatizados que analicen su código base y le proporcionen informes sobre cualquier vulnerabilidad encontrada en sus dependencias. Al abordar estas vulnerabilidades con prontitud, puede reducir el riesgo de que su API se vea comprometida por atacantes.\r\n\r\n## Rollback\r\n> Diseñe una solución de reversión para las implantaciones.\r\n\r\nA veces, el despliegue de una nueva versión de la API puede introducir errores o problemas inesperados que no se detectaron durante las pruebas. En estos casos, volver a la versión anterior de la API puede ayudar a mitigar el impacto del problema y restaurar el servicio a un estado funcional. Una solución de reversión bien diseñada puede ayudar a reducir el tiempo de inactividad y minimizar el impacto en los usuarios.","src/content/blog/seguridad-web/buenas-practicas-apis/ci-cd.md","687db696dcc27eff",{"html":962,"metadata":963},"\u003Ch2 id=\"pruebas-unitariasintegración\">Pruebas unitarias/integración\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Audite su diseño e implementación con cobertura de pruebas unitarias/integración.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Las pruebas unitarias y de integración pueden ayudar a identificar vulnerabilidades en el código y el diseño de la API, como errores de validación de entrada, fallos de autenticación y autorización, y otros problemas relacionados con la seguridad. Mediante la realización de pruebas exhaustivas, los desarrolladores pueden garantizar que la API funciona según lo previsto y que es segura frente a ataques comunes, como ataques de inyección, secuencias de comandos en sitios cruzados y otros exploits. Unas pruebas adecuadas también pueden ayudar a identificar y resolver cuellos de botella en el rendimiento, mejorar la escalabilidad y la fiabilidad, y garantizar la calidad general de la API.\u003C/p>\n\u003Ch2 id=\"proceso-de-revisión-del-código\">Proceso de revisión del código\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice un proceso de revisión del código y prescinda de la autoaprobación.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Contar con un buen proceso de revisión del código permite que otros ojos revisen el código e identifiquen posibles problemas de seguridad o vulnerabilidades. Un proceso de revisión del código implica que otros miembros del equipo revisen el código para asegurarse de que sigue las mejores prácticas y es seguro. Desestimar la autoaprobación significa que el desarrollador que escribió el código no debe ser el único responsable de aprobarlo para su publicación. Esto ayuda a detectar posibles errores o descuidos antes de que el código se despliegue, reduciendo el riesgo de brechas de seguridad u otros problemas.\u003C/p>\n\u003Ch2 id=\"análisis-de-seguridad\">Análisis de seguridad\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Ejecute continuamente análisis de seguridad en su código.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El análisis continuo de la seguridad ayuda a identificar y corregir las vulnerabilidades de seguridad en el código antes de que puedan ser explotadas por los atacantes. Consiste en utilizar herramientas automatizadas y técnicas manuales para escanear el código en busca de posibles puntos débiles, como prácticas de codificación inseguras, errores de configuración y dependencias obsoletas. Al identificar y corregir las vulnerabilidades en una fase temprana del ciclo de desarrollo, puede reducirse significativamente el riesgo de violación de la seguridad o pérdida de datos, lo que mejora la seguridad general del sistema.\u003C/p>\n\u003Ch2 id=\"dependencias\">Dependencias\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Compruebe si sus dependencias presentan vulnerabilidades conocidas y manténgalas actualizadas.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Las vulnerabilidades en bibliotecas y componentes de terceros pueden ser explotadas por atacantes para obtener acceso a su sistema o datos. Estas vulnerabilidades pueden introducirse a través de dependencias obsoletas o inseguras que no han sido actualizadas con los últimos parches de seguridad.\u003C/p>\n\u003Cp>Si comprueba periódicamente si existen vulnerabilidades y mantiene sus dependencias actualizadas, puede asegurarse de que su API no es susceptible de sufrir riesgos de seguridad conocidos. Para ello puede utilizar herramientas o servicios automatizados que analicen su código base y le proporcionen informes sobre cualquier vulnerabilidad encontrada en sus dependencias. Al abordar estas vulnerabilidades con prontitud, puede reducir el riesgo de que su API se vea comprometida por atacantes.\u003C/p>\n\u003Ch2 id=\"rollback\">Rollback\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Diseñe una solución de reversión para las implantaciones.\u003C/p>\n\u003C/blockquote>\n\u003Cp>A veces, el despliegue de una nueva versión de la API puede introducir errores o problemas inesperados que no se detectaron durante las pruebas. En estos casos, volver a la versión anterior de la API puede ayudar a mitigar el impacto del problema y restaurar el servicio a un estado funcional. Una solución de reversión bien diseñada puede ayudar a reducir el tiempo de inactividad y minimizar el impacto en los usuarios.\u003C/p>",{"headings":964,"localImagePaths":980,"remoteImagePaths":981,"frontmatter":982,"imagePaths":985},[965,968,971,974,977],{"depth":76,"slug":966,"text":967},"pruebas-unitariasintegración","Pruebas unitarias/integración",{"depth":76,"slug":969,"text":970},"proceso-de-revisión-del-código","Proceso de revisión del código",{"depth":76,"slug":972,"text":973},"análisis-de-seguridad","Análisis de seguridad",{"depth":76,"slug":975,"text":976},"dependencias","Dependencias",{"depth":76,"slug":978,"text":979},"rollback","Rollback",[],[],{"rutas":983,"title":412,"description":16,"pubDate":151,"updatedDate":151,"link":984,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/ci-cd",[],"seguridad-web/buenas-practicas-apis/ci-cd.md","notaciones-asintoticas",{"id":987,"data":989,"body":994,"filePath":995,"digest":996,"rendered":997,"legacyId":1036},{"rutas":990,"title":991,"description":16,"lang":17,"dir":18,"pubDate":992,"updatedDate":993},[30],"Notación asintótica",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"La eficiencia de un algoritmo depende de la cantidad de tiempo, almacenamiento y otros recursos necesarios para ejecutarlo. La eficiencia se mide con la ayuda de notaciones asintóticas.\r\n\r\nUn algoritmo puede no tener el mismo rendimiento para diferentes tipos de entradas. Con el aumento del tamaño de la entrada, el rendimiento cambiará.\r\n\r\nEl estudio del cambio en el rendimiento del algoritmo con el cambio en el orden del tamaño de la entrada se define como análisis asintótico.\r\n\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/__vX2sjlpXU?si=6kNNViwmtbQpL-l6&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iOq5kSKqeR4?si=WDuHkoxYHijzw15T&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HcDV5MGGrRE?si=EJaMf0X9rYYb-nGy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Notación Big O\r\n\r\nLa Notación Big O describe qué tan bien escala un algoritmo con el tamaño de la entrada. Se utiliza para describir el peor escenario de un algoritmo y para analizar su eficiencia en términos de tiempo o espacio. La Notación Big O se utiliza para comparar algoritmos y determinar cuál es más eficiente.\r\n\r\nEn términos más específicos, la Notación Big O proporciona una cota superior asintótica para la complejidad temporal o espacial de un algoritmo en el peor de los casos. Por ejemplo, si un algoritmo tiene una complejidad temporal O(n), significa que el tiempo de ejecución del algoritmo crece de manera lineal con el tamaño de la entrada.\r\n\r\nUsar la Notación Big O permite a los desarrolladores entender cómo se comportará un algoritmo a medida que la entrada crece hacia el infinito y facilita la comparación de algoritmos en términos de eficiencia en el peor de los casos.\r\n\r\n* [Medium](https://medium.com/nowports-tech/introducción-a-big-o-notation-95ecca8bd866)\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UPDjjuz1Hkw?si=mmpZbum0EcrFaCuh\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Notación Big Theta\r\n\r\nMientras que la Notación Big O se refiere al límite superior de una función, la Notación Big Theta se refiere al límite exacto de una función. La Notación Big Theta se utiliza para describir la tasa de crecimiento exacta de una función y se denota por el símbolo Θ.\r\n\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YTNDenBezfE?si=ybyMypVVi0zGhqxL\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Notación Big Omega\r\n\r\nLa notación Big Omega se utiliza para describir el límite inferior de una función. Es opuesta a la notación Big O. Mientras que Big O se utiliza para describir el peor escenario de un algoritmo, Big Omega se utiliza para describir el mejor escenario de un algoritmo.\r\n\r\n* [Khan Academy](https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation)\r\n\r\n## Tiempos de ejecución comunes\r\n\r\nA continuación se presenta la lista de complejidades temporales comunes de algoritmos. Las complejidades están enumeradas en orden ascendente de su complejidad.\r\n\r\n* O(1) - Constante\r\n* O(log n) - Logarítmica\r\n* O(n) - Lineal\r\n* O(n log n) - Linealítmica\r\n* O(n^2) - Cuadrática\r\n* O(n^3) - Cúbica\r\n* O(2^n) - Exponencial\r\n* O(n!) - Factorial\r\n* O(n^k) - Polinómica\r\n\r\n### Constante\r\n\r\nLos algoritmos de tiempo constante son los más simples y eficientes. Son algoritmos que siempre tardan la misma cantidad de tiempo en ejecutarse, independientemente del tamaño de la entrada. Este es el escenario ideal para un algoritmo y es el objetivo de todos los algoritmos.\r\n\r\n### Logarítmica\r\n\r\nLos algoritmos de complejidad logarítmica son los segundos más rápidos. Son más rápidos que los algoritmos lineales, pero más lentos que los algoritmos constantes.\r\n\r\n### Lineal\r\n\r\nLos algoritmos lineales son aquellos cuyo tiempo de ejecución es directamente proporcional al tamaño de la entrada. Esto significa que el tiempo de ejecución del algoritmo aumentará linealmente con el tamaño de la entrada. Por ejemplo, si el tamaño de la entrada es 10, el tiempo de ejecución será 10 veces el tiempo de ejecución del algoritmo cuando el tamaño de la entrada es 1. Si el tamaño de la entrada es 100, el tiempo de ejecución será 100 veces el tiempo de ejecución del algoritmo cuando el tamaño de la entrada es 1.\r\n\r\n### Exponencial\r\n\r\nLos algoritmos exponenciales son aquellos que crecen a una tasa de 2^n. Esto significa que por cada entrada adicional, el algoritmo tomará el doble de tiempo en ejecutarse. La siguiente función es un ejemplo de un algoritmo exponencial:\r\n\r\n```python\r\n    def exponential(n):\r\n        if n == 0:\r\n            return 1\r\n        return 2 * exponential(n - 1)\r\n```\r\n\r\nComo puedes ver, el tiempo de ejecución del algoritmo crece exponencialmente. Por cada entrada adicional, el algoritmo tomará el doble de tiempo en ejecutarse. Este tipo de crecimiento puede llevar a un rendimiento significativamente más lento a medida que aumenta el tamaño de la entrada.\r\n\r\n### Factorial\r\n\r\nLos algoritmos con complejidad factorial tienen un tiempo de ejecución de O(n!). Este es el peor escenario para un algoritmo. Los algoritmos con complejidad factorial son muy ineficientes y deben evitarse siempre que sea posible. La complejidad factorial implica un crecimiento extremadamente rápido del tiempo de ejecución a medida que aumenta el tamaño de la entrada, lo que hace que estos algoritmos sean impracticables para conjuntos de datos grandes.\r\n\r\n```python\r\n    def factorial(n):\r\n        if n == 0:\r\n            return 1\r\n        else:\r\n            return n * factorial(n-1)\r\n```\r\n\r\n### Polinómica\r\n\r\nLos algoritmos polinómicos son aquellos cuyo tiempo de ejecución es una función polinómica del tamaño de la entrada. Esto significa que el tiempo de ejecución es una función de la forma n^k, donde k es una constante. Por ejemplo, el tiempo de ejecución del siguiente algoritmo es n^2:\r\n\r\n```python\r\n    def polynomial_algorithm(n):\r\n        for i in range(n):\r\n            for j in range(n):\r\n                print(i, j)\r\n```","src/content/blog/notaciones-asintoticas/index.md","2eaef3e7155dc7d5",{"html":998,"metadata":999},"\u003Cp>La eficiencia de un algoritmo depende de la cantidad de tiempo, almacenamiento y otros recursos necesarios para ejecutarlo. La eficiencia se mide con la ayuda de notaciones asintóticas.\u003C/p>\n\u003Cp>Un algoritmo puede no tener el mismo rendimiento para diferentes tipos de entradas. Con el aumento del tamaño de la entrada, el rendimiento cambiará.\u003C/p>\n\u003Cp>El estudio del cambio en el rendimiento del algoritmo con el cambio en el orden del tamaño de la entrada se define como análisis asintótico.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation\">Khan Academy\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/__vX2sjlpXU?si=6kNNViwmtbQpL-l6&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iOq5kSKqeR4?si=WDuHkoxYHijzw15T&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HcDV5MGGrRE?si=EJaMf0X9rYYb-nGy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"notación-big-o\">Notación Big O\u003C/h2>\n\u003Cp>La Notación Big O describe qué tan bien escala un algoritmo con el tamaño de la entrada. Se utiliza para describir el peor escenario de un algoritmo y para analizar su eficiencia en términos de tiempo o espacio. La Notación Big O se utiliza para comparar algoritmos y determinar cuál es más eficiente.\u003C/p>\n\u003Cp>En términos más específicos, la Notación Big O proporciona una cota superior asintótica para la complejidad temporal o espacial de un algoritmo en el peor de los casos. Por ejemplo, si un algoritmo tiene una complejidad temporal O(n), significa que el tiempo de ejecución del algoritmo crece de manera lineal con el tamaño de la entrada.\u003C/p>\n\u003Cp>Usar la Notación Big O permite a los desarrolladores entender cómo se comportará un algoritmo a medida que la entrada crece hacia el infinito y facilita la comparación de algoritmos en términos de eficiencia en el peor de los casos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://medium.com/nowports-tech/introducci%C3%B3n-a-big-o-notation-95ecca8bd866\">Medium\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation\">Khan Academy\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UPDjjuz1Hkw?si=mmpZbum0EcrFaCuh\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"notación-big-theta\">Notación Big Theta\u003C/h2>\n\u003Cp>Mientras que la Notación Big O se refiere al límite superior de una función, la Notación Big Theta se refiere al límite exacto de una función. La Notación Big Theta se utiliza para describir la tasa de crecimiento exacta de una función y se denota por el símbolo Θ.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation\">Khan Academy\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YTNDenBezfE?si=ybyMypVVi0zGhqxL\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"notación-big-omega\">Notación Big Omega\u003C/h2>\n\u003Cp>La notación Big Omega se utiliza para describir el límite inferior de una función. Es opuesta a la notación Big O. Mientras que Big O se utiliza para describir el peor escenario de un algoritmo, Big Omega se utiliza para describir el mejor escenario de un algoritmo.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation\">Khan Academy\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"tiempos-de-ejecución-comunes\">Tiempos de ejecución comunes\u003C/h2>\n\u003Cp>A continuación se presenta la lista de complejidades temporales comunes de algoritmos. Las complejidades están enumeradas en orden ascendente de su complejidad.\u003C/p>\n\u003Cul>\n\u003Cli>O(1) - Constante\u003C/li>\n\u003Cli>O(log n) - Logarítmica\u003C/li>\n\u003Cli>O(n) - Lineal\u003C/li>\n\u003Cli>O(n log n) - Linealítmica\u003C/li>\n\u003Cli>O(n^2) - Cuadrática\u003C/li>\n\u003Cli>O(n^3) - Cúbica\u003C/li>\n\u003Cli>O(2^n) - Exponencial\u003C/li>\n\u003Cli>O(n!) - Factorial\u003C/li>\n\u003Cli>O(n^k) - Polinómica\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"constante\">Constante\u003C/h3>\n\u003Cp>Los algoritmos de tiempo constante son los más simples y eficientes. Son algoritmos que siempre tardan la misma cantidad de tiempo en ejecutarse, independientemente del tamaño de la entrada. Este es el escenario ideal para un algoritmo y es el objetivo de todos los algoritmos.\u003C/p>\n\u003Ch3 id=\"logarítmica\">Logarítmica\u003C/h3>\n\u003Cp>Los algoritmos de complejidad logarítmica son los segundos más rápidos. Son más rápidos que los algoritmos lineales, pero más lentos que los algoritmos constantes.\u003C/p>\n\u003Ch3 id=\"lineal\">Lineal\u003C/h3>\n\u003Cp>Los algoritmos lineales son aquellos cuyo tiempo de ejecución es directamente proporcional al tamaño de la entrada. Esto significa que el tiempo de ejecución del algoritmo aumentará linealmente con el tamaño de la entrada. Por ejemplo, si el tamaño de la entrada es 10, el tiempo de ejecución será 10 veces el tiempo de ejecución del algoritmo cuando el tamaño de la entrada es 1. Si el tamaño de la entrada es 100, el tiempo de ejecución será 100 veces el tiempo de ejecución del algoritmo cuando el tamaño de la entrada es 1.\u003C/p>\n\u003Ch3 id=\"exponencial\">Exponencial\u003C/h3>\n\u003Cp>Los algoritmos exponenciales son aquellos que crecen a una tasa de 2^n. Esto significa que por cada entrada adicional, el algoritmo tomará el doble de tiempo en ejecutarse. La siguiente función es un ejemplo de un algoritmo exponencial:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> exponential\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> exponential(n \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Como puedes ver, el tiempo de ejecución del algoritmo crece exponencialmente. Por cada entrada adicional, el algoritmo tomará el doble de tiempo en ejecutarse. Este tipo de crecimiento puede llevar a un rendimiento significativamente más lento a medida que aumenta el tamaño de la entrada.\u003C/p>\n\u003Ch3 id=\"factorial\">Factorial\u003C/h3>\n\u003Cp>Los algoritmos con complejidad factorial tienen un tiempo de ejecución de O(n!). Este es el peor escenario para un algoritmo. Los algoritmos con complejidad factorial son muy ineficientes y deben evitarse siempre que sea posible. La complejidad factorial implica un crecimiento extremadamente rápido del tiempo de ejecución a medida que aumenta el tamaño de la entrada, lo que hace que estos algoritmos sean impracticables para conjuntos de datos grandes.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> factorial\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> factorial(n\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"polinómica\">Polinómica\u003C/h3>\n\u003Cp>Los algoritmos polinómicos son aquellos cuyo tiempo de ejecución es una función polinómica del tamaño de la entrada. Esto significa que el tiempo de ejecución es una función de la forma n^k, donde k es una constante. Por ejemplo, el tiempo de ejecución del siguiente algoritmo es n^2:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> polynomial_algorithm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(i, j)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":1000,"localImagePaths":1031,"remoteImagePaths":1032,"frontmatter":1033,"imagePaths":1035},[1001,1004,1007,1010,1013,1016,1019,1022,1025,1028],{"depth":76,"slug":1002,"text":1003},"notación-big-o","Notación Big O",{"depth":76,"slug":1005,"text":1006},"notación-big-theta","Notación Big Theta",{"depth":76,"slug":1008,"text":1009},"notación-big-omega","Notación Big Omega",{"depth":76,"slug":1011,"text":1012},"tiempos-de-ejecución-comunes","Tiempos de ejecución comunes",{"depth":211,"slug":1014,"text":1015},"constante","Constante",{"depth":211,"slug":1017,"text":1018},"logarítmica","Logarítmica",{"depth":211,"slug":1020,"text":1021},"lineal","Lineal",{"depth":211,"slug":1023,"text":1024},"exponencial","Exponencial",{"depth":211,"slug":1026,"text":1027},"factorial","Factorial",{"depth":211,"slug":1029,"text":1030},"polinómica","Polinómica",[],[],{"rutas":1034,"title":991,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":152},[30],[],"notaciones-asintoticas/index.md","estructura-datos",{"id":1037,"data":1039,"body":1044,"filePath":1045,"digest":1046,"rendered":1047,"legacyId":1111},{"rutas":1040,"title":1041,"description":16,"lang":17,"dir":18,"pubDate":1042,"updatedDate":1043},[30],"Estructuras de datos",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"Como su nombre indica, una Estructura de Datos es una forma de organizar los datos en la memoria para que puedan utilizarse de manera eficiente. Algunas estructuras de datos comunes incluyen arrays, listas enlazadas, pilas, tablas hash, colas, árboles, montículos y grafos.\r\n\r\n## ¿Por qué necesitamos Estructuras de Datos?\r\nAsí como las estructuras de datos son usadas para almacenar datos de una forma organizada, y dado que los datos son la entidad más crucial en informática, el verdadero valor de las estructuras de datos es claro.\r\n\r\nNo importa qué problema estés resolviendo, de un modo u otro tienes que tratar con datos — ya sea el salario de un empleado, precios de acciones, una lista de compras, o incluso un directorio telefónico simple.\r\n\r\nBasado en diferentes escenarios, los datos necesitan ser almacenados en un formato específico. Tenemos un puñado de estructuras de datos que cubren nuestra necesidad de almacenar datos en distintos formatos.\r\n\r\n* [Las principales estructuras de datos](https://www.freecodecamp.org/espanol/news/las-principales-estructuras-de-datos-que-deberias-saber-para-tu-proxima-entrevista-de-programacion)\r\n* [Curso Coursera](https://www.coursera.org/learn/data-structures-optimizing-performance)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5k2DWMRTXMM?si=433Sl6adzElIQTSs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Linked list (Listas enlazadas)\r\n\r\nLos arrays almacenan elementos en ubicaciones de memoria contiguas, lo que resulta en direcciones fácilmente calculables para los elementos almacenados y permite un acceso más rápido a un elemento en un índice específico. Las listas enlazadas son menos rígidas en su estructura de almacenamiento, y generalmente los elementos no se almacenan en ubicaciones contiguas, por lo que necesitan ser almacenados con etiquetas adicionales que proporcionen una referencia al siguiente elemento. Esta diferencia en el esquema de almacenamiento de datos determina qué estructura de datos sería más adecuada para una situación dada.\r\n\r\nLa implementación de una lista enlazada puede variar dependiendo del lenguaje de programación. Aquí te dejo un ejemplo básico de cómo se podría implementar una lista enlazada en JavaScript:\r\n\r\n```js\r\n// Definir la clase Nodo\r\nclass Node {\r\n  constructor(data) {\r\n    this.data = data;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n// Definir la clase ListaEnlazada\r\nclass LinkedList {\r\n  constructor() {\r\n    this.head = null;\r\n  }\r\n\r\n  // Método para agregar un nuevo nodo al final de la lista\r\n  append(data) {\r\n    const newNode = new Node(data);\r\n\r\n    if (!this.head) {\r\n      this.head = newNode;\r\n      return;\r\n    }\r\n\r\n    let current = this.head;\r\n    while (current.next) {\r\n      current = current.next;\r\n    }\r\n\r\n    current.next = newNode;\r\n  }\r\n\r\n  // Método para imprimir la lista\r\n  print() {\r\n    let current = this.head;\r\n    while (current) {\r\n      console.log(current.data);\r\n      current = current.next;\r\n    }\r\n  }\r\n}\r\n\r\n// Ejemplo de uso\r\nconst listaEnlazada = new LinkedList();\r\nlistaEnlazada.append(1);\r\nlistaEnlazada.append(2);\r\nlistaEnlazada.append(3);\r\n\r\nlistaEnlazada.print();\r\n```\r\nEn este ejemplo, la clase Node representa un nodo de la lista con un valor (data) y una referencia al siguiente nodo (next). La clase LinkedList tiene un puntero a la cabeza de la lista (head) y métodos para agregar nodos al final (append) e imprimir la lista (print).\r\n\r\nLas listas enlazadas se utilizan en diversos contextos, como por ejemplo:\r\n\r\n1. Implementación de pilas y colas.\r\n1. Implementación de gráficos: la representación de gráficos de listas de adyacencia es la más popular, que utiliza una lista vinculada para almacenar vértices adyacentes.\r\n1. Asignación de memoria dinámica: se utiliza una lista enlazada de bloques libres.\r\n1. Mantenimiento del directorio de nombres.\r\n1. Realización de operaciones aritméticas con números enteros largos\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Lista_enlazada)\r\n* [FreeCodeCamp](https://www.freecodecamp.org/espanol/news/como-implementar-una-lista-vinculada-en-javascript/)\r\n\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/F8AbOfQwl1c?si=v0CVejRmEOt0H2AW&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MThabgtlmDM?si=qKbs2BL9ttWNp3dZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Stack (Pila)\r\n\r\nUna pila es una colección lineal de elementos donde los elementos se insertan y se eliminan en un orden específico. También se llama una Estructura de Datos LIFO (Last In, First Out) porque sigue el principio \"último en entrar, primero en salir\", es decir, el elemento que se inserta en último lugar es el primero en ser retirado.\r\n\r\nAquí te dejo un ejemplo básico de cómo se podría implementar una pila en JavaScript:\r\n\r\n```js\r\nclass Stack {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    // Agrega un elemento a la pila\r\n    push(element) {\r\n        this.items.push(element);\r\n    }\r\n\r\n    // Elimina un elemento de la pila\r\n    pop() {\r\n        if (this.items.length == 0)\r\n            return \"Underflow\";\r\n        return this.items.pop();\r\n    }\r\n\r\n    // Devuelve el elemento superior de la pila\r\n    peek() {\r\n        return this.items[this.items.length - 1];\r\n    }\r\n\r\n    // Verifica si la pila está vacía\r\n    isEmpty() {\r\n        return this.items.length == 0;\r\n    }\r\n\r\n    // Imprime los elementos de la pila\r\n    printStack() {\r\n        var str = \"\";\r\n        for (var i = 0; i \u003C this.items.length; i++)\r\n            str += this.items[i] + \" \";\r\n        return str;\r\n    }\r\n}\r\n\r\n// Usando la pila\r\nvar stack = new Stack();\r\n\r\nconsole.log(stack.isEmpty()); // devuelve true\r\n\r\nstack.push(10);\r\nstack.push(20);\r\nstack.push(30);\r\n\r\nconsole.log(stack.printStack()); // imprime 10 20 30\r\nconsole.log(stack.peek()); // imprime 30\r\n\r\nstack.pop();\r\nconsole.log(stack.printStack()); // imprime 10 20\r\n```\r\nEn este código, la clase Stack tiene métodos para agregar un elemento a la pila (push), eliminar un elemento de la pila (pop), ver el elemento superior de la pila (peek), verificar si la pila está vacía (isEmpty) e imprimir los elementos de la pila (printStack).\r\n\r\nLas pilas se utilizan en diversos contextos, como por ejemplo:\r\n\r\n1. Para evaluar expresiones con operandos y operaciones.\r\n1. En el historial de navegación web, donde cada nueva página visitada se añade a la pila y podemos retroceder en el historial.\r\n1. En compiladores, sistemas operativos y programas de aplicaciones, para la organización de la memoria.\r\n1. Para la evaluación de expresiones aritméticas en notación postfija.\r\n1. En la implementación de funciones de deshacer en editores de texto.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Pila_(informática))\r\n* [Medium](https://medium.com/noders/estructuras-de-datos-con-javascript-parte-1-pilas-stacks-5a2092cff16a)\r\n* [UAS](http://galvez.milibreta.com.mx/UAS/Estructura%20de%20Datos/4.-%20Pilas.pdf)\r\n        \r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KcT3aVgrrpU?si=yJng6jQ3y7CxynNr&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Queue (Cola)\r\n\r\nUna cola es una colección lineal de elementos donde los elementos se insertan y se eliminan en un orden particular. La cola también se llama una Estructura de Datos FIFO (First In, First Out) porque sigue el principio \"primero en entrar, primero en salir\", es decir, el elemento que se inserta primero es el primero en ser retirado.\r\n\r\nAquí te dejo un ejemplo básico de cómo se podría implementar una cola en JavaScript:\r\n```js\r\nclass Queue {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n\r\n    // Agrega un elemento al final de la cola\r\n    enqueue(element) {\r\n        this.items.push(element);\r\n    }\r\n\r\n    // Elimina un elemento del frente de la cola\r\n    dequeue() {\r\n        if(this.isEmpty())\r\n            return \"Underflow\";\r\n        return this.items.shift();\r\n    }\r\n\r\n    // Devuelve el elemento del frente de la cola\r\n    front() {\r\n        if(this.isEmpty())\r\n            return \"No elements in Queue\";\r\n        return this.items[0];\r\n    }\r\n\r\n    // Verifica si la cola está vacía\r\n    isEmpty() {\r\n        return this.items.length == 0;\r\n    }\r\n\r\n    // Imprime los elementos de la cola\r\n    printQueue() {\r\n        var str = \"\";\r\n        for(var i = 0; i \u003C this.items.length; i++)\r\n            str += this.items[i] +\" \";\r\n        return str;\r\n    }\r\n}\r\n\r\n// Usando la cola\r\nvar queue = new Queue();\r\n\r\nconsole.log(queue.isEmpty()); // devuelve true\r\n\r\nqueue.enqueue(10);\r\nqueue.enqueue(20);\r\nqueue.enqueue(30);\r\n\r\nconsole.log(queue.printQueue()); // imprime 10 20 30\r\nconsole.log(queue.front()); // imprime 10\r\n\r\nqueue.dequeue();\r\nconsole.log(queue.printQueue()); // imprime 20 30\r\n```\r\nEn este caso, Queue es una clase que representa una cola. Los elementos se agregan al inicio de la lista y se quitan desde el final, siguiendo el principio FIFO.\r\n\r\nLas colas se utilizan en diversos contextos, como por ejemplo:\r\n\r\n1. En sistemas de atención al cliente, donde cada nuevo cliente se añade al final de la cola y se atiende en el orden en que llegó.\r\n1. En la gestión de operaciones, para analizar y optimizar diferentes aspectos relacionados con el flujo de personas o productos en un sistema.\r\n1. En la logística y el transporte, para diseñar rutas y horarios eficientes, considerando el tiempo de espera en los puntos de carga y descarga.\r\n1. En la gestión de inventarios, permitiendo determinar los niveles óptimos de stock y reordenamiento.\r\n\r\n* [Wiki - Buffer Circular](https://es.wikipedia.org/wiki/Buffer_circular)\r\n* [Teoría de colas](https://polaridad.es/que-es-la-teoria-de-colas/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D6gu-_tmEpQ?si=Eq7antYvS-iWQH88&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Hash Table\r\n\r\nHash Table, Map, HashMap, Dictionary y Asociative son todos nombres para la misma estructura de datos. Es una de las estructuras de datos más comúnmente utilizadas.\r\n\r\nEs una estructura de datos que implementa el tipo de dato abstracto llamado diccionario. Esta asocia llaves o claves con valores. La operación principal que soporta de manera eficiente es la búsqueda: permite el acceso a los elementos almacenados a partir de una clave generada. Funciona transformando la clave con una función hash en un hash, un número que identifica la posición donde la tabla hash localiza el valor deseado.\r\n\r\nLas tablas hash se suelen implementar sobre vectores de una dimensión, aunque se pueden hacer implementaciones multi-dimensionales basadas en varias claves.\r\nAquí te dejo un ejemplo básico de cómo se podría implementar una tabla hash en JavaScript:\r\n\r\n```js\r\nclass HashTable {\r\n    constructor() {\r\n        this.table = {};\r\n    }\r\n\r\n    // Agrega un elemento a la tabla hash\r\n    put(key, value) {\r\n        this.table[key] = value;\r\n    }\r\n\r\n    // Obtiene un elemento de la tabla hash\r\n    get(key) {\r\n        return this.table[key];\r\n    }\r\n\r\n    // Elimina un elemento de la tabla hash\r\n    remove(key) {\r\n        delete this.table[key];\r\n    }\r\n\r\n    // Imprime los elementos de la tabla hash\r\n    printTable() {\r\n        for (let key in this.table) {\r\n            if (this.table.hasOwnProperty(key)) {\r\n                console.log(key + \" -> \" + this.table[key]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Usando la tabla hash\r\nvar hashTable = new HashTable();\r\n\r\nhashTable.put(\"name\", \"John\");\r\nhashTable.put(\"age\", 30);\r\nhashTable.put(\"city\", \"New York\");\r\n\r\nhashTable.printTable(); // imprime name -> John, age -> 30, city -> New York\r\nconsole.log(hashTable.get(\"name\")); // imprime John\r\n\r\nhashTable.remove(\"name\");\r\nhashTable.printTable(); // imprime age -> 30, city -> New York\r\n```\r\nEn este código, la clase HashTable tiene métodos para agregar un elemento a la tabla hash (put), obtener un elemento de la tabla hash (get), eliminar un elemento de la tabla hash (remove) e imprimir los elementos de la tabla hash (printTable).\r\n\r\nLas tablas hash se utilizan en diversos contextos, como por ejemplo:\r\n\r\n1. En bases de datos para la indexación.\r\n1. En estructuras de datos basadas en disco.\r\n1. En algunos lenguajes de programación como Python y JavaScript, se usa para implementar objetos.\r\n1. Para el mapeo de caché para un acceso rápido a los datos.\r\n1. Para la verificación de contraseña.\r\n1. Se usa en criptografía como un resumen de mensaje.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Tabla_hash)\r\n* [Aplicaciones](https://barcelonageeks.com/aplicaciones-ventajas-y-desventajas-de-la-estructura-de-datos-hash/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/knV86FlSXJ8?si=0K47DWabmOTWdCLV&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LluB6jU-SwY?si=GNNpOhRRo-RL35Lm\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n## Tree (Árbol)\r\n\r\nUn árbol es una estructura de datos que simula una estructura de árbol jerárquica, con un valor raíz y subárboles de hijos con un nodo padre.\r\n\r\nSe define de forma recursiva como una colección de nodos, empezando por un nodo raíz, donde cada nodo es una estructura de datos que contiene un valor, y opcionalmente una lista de referencias a otros nodos (sus hijos), con la limitación de que ninguna referencia esté duplicada, y que ninguna apunte al nodo raíz.\r\n\r\nLos árboles se utilizan en diversos contextos, como por ejemplo:\r\n\r\n2. En la representación de jerarquías.\r\n2. En la estructura del DOM (Document Object Model) en desarrollo web.\r\n2. En algoritmos de aprendizaje supervisado no paramétrico, como los árboles de decisión.\r\n2. En la representación de grafos acíclicos dirigidos y mínimamente conectados.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Árbol_(informática))\r\n* [Medium](https://medium.com/laboratoria-developers/árboles-trees-51783ba4ebe5)\r\n* [Geeks for geeks](https://www.geeksforgeeks.org/introduction-to-tree-data-structure-and-algorithm-tutorials/)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tBaOQeyXYqg?si=qqUDXPU_nA7pMvyY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Qexq1k8LB6k?si=6aecFvk-xmiEjWxY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Binary Tree (Árbol Binario)\r\n\r\nUn árbol binario es una estructura de datos en forma de árbol en la que cada nodo puede tener como máximo dos hijos, conocidos como el hijo izquierdo y el hijo derecho.\r\n\r\n```js\r\nclass Node {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    // Agrega un nodo al árbol binario\r\n    add(data) {\r\n        const newNode = new Node(data);\r\n\r\n        if (this.root === null) {\r\n            this.root = newNode;\r\n        } else {\r\n            this.insertNode(this.root, newNode);\r\n        }\r\n    }\r\n\r\n    // Inserta un nodo en el árbol binario\r\n    insertNode(node, newNode) {\r\n        if (newNode.data \u003C node.data) {\r\n            if (node.left === null) {\r\n                node.left = newNode;\r\n            } else {\r\n                this.insertNode(node.left, newNode);\r\n            }\r\n        } else {\r\n            if (node.right === null) {\r\n                node.right = newNode;\r\n            } else {\r\n                this.insertNode(node.right, newNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Recorre el árbol binario en orden\r\n    inorder(node) {\r\n        if (node !== null) {\r\n            this.inorder(node.left);\r\n            console.log(node.data);\r\n            this.inorder(node.right);\r\n        }\r\n    }\r\n}\r\n\r\n// Usando el árbol binario\r\nconst BT = new BinaryTree();\r\n\r\nBT.add(15);\r\nBT.add(25);\r\nBT.add(10);\r\nBT.add(7);\r\nBT.add(22);\r\nBT.add(17);\r\nBT.add(13);\r\nBT.add(5);\r\nBT.add(9);\r\nBT.add(27);\r\n\r\nBT.inorder(BT.root); // imprime los nodos en orden\r\n```\r\nEn este código, la clase `Node` representa un nodo en el árbol binario. Cada nodo tiene un `data` que almacena el valor del nodo, un `left` que es el nodo hijo izquierdo y un `right` que es el nodo hijo derecho.\r\n\r\nLa clase `BinaryTree` representa el árbol binario. Tiene un `root` que es el nodo raíz del árbol. También tiene métodos para agregar un nodo al árbol (`add`), insertar un nodo en el árbol (`insertNode`), y recorrer el árbol en orden (`inorder`).\r\n\r\nEliminar un nodo en un árbol binario de búsqueda en JavaScript puede ser un poco complicado porque hay varias situaciones que debes considerar:\r\n\r\n* El nodo a eliminar es una hoja (no tiene hijos).\r\n* El nodo a eliminar tiene un solo hijo.\r\n* El nodo a eliminar tiene dos hijos.\r\n\r\nAquí te muestro cómo puedes hacerlo:\r\n\r\n```js\r\nclass Node {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n\r\nclass BinaryTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    // ... otros métodos ...\r\n\r\n    // Elimina un nodo del árbol binario\r\n    remove(data) {\r\n        this.root = this.removeNode(this.root, data);\r\n    }\r\n\r\n    // Elimina un nodo del árbol binario\r\n    removeNode(node, key) {\r\n        if (node === null) {\r\n            return null;\r\n        } else if (key \u003C node.data) {\r\n            node.left = this.removeNode(node.left, key);\r\n            return node;\r\n        } else if (key > node.data) {\r\n            node.right = this.removeNode(node.right, key);\r\n            return node;\r\n        } else {\r\n            if (node.left === null && node.right === null) {\r\n                node = null;\r\n                return node;\r\n            }\r\n\r\n            if (node.left === null) {\r\n                node = node.right;\r\n                return node;\r\n            } else if (node.right === null) {\r\n                node = node.left;\r\n                return node;\r\n            }\r\n\r\n            let aux = this.findMinNode(node.right);\r\n            node.data = aux.data;\r\n\r\n            node.right = this.removeNode(node.right, aux.data);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    // Encuentra el nodo con el valor mínimo\r\n    findMinNode(node) {\r\n        if (node.left === null)\r\n            return node;\r\n        else\r\n            return this.findMinNode(node.left);\r\n    }\r\n}\r\n\r\n// Usando el árbol binario\r\nconst BT = new BinaryTree();\r\n\r\nBT.add(15);\r\nBT.add(25);\r\nBT.add(10);\r\nBT.add(7);\r\nBT.add(22);\r\nBT.add(17);\r\nBT.add(13);\r\nBT.add(5);\r\nBT.add(9);\r\nBT.add(27);\r\n\r\nBT.remove(5);\r\nBT.inorder(BT.root); // imprime los nodos en orden\r\n```\r\nEn este código, la clase `BinaryTree` tiene un método `remove` que elimina un nodo del árbol. Este método llama a `removeNode`, que es un método recursivo que busca el nodo a eliminar y lo elimina de acuerdo a las reglas mencionadas anteriormente. Si el nodo a eliminar tiene dos hijos, se busca el nodo con el valor mínimo en el subárbol derecho (usando `findMinNode`), se copia su valor al nodo a eliminar y luego se elimina el nodo con el valor mínimo.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Árbol_binario)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lMTaNbJAqvM?si=fPKLyNyf000miUDy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OVCNzj5BMcs?si=e743J4LBlimMTLUC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Binary Search Tree (Árbol de búsqueda binaria)\r\n\r\nUn árbol de búsqueda binaria, también llamado árbol binario ordenado o clasificado, es una estructura de datos de árbol binario con raíz, donde la clave de cada nodo interno es mayor que todas las claves en el subárbol izquierdo respectivo y menor que las claves en el subárbol derecho.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Árbol_binario_de_búsqueda)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/G1VS5FbtMS4?si=X4AawVivg3NszN4J\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FAQGCkhcfnA?si=B11M6AiKdmBbw10P\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Full Binary Tree (Árbol binario propio)\r\n\r\nUn árbol binario propio es un tipo especial de árbol binario en el que cada nodo padre o nodo interno tiene ya sea dos o ningún hijo. También se conoce como un árbol binario propio.\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"https://cdn.programiz.com/sites/tutorial2program/files/full-binary-tree_0.png\" width=\"300\" alt=\"Árbol binario propio\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>\u003Ca href=\"https://www.programiz.com/dsa/full-binary-tree\" target=\"_blank\">Árbol binario propio\u003C/a>\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\n* [Geeks for Geeks - Opción de traducir](https://www.geeksforgeeks.org/types-of-binary-tree/)\r\n\r\n### Complete Binary Tree (Árbol binario completo)\r\n\r\nUn árbol binario completo es un árbol binario en el que todos los niveles están completamente llenos, excepto posiblemente el más bajo, que se llena desde la izquierda.\r\n\r\nUn árbol binario completo es similar a un árbol binario propio, pero con dos diferencias importantes:\r\n\r\n1. Todos los elementos hoja deben inclinarse hacia la izquierda.\r\n1. El último elemento hoja puede no tener un hermano derecho, es decir, un árbol binario completo no tiene que ser un árbol binario propio.\r\n\r\n* [Geeks for Geeks - Opción de traducir](https://www.geeksforgeeks.org/complete-binary-tree/)\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"https://cdn.programiz.com/sites/tutorial2program/files/complete-binary-tree_0.png\" width=\"300\" alt=\"Árbol binario completo\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>\u003Ca href=\"https://www.programiz.com/dsa/complete-binary-tree\" target=\"_blank\">Árbol binario completo\u003C/a>\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\n### Balanced Tree (Árbol binario equilibrado)\r\n\r\nUn árbol binario equilibrado, también conocido como árbol binario balanceado en altura, se define como un árbol binario en el que la diferencia de altura entre el subárbol izquierdo y el subárbol derecho de cualquier nodo no es mayor que 1.\r\n\r\nAquí te muestro cómo puedes implementar un árbol AVL en JavaScript:\r\n```js\r\nclass Node {\r\n    constructor(data, left = null, right = null) {\r\n        this.data = data;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.height = 1;\r\n    }\r\n}\r\n\r\nclass AVLTree {\r\n    constructor() {\r\n        this.root = null;\r\n    }\r\n\r\n    getHeight(node) {\r\n        if (node === null) {\r\n            return 0;\r\n        }\r\n        return node.height;\r\n    }\r\n\r\n    getBalance(node) {\r\n        if (node === null) {\r\n            return 0;\r\n        }\r\n        return this.getHeight(node.left) - this.getHeight(node.right);\r\n    }\r\n\r\n    leftRotate(node) {\r\n        let rightNode = node.right;\r\n        let rightLeftNode = rightNode.left;\r\n\r\n        rightNode.left = node;\r\n        node.right = rightLeftNode;\r\n\r\n        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;\r\n        rightNode.height = Math.max(this.getHeight(rightNode.left), this.getHeight(rightNode.right)) + 1;\r\n\r\n        return rightNode;\r\n    }\r\n\r\n    rightRotate(node) {\r\n        let leftNode = node.left;\r\n        let leftRightNode = leftNode.right;\r\n\r\n        leftNode.right = node;\r\n        node.left = leftRightNode;\r\n\r\n        node.height = Math.max(this.getHeight(node.left), this.getHeight(node.right)) + 1;\r\n        leftNode.height = Math.max(this.getHeight(leftNode.left), this.getHeight(leftNode.right)) + 1;\r\n\r\n        return leftNode;\r\n    }\r\n\r\n    insert(data) {\r\n        this.root = this.insertNode(this.root, data);\r\n    }\r\n\r\n    insertNode(node, data) {\r\n        if (node === null) {\r\n            return new Node(data);\r\n        } else if (data \u003C node.data) {\r\n            node.left = this.insertNode(node.left, data);\r\n        } else if (data > node.data) {\r\n            node.right = this.insertNode(node.right, data);\r\n        } else {\r\n            return node;\r\n        }\r\n\r\n        node.height = 1 + Math.max(this.getHeight(node.left), this.getHeight(node.right));\r\n\r\n        let balance = this.getBalance(node);\r\n\r\n        if (balance > 1 && data \u003C node.left.data) {\r\n            return this.rightRotate(node);\r\n        }\r\n\r\n        if (balance \u003C -1 && data > node.right.data) {\r\n            return this.leftRotate(node);\r\n        }\r\n\r\n        if (balance > 1 && data > node.left.data) {\r\n            node.left = this.leftRotate(node.left);\r\n            return this.rightRotate(node);\r\n        }\r\n\r\n        if (balance \u003C -1 && data \u003C node.right.data) {\r\n            node.right = this.rightRotate(node.right);\r\n            return this.leftRotate(node);\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\n// Usando el árbol AVL\r\nlet avlTree = new AVLTree();\r\navlTree.insert(10);\r\navlTree.insert(20);\r\navlTree.insert(30);\r\navlTree.insert(40);\r\navlTree.insert(50);\r\navlTree.insert(25);\r\n```\r\nEn este código, la clase `Node` representa un nodo en el árbol AVL. Cada nodo tiene un `data` que almacena el valor del nodo, un `left` que es el nodo hijo izquierdo, un `right` que es el nodo hijo derecho, y una `height` que es la altura del nodo.\r\n\r\nLa clase `AVLTree` representa el árbol AVL. Tiene un `root` que es el nodo raíz del árbol. También tiene métodos para obtener la altura de un nodo (`getHeight`), obtener el factor de equilibrio de un nodo (`getBalance`), rotar un nodo a la izquierda (`leftRotate`), rotar un nodo a la derecha (`rightRotate`), e insertar un nodo en el árbol (`insert`). El método `insert` llama a `insertNode`, que es un método recursivo que inserta un nodo en el árbol y luego equilibra el árbol.\r\n\r\n* [Árbol AVL](https://es.wikipedia.org/wiki/Árbol_AVL)\r\n\r\n### Unbalanced Tree (Árbol binario desequilibrado)\r\n\r\nUn árbol binario desequilibrado es aquel que no cumple con las condiciones de equilibrio, es decir, la diferencia de altura entre el subárbol izquierdo y el subárbol derecho de al menos un nodo es mayor que 1. Esto puede resultar en un rendimiento subóptimo en términos de tiempo de búsqueda y otras operaciones en comparación con árboles balanceados.\r\n\r\n## Graph (Grafo)\r\n\r\nLos grafos en estructuras de datos son estructuras de datos no lineales compuestas por un número finito de nodos o vértices y las aristas que los conectan. Los grafos en estructuras de datos se utilizan para abordar problemas del mundo real en los que representan el área del problema como una red, como en redes telefónicas, redes de circuitos y redes sociales.\r\n\r\n* [Medium](https://a01610329.medium.com/estructura-de-datos-grafos-ad9e7d91a79b)\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vnNFiNVy9KM?si=_qxiI-xL84Vga8Hl\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Directed Graph (Grafo dirigido)\r\n\r\nUn grafo dirigido es un conjunto de objetos (llamados vértices o nodos) que están conectados entre sí, donde todas las aristas están dirigidas desde un vértice hacia otro. A veces, a un grafo dirigido se le llama grafo dirigido (digraph) o red dirigida. En contraste, un grafo donde las aristas son bidireccionales se llama grafo no dirigido.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Grafo_dirigido)\r\n\r\n### Undirected Graph (Grafo no dirigido)\r\n\r\nUn grafo no dirigido es un conjunto de objetos (llamados vértices o nodos) que están conectados entre sí, donde todas las aristas son bidireccionales. A veces, a un grafo no dirigido se le llama red no dirigida. En contraste, un grafo donde las aristas tienen una dirección se llama grafo dirigido.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Grafo_no_dirigido)\r\n\r\n### Spanning Tree (Árbol de expansión)\r\n\r\nUn árbol de expansión (o spanning tree) es un subconjunto del grafo G que abarca todos los vértices con el número mínimo posible de aristas. Por lo tanto, un árbol de expansión no tiene ciclos y no puede estar desconectado.\r\n\r\n* [Wiki](https://es.wikipedia.org/wiki/Árbol_de_expansión)\r\n\r\n### Graph Representation (Representación de grafo)\r\n\r\nUn grafo puede representarse ya sea como una matriz de adyacencia o como una lista de adyacencia.\r\n\r\nLa matriz de adyacencia es una matriz 2D de tamaño V x V, donde V es el número de vértices en un grafo. Si la ranura adj[i][j] es igual a 1, indica que hay una arista desde el vértice i hacia el vértice j.\r\n\r\nLa lista de adyacencia es un array de vectores, y su tamaño es igual al número de vértices. Si la entrada array[i] representa la lista de vértices adyacentes al vértice i. Esta representación también puede usarse para representar un grafo ponderado, donde los pesos de las aristas se pueden representar como listas de pares.\r\n\r\n**Ventajas de la matriz de adyacencia:**\r\n\r\n* Las operaciones básicas, como agregar una arista, eliminar una arista y verificar si hay una arista del vértice i al vértice j, son extremadamente eficientes en tiempo, operaciones de tiempo constante.\r\n* Si el grafo es denso y el número de aristas es grande, una matriz de adyacencia debería ser la primera elección. Incluso si el grafo y la matriz de adyacencia son dispersos, podemos representarlo utilizando estructuras de datos para matrices dispersas.\r\n* Sin embargo, la mayor ventaja proviene del uso de matrices. Los avances recientes en hardware nos permiten realizar incluso operaciones de matriz costosas en la GPU.\r\n* Al realizar operaciones en la matriz adyacente, podemos obtener ideas importantes sobre la naturaleza del grafo y la relación entre sus vértices.\r\n\r\n**Desventajas de la matriz de adyacencia:**\r\n\r\n* El requisito de espacio `VxV` de la matriz de adyacencia la convierte en un devorador de memoria. Los grafos en la vida real generalmente no tienen demasiadas conexiones, y esta es la razón principal por la cual las listas de adyacencia son la mejor elección para la mayoría de las tareas.\r\n* Aunque las operaciones básicas son sencillas, operaciones como `inEdges` y `outEdges` son costosas cuando se utiliza la representación de matriz de adyacencia.\r\n\r\n**Ventajas de la lista de adyacencia:**\r\n* Una lista de adyacencia es eficiente en cuanto a almacenamiento porque solo necesitamos almacenar los valores de las aristas. Para un grafo disperso con millones de vértices y aristas, esto puede significar un ahorro considerable de espacio.\r\n* También ayuda a encontrar fácilmente todos los vértices adyacentes a un vértice específico.\r\n\r\n**Desventajas de la lista de adyacencia:**\r\n* Encontrar la lista de adyacencia no es más rápido que la matriz de adyacencia, ya que primero se deben explorar todos los nodos conectados para encontrarlos.\r\n\r\n* [Wiki - Matriz](https://es.wikipedia.org/wiki/Matriz_de_adyacencia)\r\n* [Wiki - Lista](https://es.wikipedia.org/wiki/Lista_de_adyacencia)\r\n\r\n## Heap (Montículo)\r\n\r\nUn montículo (Heap) es una estructura de datos basada en árboles que sigue las propiedades de un árbol binario completo y puede ser un Min Heap (montículo mínimo) o un Max Heap (montículo máximo).\r\n\r\n* **Min Heap**: En un Min Heap, el valor de cada nodo es menor o igual que los valores de sus hijos, lo que significa que el nodo con el valor mínimo se encuentra en la raíz del montículo.\r\n* **Max Heap**: En un Max Heap, el valor de cada nodo es mayor o igual que los valores de sus hijos, y el nodo con el valor máximo está en la raíz del montículo.\r\n\r\nLos montículos se utilizan comúnmente para implementar colas de prioridad, algoritmos de ordenamiento eficientes como HeapSort y en diversas aplicaciones donde se requiere acceso eficiente al elemento extremo (mínimo o máximo) del conjunto de datos.\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0wPlzMU-k00?si=7A9l5u6l2qLQxk1L&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pAU21g-jBiE?si=dxQ1onXc4d1eBGyI&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2DmK_H7IdTo?si=mbK1VmEHDajU8gxh&cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>","src/content/blog/estructura-datos/index.md","db21657658d01e6f",{"html":1048,"metadata":1049},"\u003Cp>Como su nombre indica, una Estructura de Datos es una forma de organizar los datos en la memoria para que puedan utilizarse de manera eficiente. Algunas estructuras de datos comunes incluyen arrays, listas enlazadas, pilas, tablas hash, colas, árboles, montículos y grafos.\u003C/p>\n\u003Ch2 id=\"por-qué-necesitamos-estructuras-de-datos\">¿Por qué necesitamos Estructuras de Datos?\u003C/h2>\n\u003Cp>Así como las estructuras de datos son usadas para almacenar datos de una forma organizada, y dado que los datos son la entidad más crucial en informática, el verdadero valor de las estructuras de datos es claro.\u003C/p>\n\u003Cp>No importa qué problema estés resolviendo, de un modo u otro tienes que tratar con datos — ya sea el salario de un empleado, precios de acciones, una lista de compras, o incluso un directorio telefónico simple.\u003C/p>\n\u003Cp>Basado en diferentes escenarios, los datos necesitan ser almacenados en un formato específico. Tenemos un puñado de estructuras de datos que cubren nuestra necesidad de almacenar datos en distintos formatos.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.freecodecamp.org/espanol/news/las-principales-estructuras-de-datos-que-deberias-saber-para-tu-proxima-entrevista-de-programacion\">Las principales estructuras de datos\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.coursera.org/learn/data-structures-optimizing-performance\">Curso Coursera\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5k2DWMRTXMM?si=433Sl6adzElIQTSs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"linked-list-listas-enlazadas\">Linked list (Listas enlazadas)\u003C/h2>\n\u003Cp>Los arrays almacenan elementos en ubicaciones de memoria contiguas, lo que resulta en direcciones fácilmente calculables para los elementos almacenados y permite un acceso más rápido a un elemento en un índice específico. Las listas enlazadas son menos rígidas en su estructura de almacenamiento, y generalmente los elementos no se almacenan en ubicaciones contiguas, por lo que necesitan ser almacenados con etiquetas adicionales que proporcionen una referencia al siguiente elemento. Esta diferencia en el esquema de almacenamiento de datos determina qué estructura de datos sería más adecuada para una situación dada.\u003C/p>\n\u003Cp>La implementación de una lista enlazada puede variar dependiendo del lenguaje de programación. Aquí te dejo un ejemplo básico de cómo se podría implementar una lista enlazada en JavaScript:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Definir la clase Nodo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Definir la clase ListaEnlazada\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> LinkedList\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Método para agregar un nuevo nodo al final de la lista\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newNode\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.head) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">      return\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (current.next) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    current.next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Método para imprimir la lista\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (current) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(current.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      current \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> current.next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Ejemplo de uso\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> listaEnlazada\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> LinkedList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">listaEnlazada.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">listaEnlazada.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">listaEnlazada.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">listaEnlazada.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este ejemplo, la clase Node representa un nodo de la lista con un valor (data) y una referencia al siguiente nodo (next). La clase LinkedList tiene un puntero a la cabeza de la lista (head) y métodos para agregar nodos al final (append) e imprimir la lista (print).\u003C/p>\n\u003Cp>Las listas enlazadas se utilizan en diversos contextos, como por ejemplo:\u003C/p>\n\u003Col>\n\u003Cli>Implementación de pilas y colas.\u003C/li>\n\u003Cli>Implementación de gráficos: la representación de gráficos de listas de adyacencia es la más popular, que utiliza una lista vinculada para almacenar vértices adyacentes.\u003C/li>\n\u003Cli>Asignación de memoria dinámica: se utiliza una lista enlazada de bloques libres.\u003C/li>\n\u003Cli>Mantenimiento del directorio de nombres.\u003C/li>\n\u003Cli>Realización de operaciones aritméticas con números enteros largos\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Lista_enlazada\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.freecodecamp.org/espanol/news/como-implementar-una-lista-vinculada-en-javascript/\">FreeCodeCamp\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/F8AbOfQwl1c?si=v0CVejRmEOt0H2AW&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MThabgtlmDM?si=qKbs2BL9ttWNp3dZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"stack-pila\">Stack (Pila)\u003C/h2>\n\u003Cp>Una pila es una colección lineal de elementos donde los elementos se insertan y se eliminan en un orden específico. También se llama una Estructura de Datos LIFO (Last In, First Out) porque sigue el principio “último en entrar, primero en salir”, es decir, el elemento que se inserta en último lugar es el primero en ser retirado.\u003C/p>\n\u003Cp>Aquí te dejo un ejemplo básico de cómo se podría implementar una pila en JavaScript:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Stack\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Agrega un elemento a la pila\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">element\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(element);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Elimina un elemento de la pila\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    pop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Underflow\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#B392F0\">pop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Devuelve el elemento superior de la pila\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    peek\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items[\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Verifica si la pila está vacía\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Imprime los elementos de la pila\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printStack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            str \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items[i] \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \" \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando la pila\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> stack \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Stack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// devuelve true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">printStack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 10 20 30\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">peek\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 30\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">pop\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(stack.\u003C/span>\u003Cspan style=\"color:#B392F0\">printStack\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 10 20\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este código, la clase Stack tiene métodos para agregar un elemento a la pila (push), eliminar un elemento de la pila (pop), ver el elemento superior de la pila (peek), verificar si la pila está vacía (isEmpty) e imprimir los elementos de la pila (printStack).\u003C/p>\n\u003Cp>Las pilas se utilizan en diversos contextos, como por ejemplo:\u003C/p>\n\u003Col>\n\u003Cli>Para evaluar expresiones con operandos y operaciones.\u003C/li>\n\u003Cli>En el historial de navegación web, donde cada nueva página visitada se añade a la pila y podemos retroceder en el historial.\u003C/li>\n\u003Cli>En compiladores, sistemas operativos y programas de aplicaciones, para la organización de la memoria.\u003C/li>\n\u003Cli>Para la evaluación de expresiones aritméticas en notación postfija.\u003C/li>\n\u003Cli>En la implementación de funciones de deshacer en editores de texto.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Pila_(inform%C3%A1tica)\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://medium.com/noders/estructuras-de-datos-con-javascript-parte-1-pilas-stacks-5a2092cff16a\">Medium\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"http://galvez.milibreta.com.mx/UAS/Estructura%20de%20Datos/4.-%20Pilas.pdf\">UAS\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KcT3aVgrrpU?si=yJng6jQ3y7CxynNr&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"queue-cola\">Queue (Cola)\u003C/h2>\n\u003Cp>Una cola es una colección lineal de elementos donde los elementos se insertan y se eliminan en un orden particular. La cola también se llama una Estructura de Datos FIFO (First In, First Out) porque sigue el principio “primero en entrar, primero en salir”, es decir, el elemento que se inserta primero es el primero en ser retirado.\u003C/p>\n\u003Cp>Aquí te dejo un ejemplo básico de cómo se podría implementar una cola en JavaScript:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Queue\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Agrega un elemento al final de la cola\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    enqueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">element\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(element);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Elimina un elemento del frente de la cola\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    dequeue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Underflow\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#B392F0\">shift\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Devuelve el elemento del frente de la cola\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    front\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">())\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"No elements in Queue\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Verifica si la cola está vacía\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Imprime los elementos de la cola\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printQueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            str \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.items[i] \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\" \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> str;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando la cola\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> queue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Queue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">isEmpty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// devuelve true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">enqueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">enqueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">enqueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">printQueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 10 20 30\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">front\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">dequeue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(queue.\u003C/span>\u003Cspan style=\"color:#B392F0\">printQueue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime 20 30\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este caso, Queue es una clase que representa una cola. Los elementos se agregan al inicio de la lista y se quitan desde el final, siguiendo el principio FIFO.\u003C/p>\n\u003Cp>Las colas se utilizan en diversos contextos, como por ejemplo:\u003C/p>\n\u003Col>\n\u003Cli>En sistemas de atención al cliente, donde cada nuevo cliente se añade al final de la cola y se atiende en el orden en que llegó.\u003C/li>\n\u003Cli>En la gestión de operaciones, para analizar y optimizar diferentes aspectos relacionados con el flujo de personas o productos en un sistema.\u003C/li>\n\u003Cli>En la logística y el transporte, para diseñar rutas y horarios eficientes, considerando el tiempo de espera en los puntos de carga y descarga.\u003C/li>\n\u003Cli>En la gestión de inventarios, permitiendo determinar los niveles óptimos de stock y reordenamiento.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Buffer_circular\">Wiki - Buffer Circular\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://polaridad.es/que-es-la-teoria-de-colas/\">Teoría de colas\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D6gu-_tmEpQ?si=Eq7antYvS-iWQH88&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"hash-table\">Hash Table\u003C/h2>\n\u003Cp>Hash Table, Map, HashMap, Dictionary y Asociative son todos nombres para la misma estructura de datos. Es una de las estructuras de datos más comúnmente utilizadas.\u003C/p>\n\u003Cp>Es una estructura de datos que implementa el tipo de dato abstracto llamado diccionario. Esta asocia llaves o claves con valores. La operación principal que soporta de manera eficiente es la búsqueda: permite el acceso a los elementos almacenados a partir de una clave generada. Funciona transformando la clave con una función hash en un hash, un número que identifica la posición donde la tabla hash localiza el valor deseado.\u003C/p>\n\u003Cp>Las tablas hash se suelen implementar sobre vectores de una dimensión, aunque se pueden hacer implementaciones multi-dimensionales basadas en varias claves.\r\nAquí te dejo un ejemplo básico de cómo se podría implementar una tabla hash en JavaScript:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Agrega un elemento a la tabla hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table[key] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Obtiene un elemento de la tabla hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table[key];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Elimina un elemento de la tabla hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        delete\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table[key];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Imprime los elementos de la tabla hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> key \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table.\u003C/span>\u003Cspan style=\"color:#B392F0\">hasOwnProperty\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(key)) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(key \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \" -> \"\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.table[key]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando la tabla hash\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hashTable \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> HashTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"John\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"age\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">put\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"city\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"New York\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">printTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime name -> John, age -> 30, city -> New York\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">get\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime John\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"name\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hashTable.\u003C/span>\u003Cspan style=\"color:#B392F0\">printTable\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime age -> 30, city -> New York\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este código, la clase HashTable tiene métodos para agregar un elemento a la tabla hash (put), obtener un elemento de la tabla hash (get), eliminar un elemento de la tabla hash (remove) e imprimir los elementos de la tabla hash (printTable).\u003C/p>\n\u003Cp>Las tablas hash se utilizan en diversos contextos, como por ejemplo:\u003C/p>\n\u003Col>\n\u003Cli>En bases de datos para la indexación.\u003C/li>\n\u003Cli>En estructuras de datos basadas en disco.\u003C/li>\n\u003Cli>En algunos lenguajes de programación como Python y JavaScript, se usa para implementar objetos.\u003C/li>\n\u003Cli>Para el mapeo de caché para un acceso rápido a los datos.\u003C/li>\n\u003Cli>Para la verificación de contraseña.\u003C/li>\n\u003Cli>Se usa en criptografía como un resumen de mensaje.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Tabla_hash\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://barcelonageeks.com/aplicaciones-ventajas-y-desventajas-de-la-estructura-de-datos-hash/\">Aplicaciones\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/knV86FlSXJ8?si=0K47DWabmOTWdCLV&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LluB6jU-SwY?si=GNNpOhRRo-RL35Lm\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch2 id=\"tree-árbol\">Tree (Árbol)\u003C/h2>\n\u003Cp>Un árbol es una estructura de datos que simula una estructura de árbol jerárquica, con un valor raíz y subárboles de hijos con un nodo padre.\u003C/p>\n\u003Cp>Se define de forma recursiva como una colección de nodos, empezando por un nodo raíz, donde cada nodo es una estructura de datos que contiene un valor, y opcionalmente una lista de referencias a otros nodos (sus hijos), con la limitación de que ninguna referencia esté duplicada, y que ninguna apunte al nodo raíz.\u003C/p>\n\u003Cp>Los árboles se utilizan en diversos contextos, como por ejemplo:\u003C/p>\n\u003Col start=\"2\">\n\u003Cli>En la representación de jerarquías.\u003C/li>\n\u003Cli>En la estructura del DOM (Document Object Model) en desarrollo web.\u003C/li>\n\u003Cli>En algoritmos de aprendizaje supervisado no paramétrico, como los árboles de decisión.\u003C/li>\n\u003Cli>En la representación de grafos acíclicos dirigidos y mínimamente conectados.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/%C3%81rbol_(inform%C3%A1tica)\">Wiki\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://medium.com/laboratoria-developers/%C3%A1rboles-trees-51783ba4ebe5\">Medium\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/introduction-to-tree-data-structure-and-algorithm-tutorials/\">Geeks for geeks\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tBaOQeyXYqg?si=qqUDXPU_nA7pMvyY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Qexq1k8LB6k?si=6aecFvk-xmiEjWxY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"binary-tree-árbol-binario\">Binary Tree (Árbol Binario)\u003C/h3>\n\u003Cp>Un árbol binario es una estructura de datos en forma de árbol en la que cada nodo puede tener como máximo dos hijos, conocidos como el hijo izquierdo y el hijo derecho.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> BinaryTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Agrega un nodo al árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> newNode\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root, newNode);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Inserta un nodo en el árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">newNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (newNode.data \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.left \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                node.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left, newNode);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.right \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right, newNode);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Recorre el árbol binario en orden\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    inorder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node \u003C/span>\u003Cspan style=\"color:#F97583\">!==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">inorder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">inorder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando el árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> BT\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> BinaryTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">25\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">22\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">27\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">inorder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime los nodos en orden\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este código, la clase \u003Ccode>Node\u003C/code> representa un nodo en el árbol binario. Cada nodo tiene un \u003Ccode>data\u003C/code> que almacena el valor del nodo, un \u003Ccode>left\u003C/code> que es el nodo hijo izquierdo y un \u003Ccode>right\u003C/code> que es el nodo hijo derecho.\u003C/p>\n\u003Cp>La clase \u003Ccode>BinaryTree\u003C/code> representa el árbol binario. Tiene un \u003Ccode>root\u003C/code> que es el nodo raíz del árbol. También tiene métodos para agregar un nodo al árbol (\u003Ccode>add\u003C/code>), insertar un nodo en el árbol (\u003Ccode>insertNode\u003C/code>), y recorrer el árbol en orden (\u003Ccode>inorder\u003C/code>).\u003C/p>\n\u003Cp>Eliminar un nodo en un árbol binario de búsqueda en JavaScript puede ser un poco complicado porque hay varias situaciones que debes considerar:\u003C/p>\n\u003Cul>\n\u003Cli>El nodo a eliminar es una hoja (no tiene hijos).\u003C/li>\n\u003Cli>El nodo a eliminar tiene un solo hijo.\u003C/li>\n\u003Cli>El nodo a eliminar tiene dos hijos.\u003C/li>\n\u003C/ul>\n\u003Cp>Aquí te muestro cómo puedes hacerlo:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> BinaryTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ... otros métodos ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Elimina un nodo del árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root, data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Elimina un nodo del árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    removeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">key\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (key \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left, key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (key \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right, key);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.left \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.right \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                node \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.left \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                node \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.right;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.right \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                node \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.left;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> aux \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">findMinNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> aux.data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">removeNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right, aux.data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Encuentra el nodo con el valor mínimo\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    findMinNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node.left \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        else\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">findMinNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando el árbol binario\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> BT\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> BinaryTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">25\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">22\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">13\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">add\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">27\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">remove\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">inorder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">BT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root); \u003C/span>\u003Cspan style=\"color:#6A737D\">// imprime los nodos en orden\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este código, la clase \u003Ccode>BinaryTree\u003C/code> tiene un método \u003Ccode>remove\u003C/code> que elimina un nodo del árbol. Este método llama a \u003Ccode>removeNode\u003C/code>, que es un método recursivo que busca el nodo a eliminar y lo elimina de acuerdo a las reglas mencionadas anteriormente. Si el nodo a eliminar tiene dos hijos, se busca el nodo con el valor mínimo en el subárbol derecho (usando \u003Ccode>findMinNode\u003C/code>), se copia su valor al nodo a eliminar y luego se elimina el nodo con el valor mínimo.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/%C3%81rbol_binario\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lMTaNbJAqvM?si=fPKLyNyf000miUDy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OVCNzj5BMcs?si=e743J4LBlimMTLUC\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"binary-search-tree-árbol-de-búsqueda-binaria\">Binary Search Tree (Árbol de búsqueda binaria)\u003C/h3>\n\u003Cp>Un árbol de búsqueda binaria, también llamado árbol binario ordenado o clasificado, es una estructura de datos de árbol binario con raíz, donde la clave de cada nodo interno es mayor que todas las claves en el subárbol izquierdo respectivo y menor que las claves en el subárbol derecho.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/%C3%81rbol_binario_de_b%C3%BAsqueda\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/G1VS5FbtMS4?si=X4AawVivg3NszN4J\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FAQGCkhcfnA?si=B11M6AiKdmBbw10P\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"full-binary-tree-árbol-binario-propio\">Full Binary Tree (Árbol binario propio)\u003C/h3>\n\u003Cp>Un árbol binario propio es un tipo especial de árbol binario en el que cada nodo padre o nodo interno tiene ya sea dos o ningún hijo. También se conoce como un árbol binario propio.\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"https://cdn.programiz.com/sites/tutorial2program/files/full-binary-tree_0.png\" width=\"300\" alt=\"Árbol binario propio\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>\u003Ca href=\"https://www.programiz.com/dsa/full-binary-tree\" target=\"_blank\">Árbol binario propio\u003C/a>\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/types-of-binary-tree/\">Geeks for Geeks - Opción de traducir\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"complete-binary-tree-árbol-binario-completo\">Complete Binary Tree (Árbol binario completo)\u003C/h3>\n\u003Cp>Un árbol binario completo es un árbol binario en el que todos los niveles están completamente llenos, excepto posiblemente el más bajo, que se llena desde la izquierda.\u003C/p>\n\u003Cp>Un árbol binario completo es similar a un árbol binario propio, pero con dos diferencias importantes:\u003C/p>\n\u003Col>\n\u003Cli>Todos los elementos hoja deben inclinarse hacia la izquierda.\u003C/li>\n\u003Cli>El último elemento hoja puede no tener un hermano derecho, es decir, un árbol binario completo no tiene que ser un árbol binario propio.\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.geeksforgeeks.org/complete-binary-tree/\">Geeks for Geeks - Opción de traducir\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cfigure>\n    \u003Cimg src=\"https://cdn.programiz.com/sites/tutorial2program/files/complete-binary-tree_0.png\" width=\"300\" alt=\"Árbol binario completo\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>\u003Ca href=\"https://www.programiz.com/dsa/complete-binary-tree\" target=\"_blank\">Árbol binario completo\u003C/a>\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Ch3 id=\"balanced-tree-árbol-binario-equilibrado\">Balanced Tree (Árbol binario equilibrado)\u003C/h3>\n\u003Cp>Un árbol binario equilibrado, también conocido como árbol binario balanceado en altura, se define como un árbol binario en el que la diferencia de altura entre el subárbol izquierdo y el subárbol derecho de cualquier nodo no es mayor que 1.\u003C/p>\n\u003Cp>Aquí te muestro cómo puedes implementar un árbol AVL en JavaScript:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">left\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">right\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> left;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> right;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> AVLTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.height;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    getBalance\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left) \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    leftRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rightNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.right;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rightLeftNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rightNode.left;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        rightNode.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rightLeftNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        node.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left), \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right)) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        rightNode.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(rightNode.left), \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(rightNode.right)) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> rightNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    rightRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> leftNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.left;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> leftRightNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> leftNode.right;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        leftNode.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        node.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> leftRightNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        node.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left), \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right)) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        leftNode.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(leftNode.left), \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(leftNode.right)) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> leftNode;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.root, data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (node \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left, data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (data \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right, data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        node.height \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left), \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getHeight\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> balance \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">getBalance\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (balance \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.left.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">rightRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (balance \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.right.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">leftRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (balance \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.left.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.left \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">leftRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.left);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">rightRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (balance \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node.right.data) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            node.right \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">rightRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node.right);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">leftRotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(node);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usando el árbol AVL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> avlTree \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> AVLTree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">40\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">avlTree.\u003C/span>\u003Cspan style=\"color:#B392F0\">insert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">25\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este código, la clase \u003Ccode>Node\u003C/code> representa un nodo en el árbol AVL. Cada nodo tiene un \u003Ccode>data\u003C/code> que almacena el valor del nodo, un \u003Ccode>left\u003C/code> que es el nodo hijo izquierdo, un \u003Ccode>right\u003C/code> que es el nodo hijo derecho, y una \u003Ccode>height\u003C/code> que es la altura del nodo.\u003C/p>\n\u003Cp>La clase \u003Ccode>AVLTree\u003C/code> representa el árbol AVL. Tiene un \u003Ccode>root\u003C/code> que es el nodo raíz del árbol. También tiene métodos para obtener la altura de un nodo (\u003Ccode>getHeight\u003C/code>), obtener el factor de equilibrio de un nodo (\u003Ccode>getBalance\u003C/code>), rotar un nodo a la izquierda (\u003Ccode>leftRotate\u003C/code>), rotar un nodo a la derecha (\u003Ccode>rightRotate\u003C/code>), e insertar un nodo en el árbol (\u003Ccode>insert\u003C/code>). El método \u003Ccode>insert\u003C/code> llama a \u003Ccode>insertNode\u003C/code>, que es un método recursivo que inserta un nodo en el árbol y luego equilibra el árbol.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/%C3%81rbol_AVL\">Árbol AVL\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"unbalanced-tree-árbol-binario-desequilibrado\">Unbalanced Tree (Árbol binario desequilibrado)\u003C/h3>\n\u003Cp>Un árbol binario desequilibrado es aquel que no cumple con las condiciones de equilibrio, es decir, la diferencia de altura entre el subárbol izquierdo y el subárbol derecho de al menos un nodo es mayor que 1. Esto puede resultar en un rendimiento subóptimo en términos de tiempo de búsqueda y otras operaciones en comparación con árboles balanceados.\u003C/p>\n\u003Ch2 id=\"graph-grafo\">Graph (Grafo)\u003C/h2>\n\u003Cp>Los grafos en estructuras de datos son estructuras de datos no lineales compuestas por un número finito de nodos o vértices y las aristas que los conectan. Los grafos en estructuras de datos se utilizan para abordar problemas del mundo real en los que representan el área del problema como una red, como en redes telefónicas, redes de circuitos y redes sociales.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://a01610329.medium.com/estructura-de-datos-grafos-ad9e7d91a79b\">Medium\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/vnNFiNVy9KM?si=_qxiI-xL84Vga8Hl\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ch3 id=\"directed-graph-grafo-dirigido\">Directed Graph (Grafo dirigido)\u003C/h3>\n\u003Cp>Un grafo dirigido es un conjunto de objetos (llamados vértices o nodos) que están conectados entre sí, donde todas las aristas están dirigidas desde un vértice hacia otro. A veces, a un grafo dirigido se le llama grafo dirigido (digraph) o red dirigida. En contraste, un grafo donde las aristas son bidireccionales se llama grafo no dirigido.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Grafo_dirigido\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"undirected-graph-grafo-no-dirigido\">Undirected Graph (Grafo no dirigido)\u003C/h3>\n\u003Cp>Un grafo no dirigido es un conjunto de objetos (llamados vértices o nodos) que están conectados entre sí, donde todas las aristas son bidireccionales. A veces, a un grafo no dirigido se le llama red no dirigida. En contraste, un grafo donde las aristas tienen una dirección se llama grafo dirigido.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/Grafo_no_dirigido\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"spanning-tree-árbol-de-expansión\">Spanning Tree (Árbol de expansión)\u003C/h3>\n\u003Cp>Un árbol de expansión (o spanning tree) es un subconjunto del grafo G que abarca todos los vértices con el número mínimo posible de aristas. Por lo tanto, un árbol de expansión no tiene ciclos y no puede estar desconectado.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://es.wikipedia.org/wiki/%C3%81rbol_de_expansi%C3%B3n\">Wiki\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"graph-representation-representación-de-grafo\">Graph Representation (Representación de grafo)\u003C/h3>\n\u003Cp>Un grafo puede representarse ya sea como una matriz de adyacencia o como una lista de adyacencia.\u003C/p>\n\u003Cp>La matriz de adyacencia es una matriz 2D de tamaño V x V, donde V es el número de vértices en un grafo. Si la ranura adj[i][j] es igual a 1, indica que hay una arista desde el vértice i hacia el vértice j.\u003C/p>\n\u003Cp>La lista de adyacencia es un array de vectores, y su tamaño es igual al número de vértices. Si la entrada array[i] representa la lista de vértices adyacentes al vértice i. Esta representación también puede usarse para representar un grafo ponderado, donde los pesos de las aristas se pueden representar como listas de pares.\u003C/p>\n\u003Cp>\u003Cstrong>Ventajas de la matriz de adyacencia:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Las operaciones básicas, como agregar una arista, eliminar una arista y verificar si hay una arista del vértice i al vértice j, son extremadamente eficientes en tiempo, operaciones de tiempo constante.\u003C/li>\n\u003Cli>Si el grafo es denso y el número de aristas es grande, una matriz de adyacencia debería ser la primera elección. Incluso si el grafo y la matriz de adyacencia son dispersos, podemos representarlo utilizando estructuras de datos para matrices dispersas.\u003C/li>\n\u003Cli>Sin embargo, la mayor ventaja proviene del uso de matrices. Los avances recientes en hardware nos permiten realizar incluso operaciones de matriz costosas en la GPU.\u003C/li>\n\u003Cli>Al realizar operaciones en la matriz adyacente, podemos obtener ideas importantes sobre la naturaleza del grafo y la relación entre sus vértices.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Desventajas de la matriz de adyacencia:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>El requisito de espacio \u003Ccode>VxV\u003C/code> de la matriz de adyacencia la convierte en un devorador de memoria. Los grafos en la vida real generalmente no tienen demasiadas conexiones, y esta es la razón principal por la cual las listas de adyacencia son la mejor elección para la mayoría de las tareas.\u003C/li>\n\u003Cli>Aunque las operaciones básicas son sencillas, operaciones como \u003Ccode>inEdges\u003C/code> y \u003Ccode>outEdges\u003C/code> son costosas cuando se utiliza la representación de matriz de adyacencia.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Ventajas de la lista de adyacencia:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>Una lista de adyacencia es eficiente en cuanto a almacenamiento porque solo necesitamos almacenar los valores de las aristas. Para un grafo disperso con millones de vértices y aristas, esto puede significar un ahorro considerable de espacio.\u003C/li>\n\u003Cli>También ayuda a encontrar fácilmente todos los vértices adyacentes a un vértice específico.\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Desventajas de la lista de adyacencia:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Encontrar la lista de adyacencia no es más rápido que la matriz de adyacencia, ya que primero se deben explorar todos los nodos conectados para encontrarlos.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://es.wikipedia.org/wiki/Matriz_de_adyacencia\">Wiki - Matriz\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>\u003Ca href=\"https://es.wikipedia.org/wiki/Lista_de_adyacencia\">Wiki - Lista\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"heap-montículo\">Heap (Montículo)\u003C/h2>\n\u003Cp>Un montículo (Heap) es una estructura de datos basada en árboles que sigue las propiedades de un árbol binario completo y puede ser un Min Heap (montículo mínimo) o un Max Heap (montículo máximo).\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Min Heap\u003C/strong>: En un Min Heap, el valor de cada nodo es menor o igual que los valores de sus hijos, lo que significa que el nodo con el valor mínimo se encuentra en la raíz del montículo.\u003C/li>\n\u003Cli>\u003Cstrong>Max Heap\u003C/strong>: En un Max Heap, el valor de cada nodo es mayor o igual que los valores de sus hijos, y el nodo con el valor máximo está en la raíz del montículo.\u003C/li>\n\u003C/ul>\n\u003Cp>Los montículos se utilizan comúnmente para implementar colas de prioridad, algoritmos de ordenamiento eficientes como HeapSort y en diversas aplicaciones donde se requiere acceso eficiente al elemento extremo (mínimo o máximo) del conjunto de datos.\u003C/p>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0wPlzMU-k00?si=7A9l5u6l2qLQxk1L&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/pAU21g-jBiE?si=dxQ1onXc4d1eBGyI&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2DmK_H7IdTo?si=mbK1VmEHDajU8gxh&#x26;cc_lang_pref=es\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>",{"headings":1050,"localImagePaths":1105,"remoteImagePaths":1106,"frontmatter":1107,"imagePaths":1110},[1051,1054,1057,1060,1063,1066,1069,1072,1075,1078,1081,1084,1087,1090,1093,1096,1099,1102],{"depth":76,"slug":1052,"text":1053},"por-qué-necesitamos-estructuras-de-datos","¿Por qué necesitamos Estructuras de Datos?",{"depth":76,"slug":1055,"text":1056},"linked-list-listas-enlazadas","Linked list (Listas enlazadas)",{"depth":76,"slug":1058,"text":1059},"stack-pila","Stack (Pila)",{"depth":76,"slug":1061,"text":1062},"queue-cola","Queue (Cola)",{"depth":76,"slug":1064,"text":1065},"hash-table","Hash Table",{"depth":76,"slug":1067,"text":1068},"tree-árbol","Tree (Árbol)",{"depth":211,"slug":1070,"text":1071},"binary-tree-árbol-binario","Binary Tree (Árbol Binario)",{"depth":211,"slug":1073,"text":1074},"binary-search-tree-árbol-de-búsqueda-binaria","Binary Search Tree (Árbol de búsqueda binaria)",{"depth":211,"slug":1076,"text":1077},"full-binary-tree-árbol-binario-propio","Full Binary Tree (Árbol binario propio)",{"depth":211,"slug":1079,"text":1080},"complete-binary-tree-árbol-binario-completo","Complete Binary Tree (Árbol binario completo)",{"depth":211,"slug":1082,"text":1083},"balanced-tree-árbol-binario-equilibrado","Balanced Tree (Árbol binario equilibrado)",{"depth":211,"slug":1085,"text":1086},"unbalanced-tree-árbol-binario-desequilibrado","Unbalanced Tree (Árbol binario desequilibrado)",{"depth":76,"slug":1088,"text":1089},"graph-grafo","Graph (Grafo)",{"depth":211,"slug":1091,"text":1092},"directed-graph-grafo-dirigido","Directed Graph (Grafo dirigido)",{"depth":211,"slug":1094,"text":1095},"undirected-graph-grafo-no-dirigido","Undirected Graph (Grafo no dirigido)",{"depth":211,"slug":1097,"text":1098},"spanning-tree-árbol-de-expansión","Spanning Tree (Árbol de expansión)",{"depth":211,"slug":1100,"text":1101},"graph-representation-representación-de-grafo","Graph Representation (Representación de grafo)",{"depth":76,"slug":1103,"text":1104},"heap-montículo","Heap (Montículo)",[],[],{"rutas":1108,"title":1041,"description":16,"pubDate":151,"updatedDate":151,"link":87,"lastModified":1109},[30],"2024-02-18T20:59:01-07:00",[],"estructura-datos/index.md","seguridad-web/buenas-practicas-apis/access-control",{"id":1112,"data":1114,"body":1118,"filePath":1119,"digest":1120,"rendered":1121,"legacyId":1146},{"rutas":1115,"title":926,"description":16,"lang":17,"dir":18,"pubDate":1116,"updatedDate":1117},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Limitar peticiones\r\n> Limite las peticiones (throttling) para evitar ataques DDoS / Fuerza Bruta.\r\n\r\nLimitar las peticiones mediante throttling es importante para evitar ataques DDoS y de fuerza bruta. Los ataques DDoS saturan el servidor con demasiadas peticiones, mientras que los ataques de fuerza bruta intentan adivinar las credenciales del usuario a través de múltiples intentos de inicio de sesión.\r\n\r\nEl estrangulamiento limita el número de peticiones que pueden enviarse en un periodo de tiempo determinado, lo que dificulta a los atacantes llevar a cabo este tipo de ataques. Esto puede proteger el sistema de ser desbordado y puede evitar que los atacantes obtengan acceso no autorizado.\r\n\r\n## Utilizar HTTPs\r\n> Utilice HTTPS en el lado del servidor y cifrados seguros\r\n\r\nAsegúrese de que su servidor API utiliza HTTPS en lugar de HTTP. HTTPS es un protocolo seguro que cifra los datos en tránsito, dificultando que los atacantes intercepten y lean información sensible. Para implantar HTTPS, debe obtener un certificado SSL/TLS y configurar su servidor para que utilice HTTPS.\r\n\r\nHTTPS utiliza cifrados para encriptar los datos en tránsito. Es importante elegir cifrados seguros que sean resistentes a los ataques y ofrezcan un cifrado fuerte. Algunos cifrados seguros habituales son AES, ChaCha20 y ECDHE para el intercambio de claves. Asegúrese de desactivar los cifrados débiles y obsoletos, como RC4 y TLS 1.0/1.1, que son vulnerables a los ataques.\r\n\r\n## Cabecera HSTS\r\n> Utilice el encabezado HSTS con SSL para evitar ataques SSL Strip.\r\n\r\nSSL Strip es un tipo de ataque en el que un atacante intercepta el tráfico entre un cliente y un servidor que se supone que está protegido por cifrado SSL/TLS, y reduce la conexión a una conexión HTTP de texto sin formato (no cifrada). Este tipo de ataque puede pasar desapercibido para el usuario porque el atacante es capaz de redirigirlo a un sitio web de apariencia similar que también utiliza HTTP en lugar de HTTPS.\r\n\r\nEn un ataque SSL strip, el atacante establece una posición man-in-the-middle (MITM) entre el cliente y el servidor. Cuando el cliente inicia una conexión con el servidor, el atacante intercepta el tráfico SSL/TLS y elimina o sustituye los enlaces HTTPS por enlaces HTTP. Esto puede engañar al usuario haciéndole creer que está utilizando una conexión segura cuando, en realidad, no lo está. El atacante puede entonces monitorizar y manipular los datos transmitidos entre el cliente y el servidor.\r\n\r\nLa cabecera HSTS es una cabecera de seguridad que indica a los navegadores que sólo pueden acceder al sitio a través de HTTPS. Esta cabecera se utiliza para evitar ataques SSL Strip. Es una buena práctica utilizar la cabecera HSTS con SSL.\r\n\r\n## Listados de directorios\r\n> Desactivar los listados de directorios\r\n\r\nLos listados de directorios son una característica de los servidores web que permite a los usuarios ver el contenido de un directorio en un servidor. Por defecto, los servidores web suelen tener activados los listados de directorios, lo que significa que cualquiera que tenga acceso al servidor puede ver todos los archivos y directorios de una carpeta determinada.\r\n\r\nDesactivar los listados de directorios es importante para la seguridad de la API porque impide que los atacantes accedan a archivos y directorios confidenciales del servidor. Si los listados de directorios están activados y un atacante consigue acceder al servidor, podrá ver y descargar fácilmente cualquier archivo que no esté debidamente protegido. Deshabilitando los listados de directorios, puede asegurarse de que sólo los usuarios autorizados pueden acceder a los archivos y directorios del servidor.\r\n\r\n## Restringir las API privadas\r\n> Las API privadas sólo deben ser accesibles desde IPs de listas seguras\r\n\r\nLas APIs privadas sólo deben ser accesibles desde IPs seguras para garantizar que sólo los usuarios o sistemas autorizados puedan acceder a la API. Al restringir el acceso a direcciones IP específicas, puede evitar el acceso no autorizado desde redes externas o actores maliciosos. Esto puede ayudar a proteger datos sensibles y prevenir ataques como DDoS o ataques de fuerza bruta. Además, restringir el acceso a IP de listas seguras puede ayudar a garantizar la fiabilidad y el rendimiento de la API al evitar el tráfico excesivo de fuentes no autorizadas.","src/content/blog/seguridad-web/buenas-practicas-apis/access-control.md","5d91bff076cd24c5",{"html":1122,"metadata":1123},"\u003Ch2 id=\"limitar-peticiones\">Limitar peticiones\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Limite las peticiones (throttling) para evitar ataques DDoS / Fuerza Bruta.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Limitar las peticiones mediante throttling es importante para evitar ataques DDoS y de fuerza bruta. Los ataques DDoS saturan el servidor con demasiadas peticiones, mientras que los ataques de fuerza bruta intentan adivinar las credenciales del usuario a través de múltiples intentos de inicio de sesión.\u003C/p>\n\u003Cp>El estrangulamiento limita el número de peticiones que pueden enviarse en un periodo de tiempo determinado, lo que dificulta a los atacantes llevar a cabo este tipo de ataques. Esto puede proteger el sistema de ser desbordado y puede evitar que los atacantes obtengan acceso no autorizado.\u003C/p>\n\u003Ch2 id=\"utilizar-https\">Utilizar HTTPs\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice HTTPS en el lado del servidor y cifrados seguros\u003C/p>\n\u003C/blockquote>\n\u003Cp>Asegúrese de que su servidor API utiliza HTTPS en lugar de HTTP. HTTPS es un protocolo seguro que cifra los datos en tránsito, dificultando que los atacantes intercepten y lean información sensible. Para implantar HTTPS, debe obtener un certificado SSL/TLS y configurar su servidor para que utilice HTTPS.\u003C/p>\n\u003Cp>HTTPS utiliza cifrados para encriptar los datos en tránsito. Es importante elegir cifrados seguros que sean resistentes a los ataques y ofrezcan un cifrado fuerte. Algunos cifrados seguros habituales son AES, ChaCha20 y ECDHE para el intercambio de claves. Asegúrese de desactivar los cifrados débiles y obsoletos, como RC4 y TLS 1.0/1.1, que son vulnerables a los ataques.\u003C/p>\n\u003Ch2 id=\"cabecera-hsts\">Cabecera HSTS\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice el encabezado HSTS con SSL para evitar ataques SSL Strip.\u003C/p>\n\u003C/blockquote>\n\u003Cp>SSL Strip es un tipo de ataque en el que un atacante intercepta el tráfico entre un cliente y un servidor que se supone que está protegido por cifrado SSL/TLS, y reduce la conexión a una conexión HTTP de texto sin formato (no cifrada). Este tipo de ataque puede pasar desapercibido para el usuario porque el atacante es capaz de redirigirlo a un sitio web de apariencia similar que también utiliza HTTP en lugar de HTTPS.\u003C/p>\n\u003Cp>En un ataque SSL strip, el atacante establece una posición man-in-the-middle (MITM) entre el cliente y el servidor. Cuando el cliente inicia una conexión con el servidor, el atacante intercepta el tráfico SSL/TLS y elimina o sustituye los enlaces HTTPS por enlaces HTTP. Esto puede engañar al usuario haciéndole creer que está utilizando una conexión segura cuando, en realidad, no lo está. El atacante puede entonces monitorizar y manipular los datos transmitidos entre el cliente y el servidor.\u003C/p>\n\u003Cp>La cabecera HSTS es una cabecera de seguridad que indica a los navegadores que sólo pueden acceder al sitio a través de HTTPS. Esta cabecera se utiliza para evitar ataques SSL Strip. Es una buena práctica utilizar la cabecera HSTS con SSL.\u003C/p>\n\u003Ch2 id=\"listados-de-directorios\">Listados de directorios\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Desactivar los listados de directorios\u003C/p>\n\u003C/blockquote>\n\u003Cp>Los listados de directorios son una característica de los servidores web que permite a los usuarios ver el contenido de un directorio en un servidor. Por defecto, los servidores web suelen tener activados los listados de directorios, lo que significa que cualquiera que tenga acceso al servidor puede ver todos los archivos y directorios de una carpeta determinada.\u003C/p>\n\u003Cp>Desactivar los listados de directorios es importante para la seguridad de la API porque impide que los atacantes accedan a archivos y directorios confidenciales del servidor. Si los listados de directorios están activados y un atacante consigue acceder al servidor, podrá ver y descargar fácilmente cualquier archivo que no esté debidamente protegido. Deshabilitando los listados de directorios, puede asegurarse de que sólo los usuarios autorizados pueden acceder a los archivos y directorios del servidor.\u003C/p>\n\u003Ch2 id=\"restringir-las-api-privadas\">Restringir las API privadas\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Las API privadas sólo deben ser accesibles desde IPs de listas seguras\u003C/p>\n\u003C/blockquote>\n\u003Cp>Las APIs privadas sólo deben ser accesibles desde IPs seguras para garantizar que sólo los usuarios o sistemas autorizados puedan acceder a la API. Al restringir el acceso a direcciones IP específicas, puede evitar el acceso no autorizado desde redes externas o actores maliciosos. Esto puede ayudar a proteger datos sensibles y prevenir ataques como DDoS o ataques de fuerza bruta. Además, restringir el acceso a IP de listas seguras puede ayudar a garantizar la fiabilidad y el rendimiento de la API al evitar el tráfico excesivo de fuentes no autorizadas.\u003C/p>",{"headings":1124,"localImagePaths":1140,"remoteImagePaths":1141,"frontmatter":1142,"imagePaths":1145},[1125,1128,1131,1134,1137],{"depth":76,"slug":1126,"text":1127},"limitar-peticiones","Limitar peticiones",{"depth":76,"slug":1129,"text":1130},"utilizar-https","Utilizar HTTPs",{"depth":76,"slug":1132,"text":1133},"cabecera-hsts","Cabecera HSTS",{"depth":76,"slug":1135,"text":1136},"listados-de-directorios","Listados de directorios",{"depth":76,"slug":1138,"text":1139},"restringir-las-api-privadas","Restringir las API privadas",[],[],{"rutas":1143,"title":926,"description":16,"pubDate":151,"updatedDate":151,"link":1144,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/access-control",[],"seguridad-web/buenas-practicas-apis/access-control.md","seguridad-web/buenas-practicas-apis/autenticacion",{"id":1147,"data":1149,"body":1153,"filePath":1154,"digest":1155,"rendered":1156,"legacyId":1178},{"rutas":1150,"title":321,"description":16,"lang":17,"dir":18,"pubDate":1151,"updatedDate":1152},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Evite la autenticación básica\r\n> Debes evitar el uso de la autenticación básica y utilizar cualquier otra metodología de autenticación estándar, es decir, OAuth, JWT, etc.\r\n\r\nLa autenticación básica es un método simple para autenticar a un usuario transmitiendo sus credenciales en texto plano a través de la red. Este método es intrínsecamente inseguro y debe evitarse siempre que sea posible.\r\n\r\nHay varias razones por las que la autenticación básica debería evitarse y sustituirse por técnicas de autenticación más seguras:\r\n\r\n* Falta de confidencialidad: La autenticación básica transmite las credenciales del usuario (nombre de usuario y contraseña) en texto plano a través de la red. Esto significa que cualquiera que intercepte el tráfico puede leer fácilmente las credenciales y acceder a la cuenta del usuario.\r\n\r\n* Falta de integridad: La autenticación básica no proporciona ningún mecanismo para garantizar que los datos que se transmiten no han sido manipulados o modificados en tránsito. Esto significa que un atacante puede modificar el tráfico para acceder a la cuenta del usuario o realizar otras actividades maliciosas.\r\n\r\n* Falta de solidez de la autenticación: La autenticación básica se basa únicamente en las credenciales del usuario para autenticarlo. Esto significa que si un atacante es capaz de obtener las credenciales del usuario (por ejemplo, mediante phishing o ingeniería social), puede acceder fácilmente a la cuenta del usuario.\r\n\r\n* No es compatible con la autenticación multifactor: La autenticación básica no es compatible con la autenticación multifactor (MFA), que es una característica de seguridad crítica que proporciona una capa adicional de protección contra el acceso no autorizado.\r\n\r\nPor el contrario, otras técnicas de autenticación como OAuth, OpenID Connect y SAML proporcionan métodos más seguros y robustos para la autenticación. Estos métodos suelen utilizar protocolos cifrados para proteger las credenciales del usuario, proporcionan mecanismos para verificar la integridad de los datos y admiten MFA. Como resultado, son mucho más seguros y fiables que la autenticación básica y deberían utilizarse siempre que sea posible.\r\n\r\n## Mecanismos de autenticación\r\n> Utiliza mecanismos de autenticación estándar para generar tokens, almacenar credenciales y autenticar usuarios.\r\n\r\nEstos son algunos ejemplos de mecanismos de autenticación establecidos que puedes utilizar en lugar de reinventar la rueda:\r\n\r\n* OAuth: OAuth es un estándar abierto ampliamente utilizado para la autorización que permite a los usuarios conceder a aplicaciones de terceros el acceso a sus recursos sin compartir sus credenciales. Los servicios web y las API suelen utilizarlo para permitir a los usuarios iniciar sesión con sus cuentas de redes sociales u otras cuentas de terceros.\r\n\r\n* OpenID Connect: OpenID Connect es un protocolo de autenticación basado en OAuth 2.0 que permite a los usuarios autenticarse en varios sitios web y aplicaciones utilizando un único conjunto de credenciales. Se suele utilizar para el inicio de sesión único (SSO) en varios sitios web y aplicaciones.\r\n\r\n* SAML: SAML (Security Assertion Markup Language) es un estándar basado en XML para el intercambio de datos de autenticación y autorización entre las partes. Se suele utilizar para el inicio de sesión único en varios dominios u organizaciones.\r\n\r\n* Algoritmos hash para contraseñas: Los algoritmos de hashing de contraseñas como bcrypt y scrypt son ampliamente utilizados para almacenar y proteger de forma segura las contraseñas de los usuarios. Estos algoritmos garantizan que, aunque un atacante acceda a la base de datos de contraseñas, no podrá recuperarlas fácilmente.\r\n\r\n* Autenticación de dos factores (2FA): 2FA es un mecanismo de autenticación que requiere que los usuarios proporcionen dos formas de identificación para acceder a sus cuentas. Normalmente se trata de algo que el usuario conoce (como una contraseña) y algo que tiene (como un dispositivo móvil o una clave de seguridad). Muchos servicios y aplicaciones ofrecen ahora 2FA como medida de seguridad adicional.\r\n\r\n## Max Retry/Jail en el inicio de sesión\r\n> Las funciones \"Max Retry\" y \"jail\" se utilizan habitualmente en los mecanismos de inicio de sesión para mejorar la seguridad y evitar ataques de fuerza bruta.\r\n\r\n**Reintento máximo**: La función \"Max Retry\" limita el número de intentos de inicio de sesión que un usuario puede realizar en un periodo de tiempo determinado. Después de un cierto número de intentos fallidos, el usuario queda bloqueado durante un tiempo determinado, normalmente varios minutos u horas. Esto ayuda a evitar los ataques de fuerza bruta, en los que un atacante intenta adivinar la contraseña de un usuario realizando repetidos intentos de inicio de sesión. Al limitar el número de intentos, el sistema puede ralentizar o evitar estos ataques.\r\n\r\n**Jail**: La función \"jail\" consiste en bloquear las direcciones IP o las cuentas de usuario que hayan superado el número máximo de intentos de inicio de sesión fallidos en un periodo de tiempo determinado. A las direcciones IP o cuentas de usuario bloqueadas se les impide intentar nuevos inicios de sesión durante un periodo de tiempo determinado, normalmente varios minutos u horas. Esto ayuda a prevenir ataques de fuerza bruta y también proporciona un mecanismo para evitar que usuarios malintencionados intenten acceder repetidamente a una cuenta o sistema.\r\n\r\n## Cifrado de datos sensibles\r\n> Cifrar datos sensibles es importante para protegerlos de accesos no autorizados, robos y explotación.\r\n\r\nEl cifrado es un proceso de conversión de datos de texto plano en un texto cifrado que sólo puede ser descifrado por alguien que tenga la clave de descifrado. Esto dificulta el acceso de los atacantes a los datos sensibles, incluso si consiguen interceptarlos o acceder a ellos sin autorización.\r\n\r\nPara cifrar datos sensibles, puedes utilizar algoritmos de cifrado como `AES` o `RSA`, junto con un sólido sistema de gestión de claves que garantice que éstas se almacenan y gestionan de forma segura. Además, puedes implantar otras medidas de seguridad como controles de acceso, cortafuegos y sistemas de detección de intrusos para proteger aún más los datos sensibles.","src/content/blog/seguridad-web/buenas-practicas-apis/autenticacion.md","4eba85f47d3d8dff",{"html":1157,"metadata":1158},"\u003Ch2 id=\"evite-la-autenticación-básica\">Evite la autenticación básica\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Debes evitar el uso de la autenticación básica y utilizar cualquier otra metodología de autenticación estándar, es decir, OAuth, JWT, etc.\u003C/p>\n\u003C/blockquote>\n\u003Cp>La autenticación básica es un método simple para autenticar a un usuario transmitiendo sus credenciales en texto plano a través de la red. Este método es intrínsecamente inseguro y debe evitarse siempre que sea posible.\u003C/p>\n\u003Cp>Hay varias razones por las que la autenticación básica debería evitarse y sustituirse por técnicas de autenticación más seguras:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Falta de confidencialidad: La autenticación básica transmite las credenciales del usuario (nombre de usuario y contraseña) en texto plano a través de la red. Esto significa que cualquiera que intercepte el tráfico puede leer fácilmente las credenciales y acceder a la cuenta del usuario.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Falta de integridad: La autenticación básica no proporciona ningún mecanismo para garantizar que los datos que se transmiten no han sido manipulados o modificados en tránsito. Esto significa que un atacante puede modificar el tráfico para acceder a la cuenta del usuario o realizar otras actividades maliciosas.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Falta de solidez de la autenticación: La autenticación básica se basa únicamente en las credenciales del usuario para autenticarlo. Esto significa que si un atacante es capaz de obtener las credenciales del usuario (por ejemplo, mediante phishing o ingeniería social), puede acceder fácilmente a la cuenta del usuario.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>No es compatible con la autenticación multifactor: La autenticación básica no es compatible con la autenticación multifactor (MFA), que es una característica de seguridad crítica que proporciona una capa adicional de protección contra el acceso no autorizado.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Por el contrario, otras técnicas de autenticación como OAuth, OpenID Connect y SAML proporcionan métodos más seguros y robustos para la autenticación. Estos métodos suelen utilizar protocolos cifrados para proteger las credenciales del usuario, proporcionan mecanismos para verificar la integridad de los datos y admiten MFA. Como resultado, son mucho más seguros y fiables que la autenticación básica y deberían utilizarse siempre que sea posible.\u003C/p>\n\u003Ch2 id=\"mecanismos-de-autenticación\">Mecanismos de autenticación\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utiliza mecanismos de autenticación estándar para generar tokens, almacenar credenciales y autenticar usuarios.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Estos son algunos ejemplos de mecanismos de autenticación establecidos que puedes utilizar en lugar de reinventar la rueda:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>OAuth: OAuth es un estándar abierto ampliamente utilizado para la autorización que permite a los usuarios conceder a aplicaciones de terceros el acceso a sus recursos sin compartir sus credenciales. Los servicios web y las API suelen utilizarlo para permitir a los usuarios iniciar sesión con sus cuentas de redes sociales u otras cuentas de terceros.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>OpenID Connect: OpenID Connect es un protocolo de autenticación basado en OAuth 2.0 que permite a los usuarios autenticarse en varios sitios web y aplicaciones utilizando un único conjunto de credenciales. Se suele utilizar para el inicio de sesión único (SSO) en varios sitios web y aplicaciones.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>SAML: SAML (Security Assertion Markup Language) es un estándar basado en XML para el intercambio de datos de autenticación y autorización entre las partes. Se suele utilizar para el inicio de sesión único en varios dominios u organizaciones.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Algoritmos hash para contraseñas: Los algoritmos de hashing de contraseñas como bcrypt y scrypt son ampliamente utilizados para almacenar y proteger de forma segura las contraseñas de los usuarios. Estos algoritmos garantizan que, aunque un atacante acceda a la base de datos de contraseñas, no podrá recuperarlas fácilmente.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Autenticación de dos factores (2FA): 2FA es un mecanismo de autenticación que requiere que los usuarios proporcionen dos formas de identificación para acceder a sus cuentas. Normalmente se trata de algo que el usuario conoce (como una contraseña) y algo que tiene (como un dispositivo móvil o una clave de seguridad). Muchos servicios y aplicaciones ofrecen ahora 2FA como medida de seguridad adicional.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"max-retryjail-en-el-inicio-de-sesión\">Max Retry/Jail en el inicio de sesión\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Las funciones “Max Retry” y “jail” se utilizan habitualmente en los mecanismos de inicio de sesión para mejorar la seguridad y evitar ataques de fuerza bruta.\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Cstrong>Reintento máximo\u003C/strong>: La función “Max Retry” limita el número de intentos de inicio de sesión que un usuario puede realizar en un periodo de tiempo determinado. Después de un cierto número de intentos fallidos, el usuario queda bloqueado durante un tiempo determinado, normalmente varios minutos u horas. Esto ayuda a evitar los ataques de fuerza bruta, en los que un atacante intenta adivinar la contraseña de un usuario realizando repetidos intentos de inicio de sesión. Al limitar el número de intentos, el sistema puede ralentizar o evitar estos ataques.\u003C/p>\n\u003Cp>\u003Cstrong>Jail\u003C/strong>: La función “jail” consiste en bloquear las direcciones IP o las cuentas de usuario que hayan superado el número máximo de intentos de inicio de sesión fallidos en un periodo de tiempo determinado. A las direcciones IP o cuentas de usuario bloqueadas se les impide intentar nuevos inicios de sesión durante un periodo de tiempo determinado, normalmente varios minutos u horas. Esto ayuda a prevenir ataques de fuerza bruta y también proporciona un mecanismo para evitar que usuarios malintencionados intenten acceder repetidamente a una cuenta o sistema.\u003C/p>\n\u003Ch2 id=\"cifrado-de-datos-sensibles\">Cifrado de datos sensibles\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Cifrar datos sensibles es importante para protegerlos de accesos no autorizados, robos y explotación.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El cifrado es un proceso de conversión de datos de texto plano en un texto cifrado que sólo puede ser descifrado por alguien que tenga la clave de descifrado. Esto dificulta el acceso de los atacantes a los datos sensibles, incluso si consiguen interceptarlos o acceder a ellos sin autorización.\u003C/p>\n\u003Cp>Para cifrar datos sensibles, puedes utilizar algoritmos de cifrado como \u003Ccode>AES\u003C/code> o \u003Ccode>RSA\u003C/code>, junto con un sólido sistema de gestión de claves que garantice que éstas se almacenan y gestionan de forma segura. Además, puedes implantar otras medidas de seguridad como controles de acceso, cortafuegos y sistemas de detección de intrusos para proteger aún más los datos sensibles.\u003C/p>",{"headings":1159,"localImagePaths":1172,"remoteImagePaths":1173,"frontmatter":1174,"imagePaths":1177},[1160,1163,1166,1169],{"depth":76,"slug":1161,"text":1162},"evite-la-autenticación-básica","Evite la autenticación básica",{"depth":76,"slug":1164,"text":1165},"mecanismos-de-autenticación","Mecanismos de autenticación",{"depth":76,"slug":1167,"text":1168},"max-retryjail-en-el-inicio-de-sesión","Max Retry/Jail en el inicio de sesión",{"depth":76,"slug":1170,"text":1171},"cifrado-de-datos-sensibles","Cifrado de datos sensibles",[],[],{"rutas":1175,"title":321,"description":16,"pubDate":151,"updatedDate":151,"link":1176,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/autenticacion",[],"seguridad-web/buenas-practicas-apis/autenticacion.md","seguridad-web/buenas-practicas-apis/entrada",{"id":1179,"data":1181,"body":1185,"filePath":1186,"digest":1187,"rendered":1188,"legacyId":1216},{"rutas":1182,"title":933,"description":16,"lang":17,"dir":18,"pubDate":1183,"updatedDate":1184},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Métodos HTTP adecuados\r\nUtilice el método HTTP adecuado según la operación: `GET (lectura)`, `POST (creación)`, `PUT/PATCH (sustitución/actualización)` y `DELETE (para eliminar un registro)`, y responda con `405 Method Not Allowed` si el método solicitado no es apropiado para el recurso solicitado.\r\n\r\n## Validación del Content-Type\r\n> Validar el `Content-Type` en las cabeceras de las peticiones para evitar ataques XSS\r\n\r\nLa validación de la cabecera `Content-Type` en la solicitud puede ayudar a que las API sean más seguras al garantizar que los datos de la solicitud están en el formato esperado y reducir el riesgo de ataques como los de inyección o los de secuencias de comandos en sitios cruzados (XSS).\r\n\r\n## Validación de la entrada del usuario\r\n> Validar la entrada del usuario para evitar vulnerabilidades comunes\r\n\r\nLa entrada del usuario es una fuente común de vulnerabilidades en las aplicaciones web. Esto se debe a que la entrada del usuario a menudo no se valida, desinfecta o escapa adecuadamente antes de ser utilizada en una aplicación web. Esto puede permitir a un atacante manipular la entrada y ejecutar código malicioso o hacer que la aplicación se comporte de forma inesperada.\r\n\r\n## Cabecera de Authorization\r\n> Utilice la cabecera de `Authorization` estándar para enviar tokens en lugar de cabeceras personalizadas o query/body parameters\r\n\r\nGeneralmente no se recomienda enviar tokens en los parámetros query o body porque estos parámetros pueden ser registrados o almacenados en caché por varios sistemas, incluyendo servidores web, proxies y puertas de enlace. Esto puede llevar potencialmente a la exposición de datos sensibles, incluyendo tokens de autenticación.\r\n\r\nAdemás, el envío de tokens en los parámetros de consulta o cuerpo puede hacerlos más vulnerables a los ataques de falsificación de petición entre sitios (CSRF). En un ataque CSRF, un atacante puede engañar a un usuario para que envíe una solicitud que incluya su token de autenticación, que el atacante puede utilizar para hacerse pasar por el usuario y obtener acceso a su cuenta.\r\n\r\nPor el contrario, el uso de la cabecera `Authorization` para enviar tokens ayuda a garantizar que los tokens no son registrados o almacenados en caché por sistemas intermediarios, y también puede ayudar a proteger contra ataques CSRF al permitir que el servidor valide el token antes de procesar la solicitud.\r\n\r\n## Evite el cifrado del lado del cliente\r\n> Utilice el cifrado del lado del servidor en lugar del cifrado del lado del cliente.\r\n\r\nEl cifrado del lado del cliente no es recomendable porque la base de código del lado del cliente puede ser fácilmente sometida a ingeniería inversa, lo que puede llevar a la exposición de los algoritmos de cifrado.\r\n\r\n## API Gateway\r\n> Utilice una API gateway para el almacenamiento en caché, las políticas de límite de velocidad y otras funciones de seguridad.\r\n\r\nUna API gateway puede hacer que sus API sean más seguras al proporcionar un punto de control centralizado para gestionar y proteger el tráfico de API. He aquí algunas formas en las que una API gateway puede mejorar la seguridad de las API:\r\n\r\n* Autenticación y autorización: Las API gateways pueden gestionar la autenticación y autorización de usuarios, reduciendo la carga de las API individuales y mejorando la coherencia en toda la organización. Esto puede incluir técnicas como la verificación JWT, OAuth y otros mecanismos de autenticación.\r\n\r\n* Filtrado de tráfico y limitación de velocidad: Una API gateway puede aplicar el filtrado de tráfico y la limitación de velocidad para proteger las API contra ataques DDoS, ataques de fuerza bruta y otros tipos de abuso.\r\n\r\n* Cifrado y descifrado: Una API gateway puede gestionar el cifrado y descifrado de datos confidenciales para protegerlos contra filtraciones y robos de datos.\r\n\r\n* Registro y supervisión: Una API gateway puede proporcionar registro y supervisión centralizados del tráfico API, lo que ayuda a identificar y responder a las amenazas de seguridad y otros problemas.\r\n\r\n* Integración con herramientas de seguridad: Una API gateway puede integrarse con herramientas de seguridad como WAFs, SIEMs y otras herramientas de seguridad para proporcionar capas adicionales de protección.","src/content/blog/seguridad-web/buenas-practicas-apis/entrada.md","8db79f665634c059",{"html":1189,"metadata":1190},"\u003Ch2 id=\"métodos-http-adecuados\">Métodos HTTP adecuados\u003C/h2>\n\u003Cp>Utilice el método HTTP adecuado según la operación: \u003Ccode>GET (lectura)\u003C/code>, \u003Ccode>POST (creación)\u003C/code>, \u003Ccode>PUT/PATCH (sustitución/actualización)\u003C/code> y \u003Ccode>DELETE (para eliminar un registro)\u003C/code>, y responda con \u003Ccode>405 Method Not Allowed\u003C/code> si el método solicitado no es apropiado para el recurso solicitado.\u003C/p>\n\u003Ch2 id=\"validación-del-content-type\">Validación del Content-Type\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Validar el \u003Ccode>Content-Type\u003C/code> en las cabeceras de las peticiones para evitar ataques XSS\u003C/p>\n\u003C/blockquote>\n\u003Cp>La validación de la cabecera \u003Ccode>Content-Type\u003C/code> en la solicitud puede ayudar a que las API sean más seguras al garantizar que los datos de la solicitud están en el formato esperado y reducir el riesgo de ataques como los de inyección o los de secuencias de comandos en sitios cruzados (XSS).\u003C/p>\n\u003Ch2 id=\"validación-de-la-entrada-del-usuario\">Validación de la entrada del usuario\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Validar la entrada del usuario para evitar vulnerabilidades comunes\u003C/p>\n\u003C/blockquote>\n\u003Cp>La entrada del usuario es una fuente común de vulnerabilidades en las aplicaciones web. Esto se debe a que la entrada del usuario a menudo no se valida, desinfecta o escapa adecuadamente antes de ser utilizada en una aplicación web. Esto puede permitir a un atacante manipular la entrada y ejecutar código malicioso o hacer que la aplicación se comporte de forma inesperada.\u003C/p>\n\u003Ch2 id=\"cabecera-de-authorization\">Cabecera de Authorization\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice la cabecera de \u003Ccode>Authorization\u003C/code> estándar para enviar tokens en lugar de cabeceras personalizadas o query/body parameters\u003C/p>\n\u003C/blockquote>\n\u003Cp>Generalmente no se recomienda enviar tokens en los parámetros query o body porque estos parámetros pueden ser registrados o almacenados en caché por varios sistemas, incluyendo servidores web, proxies y puertas de enlace. Esto puede llevar potencialmente a la exposición de datos sensibles, incluyendo tokens de autenticación.\u003C/p>\n\u003Cp>Además, el envío de tokens en los parámetros de consulta o cuerpo puede hacerlos más vulnerables a los ataques de falsificación de petición entre sitios (CSRF). En un ataque CSRF, un atacante puede engañar a un usuario para que envíe una solicitud que incluya su token de autenticación, que el atacante puede utilizar para hacerse pasar por el usuario y obtener acceso a su cuenta.\u003C/p>\n\u003Cp>Por el contrario, el uso de la cabecera \u003Ccode>Authorization\u003C/code> para enviar tokens ayuda a garantizar que los tokens no son registrados o almacenados en caché por sistemas intermediarios, y también puede ayudar a proteger contra ataques CSRF al permitir que el servidor valide el token antes de procesar la solicitud.\u003C/p>\n\u003Ch2 id=\"evite-el-cifrado-del-lado-del-cliente\">Evite el cifrado del lado del cliente\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice el cifrado del lado del servidor en lugar del cifrado del lado del cliente.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El cifrado del lado del cliente no es recomendable porque la base de código del lado del cliente puede ser fácilmente sometida a ingeniería inversa, lo que puede llevar a la exposición de los algoritmos de cifrado.\u003C/p>\n\u003Ch2 id=\"api-gateway\">API Gateway\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice una API gateway para el almacenamiento en caché, las políticas de límite de velocidad y otras funciones de seguridad.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Una API gateway puede hacer que sus API sean más seguras al proporcionar un punto de control centralizado para gestionar y proteger el tráfico de API. He aquí algunas formas en las que una API gateway puede mejorar la seguridad de las API:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Autenticación y autorización: Las API gateways pueden gestionar la autenticación y autorización de usuarios, reduciendo la carga de las API individuales y mejorando la coherencia en toda la organización. Esto puede incluir técnicas como la verificación JWT, OAuth y otros mecanismos de autenticación.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Filtrado de tráfico y limitación de velocidad: Una API gateway puede aplicar el filtrado de tráfico y la limitación de velocidad para proteger las API contra ataques DDoS, ataques de fuerza bruta y otros tipos de abuso.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cifrado y descifrado: Una API gateway puede gestionar el cifrado y descifrado de datos confidenciales para protegerlos contra filtraciones y robos de datos.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Registro y supervisión: Una API gateway puede proporcionar registro y supervisión centralizados del tráfico API, lo que ayuda a identificar y responder a las amenazas de seguridad y otros problemas.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Integración con herramientas de seguridad: Una API gateway puede integrarse con herramientas de seguridad como WAFs, SIEMs y otras herramientas de seguridad para proporcionar capas adicionales de protección.\u003C/p>\n\u003C/li>\n\u003C/ul>",{"headings":1191,"localImagePaths":1210,"remoteImagePaths":1211,"frontmatter":1212,"imagePaths":1215},[1192,1195,1198,1201,1204,1207],{"depth":76,"slug":1193,"text":1194},"métodos-http-adecuados","Métodos HTTP adecuados",{"depth":76,"slug":1196,"text":1197},"validación-del-content-type","Validación del Content-Type",{"depth":76,"slug":1199,"text":1200},"validación-de-la-entrada-del-usuario","Validación de la entrada del usuario",{"depth":76,"slug":1202,"text":1203},"cabecera-de-authorization","Cabecera de Authorization",{"depth":76,"slug":1205,"text":1206},"evite-el-cifrado-del-lado-del-cliente","Evite el cifrado del lado del cliente",{"depth":76,"slug":1208,"text":1209},"api-gateway","API Gateway",[],[],{"rutas":1213,"title":933,"description":16,"pubDate":151,"updatedDate":151,"link":1214,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/entrada",[],"seguridad-web/buenas-practicas-apis/entrada.md","seguridad-web/buenas-practicas-apis/monitoring",{"id":1217,"data":1219,"body":1224,"filePath":1225,"digest":1226,"rendered":1227,"legacyId":1252},{"rutas":1220,"title":1221,"description":16,"lang":17,"dir":18,"pubDate":1222,"updatedDate":1223},[15],"Monitorización",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Inicio de sesión centralizado\r\n> Utilice inicios de sesión centralizados para todos los servicios y componentes.\r\n\r\nUtilizar inicios de sesión centralizados para todos los servicios y componentes es importante por varias razones:\r\n\r\n* Los inicios de sesión centralizados le permiten gestionar la autenticación y autorización en un solo lugar, reduciendo el riesgo de brechas de seguridad o inconsistencias entre los diferentes servicios.\r\n\r\n* Los inicios de sesión centralizados proporcionan un único punto de entrada, lo que le permite controlar el acceso y supervisar la actividad más fácilmente.\r\n\r\n* Los inicios de sesión centralizados facilitan la aplicación de políticas de seguridad en diferentes servicios y componentes, garantizando que sólo los usuarios autorizados puedan acceder a datos confidenciales o realizar determinadas acciones.\r\n\r\nPara utilizar inicios de sesión centralizados, es necesario configurar un sistema de inicio de sesión único (SSO) que permita a los usuarios autenticarse una vez y acceder a varios servicios sin tener que volver a facilitar sus credenciales. Para ello se pueden utilizar protocolos como OAuth o SAML, que permiten una autenticación y autorización seguras en distintas aplicaciones y servicios. Una vez configurado, puede utilizar herramientas de registro centralizadas como ELK stack, Splunk o Graylog para recopilar registros de diferentes servicios y componentes y analizarlos en un solo lugar. Esto le permite identificar y responder rápidamente a las amenazas o anomalías de seguridad.\r\n\r\n## Monitorícelo todo\r\n> Utilice agentes para monitorizar todas las peticiones, respuestas y errores.\r\n\r\nEl uso de agentes para supervisar todas las solicitudes, respuestas y errores permite supervisar y detectar en tiempo real cualquier actividad anómala o posibles ataques. Estos agentes pueden configurarse para realizar un seguimiento de métricas como los tiempos de respuesta, las tasas de error y los patrones de uso, lo que puede ayudar a identificar cualquier anomalía que pudiera ser indicativa de un ataque. Al supervisar todas las solicitudes y respuestas, los agentes pueden proporcionar visibilidad del comportamiento de la API, lo que puede ayudar a identificar cualquier posible vulnerabilidad o debilidad de seguridad. Además, los agentes pueden utilizarse para registrar y analizar todos los datos que fluyen a través de la API, lo que puede ser útil para fines de depuración y auditoría.\r\n\r\nPara utilizar agentes para la supervisión, se puede desplegar una solución de supervisión dedicada junto con la API. Esta solución puede configurarse para capturar datos de todas las solicitudes y respuestas, y analizar los datos en busca de anomalías o problemas. Los agentes pueden implementarse utilizando diversas herramientas y tecnologías de supervisión, como agentes para la supervisión del rendimiento de las aplicaciones (APM), la supervisión de registros y la supervisión de la red. Los agentes deben configurarse para proporcionar alertas en tiempo real a los equipos de seguridad si se detecta cualquier actividad sospechosa, lo que permite tomar medidas inmediatas.\r\n\r\n## Configurar alertas\r\n> Utilice alertas para SMS, Slack, correo electrónico, Kibana, Cloudwatch, etc.\r\n\r\nEl uso de alertas para varios canales de comunicación como SMS, Slack, Email, Kibana, Cloudwatch, etc. puede ayudarle a responder rápidamente a cualquier problema o anomalía en su sistema. Estas alertas se pueden configurar para que le notifiquen en tiempo real si se produce un evento o una condición en particular, lo que le permite tomar medidas proactivas para evitar el tiempo de inactividad, la pérdida de datos o las brechas de seguridad. Además, las alertas pueden proporcionar información valiosa sobre el rendimiento del sistema y el comportamiento de los usuarios, lo que le permite tomar decisiones informadas sobre el diseño y la implementación de su API.\r\n\r\n## Evite registrar datos sensibles\r\n> Asegúrate de que no estás registrando ningún dato sensible.\r\n\r\nAsegúrese de que no está registrando ningún dato sensible como contraseñas, números de tarjetas de crédito o información personal. Esto se debe a que el registro de datos sensibles puede exponerlos a los atacantes, permitiéndoles obtener acceso no autorizado a su sistema o datos. Además, el registro de datos sensibles puede violar las leyes y normativas sobre privacidad de datos, exponiéndole a responsabilidades legales.\r\n\r\n## Utilizar sistemas IDS/IPS\r\n> Utilice sistemas IDS y/o IPS para detectar y bloquear ataques.\r\n\r\nLos sistemas de detección de intrusiones (IDS) y los sistemas de prevención de intrusiones (IPS) pueden utilizarse para detectar y bloquear ataques. Estos sistemas pueden configurarse para supervisar todo el tráfico entrante y saliente, y detectar cualquier actividad sospechosa. Si se detecta alguna actividad sospechosa, los sistemas pueden configurarse para bloquear el tráfico, impidiendo que el ataque tenga éxito. Los sistemas IDS e IPS pueden implementarse utilizando diversas herramientas y tecnologías, como sistemas de detección de intrusiones en red (NIDS), sistemas de detección de intrusiones basados en host (HIDS) y sistemas de prevención de intrusiones en red (NIPS). Estos sistemas pueden desplegarse junto a la API y configurarse para supervisar todo el tráfico entrante y saliente. Los sistemas pueden configurarse para proporcionar alertas en tiempo real a los equipos de seguridad si se detecta cualquier actividad sospechosa, lo que permite tomar medidas inmediatas.","src/content/blog/seguridad-web/buenas-practicas-apis/monitoring.md","8b9809334994a189",{"html":1228,"metadata":1229},"\u003Ch2 id=\"inicio-de-sesión-centralizado\">Inicio de sesión centralizado\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice inicios de sesión centralizados para todos los servicios y componentes.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Utilizar inicios de sesión centralizados para todos los servicios y componentes es importante por varias razones:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Los inicios de sesión centralizados le permiten gestionar la autenticación y autorización en un solo lugar, reduciendo el riesgo de brechas de seguridad o inconsistencias entre los diferentes servicios.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Los inicios de sesión centralizados proporcionan un único punto de entrada, lo que le permite controlar el acceso y supervisar la actividad más fácilmente.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Los inicios de sesión centralizados facilitan la aplicación de políticas de seguridad en diferentes servicios y componentes, garantizando que sólo los usuarios autorizados puedan acceder a datos confidenciales o realizar determinadas acciones.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Para utilizar inicios de sesión centralizados, es necesario configurar un sistema de inicio de sesión único (SSO) que permita a los usuarios autenticarse una vez y acceder a varios servicios sin tener que volver a facilitar sus credenciales. Para ello se pueden utilizar protocolos como OAuth o SAML, que permiten una autenticación y autorización seguras en distintas aplicaciones y servicios. Una vez configurado, puede utilizar herramientas de registro centralizadas como ELK stack, Splunk o Graylog para recopilar registros de diferentes servicios y componentes y analizarlos en un solo lugar. Esto le permite identificar y responder rápidamente a las amenazas o anomalías de seguridad.\u003C/p>\n\u003Ch2 id=\"monitorícelo-todo\">Monitorícelo todo\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice agentes para monitorizar todas las peticiones, respuestas y errores.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El uso de agentes para supervisar todas las solicitudes, respuestas y errores permite supervisar y detectar en tiempo real cualquier actividad anómala o posibles ataques. Estos agentes pueden configurarse para realizar un seguimiento de métricas como los tiempos de respuesta, las tasas de error y los patrones de uso, lo que puede ayudar a identificar cualquier anomalía que pudiera ser indicativa de un ataque. Al supervisar todas las solicitudes y respuestas, los agentes pueden proporcionar visibilidad del comportamiento de la API, lo que puede ayudar a identificar cualquier posible vulnerabilidad o debilidad de seguridad. Además, los agentes pueden utilizarse para registrar y analizar todos los datos que fluyen a través de la API, lo que puede ser útil para fines de depuración y auditoría.\u003C/p>\n\u003Cp>Para utilizar agentes para la supervisión, se puede desplegar una solución de supervisión dedicada junto con la API. Esta solución puede configurarse para capturar datos de todas las solicitudes y respuestas, y analizar los datos en busca de anomalías o problemas. Los agentes pueden implementarse utilizando diversas herramientas y tecnologías de supervisión, como agentes para la supervisión del rendimiento de las aplicaciones (APM), la supervisión de registros y la supervisión de la red. Los agentes deben configurarse para proporcionar alertas en tiempo real a los equipos de seguridad si se detecta cualquier actividad sospechosa, lo que permite tomar medidas inmediatas.\u003C/p>\n\u003Ch2 id=\"configurar-alertas\">Configurar alertas\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice alertas para SMS, Slack, correo electrónico, Kibana, Cloudwatch, etc.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El uso de alertas para varios canales de comunicación como SMS, Slack, Email, Kibana, Cloudwatch, etc. puede ayudarle a responder rápidamente a cualquier problema o anomalía en su sistema. Estas alertas se pueden configurar para que le notifiquen en tiempo real si se produce un evento o una condición en particular, lo que le permite tomar medidas proactivas para evitar el tiempo de inactividad, la pérdida de datos o las brechas de seguridad. Además, las alertas pueden proporcionar información valiosa sobre el rendimiento del sistema y el comportamiento de los usuarios, lo que le permite tomar decisiones informadas sobre el diseño y la implementación de su API.\u003C/p>\n\u003Ch2 id=\"evite-registrar-datos-sensibles\">Evite registrar datos sensibles\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Asegúrate de que no estás registrando ningún dato sensible.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Asegúrese de que no está registrando ningún dato sensible como contraseñas, números de tarjetas de crédito o información personal. Esto se debe a que el registro de datos sensibles puede exponerlos a los atacantes, permitiéndoles obtener acceso no autorizado a su sistema o datos. Además, el registro de datos sensibles puede violar las leyes y normativas sobre privacidad de datos, exponiéndole a responsabilidades legales.\u003C/p>\n\u003Ch2 id=\"utilizar-sistemas-idsips\">Utilizar sistemas IDS/IPS\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice sistemas IDS y/o IPS para detectar y bloquear ataques.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Los sistemas de detección de intrusiones (IDS) y los sistemas de prevención de intrusiones (IPS) pueden utilizarse para detectar y bloquear ataques. Estos sistemas pueden configurarse para supervisar todo el tráfico entrante y saliente, y detectar cualquier actividad sospechosa. Si se detecta alguna actividad sospechosa, los sistemas pueden configurarse para bloquear el tráfico, impidiendo que el ataque tenga éxito. Los sistemas IDS e IPS pueden implementarse utilizando diversas herramientas y tecnologías, como sistemas de detección de intrusiones en red (NIDS), sistemas de detección de intrusiones basados en host (HIDS) y sistemas de prevención de intrusiones en red (NIPS). Estos sistemas pueden desplegarse junto a la API y configurarse para supervisar todo el tráfico entrante y saliente. Los sistemas pueden configurarse para proporcionar alertas en tiempo real a los equipos de seguridad si se detecta cualquier actividad sospechosa, lo que permite tomar medidas inmediatas.\u003C/p>",{"headings":1230,"localImagePaths":1246,"remoteImagePaths":1247,"frontmatter":1248,"imagePaths":1251},[1231,1234,1237,1240,1243],{"depth":76,"slug":1232,"text":1233},"inicio-de-sesión-centralizado","Inicio de sesión centralizado",{"depth":76,"slug":1235,"text":1236},"monitorícelo-todo","Monitorícelo todo",{"depth":76,"slug":1238,"text":1239},"configurar-alertas","Configurar alertas",{"depth":76,"slug":1241,"text":1242},"evite-registrar-datos-sensibles","Evite registrar datos sensibles",{"depth":76,"slug":1244,"text":1245},"utilizar-sistemas-idsips","Utilizar sistemas IDS/IPS",[],[],{"rutas":1249,"title":1221,"description":16,"pubDate":151,"updatedDate":151,"link":1250,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/monitoring",[],"seguridad-web/buenas-practicas-apis/monitoring.md","seguridad-web/buenas-practicas-apis/oauth",{"id":1253,"data":1255,"body":1259,"filePath":1260,"digest":1261,"rendered":1262,"legacyId":1283},{"rutas":1256,"title":333,"description":16,"lang":17,"dir":18,"pubDate":1257,"updatedDate":1258},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## redirect_uri\r\n> Valida `redirect_uri' en el lado del servidor para prevenir ataques de redirección abierta.\r\n\r\nEn OAuth, `redirect_uri` es un parámetro que especifica el URI (Uniform Resource Identifier) al que el servidor de autorización debe redirigir al usuario una vez completada la autenticación. El `redirect_uri` se utiliza a menudo en el flujo de OAuth para devolver un código de autorización o token de acceso a la aplicación cliente.\r\n\r\nEs importante validar la `redirect_uri` en el lado del servidor para prevenir ataques como los ataques de redirección abierta. En un ataque de redirección abierta, un atacante puede modificar el parámetro `redirect_uri` para redirigir al usuario a un sitio web malicioso. Al validar la `redirect_uri` en el lado del servidor, puede asegurarse de que la URI de redirección es una URI válida y autorizada para la aplicación cliente.\r\n\r\nLa validación de la `redirect_uri` en el lado del servidor también puede evitar otros tipos de ataques, como los ataques de suplantación de identidad (phishing) o los ataques de falsificación de petición entre sitios (CSRF). Al verificar que la `redirect_uri` coincide con una lista predefinida de URI autorizadas, puede asegurarse de que el usuario es redirigido a un sitio de confianza una vez completada la autenticación.\r\n\r\n## Evite el flujo de concesión implícito\r\n> Evita `response_type=token' e intenta intercambiar por código en su lugar.\r\n\r\nEn OAuth, `response_type=token` es un método para obtener un token de acceso directamente del endpoint de autorización, sin usar un código de autorización. Este método se conoce como flujo de concesión implícito.\r\n\r\nSin embargo, se recomienda evitar el uso de `response_type=token` y utilizar en su lugar el flujo de concesión de código de autorización, en el que el cliente intercambia un código de autorización por un token de acceso. Esto se debe a que el flujo de concesión implícito puede ser menos seguro que el flujo de concesión de código de autorización.\r\n\r\nEl motivo es que el código de acceso se devuelve directamente al cliente en el fragmento de URL de la URI de redirección. Esto significa que el token de acceso podría ser interceptado o expuesto en el historial del navegador o en los registros del servidor. En cambio, con el flujo de concesión de código de autorización, el token de acceso se devuelve al cliente sólo después de que éste haya intercambiado el código de autorización por el token mediante una comunicación segura de servidor a servidor.\r\n\r\nPor lo tanto, al utilizar el flujo de concesión de código de autorización en lugar del flujo de concesión implícito, puede ayudar a proteger el token de acceso de ser expuesto o interceptado por actores maliciosos.\r\n\r\n## Usar parámetro de state\r\n> Usar parámetro de state para evitar ataques CSRF\r\n\r\nEn OAuth, el parámetro de `state` se utiliza como medida de seguridad para evitar ataques CSRF (Cross-Site Request Forgery). Los ataques CSRF se producen cuando un sitio web o script malicioso envía una solicitud a un sitio web legítimo en nombre de un usuario que está autenticado en ese momento.\r\n\r\nPara evitar los ataques CSRF, el parámetro de `state` se utiliza para almacenar un valor único generado por la aplicación cliente antes de iniciar la solicitud de autorización. Este valor se incluye en la solicitud de autorización y luego es verificado por el servidor de autorización cuando el usuario es redirigido de vuelta a la aplicación cliente. Si el valor de `state` de la respuesta de autorización coincide con el valor de `state` enviado por la aplicación cliente, la autorización se considera válida y el token de acceso se devuelve al cliente.\r\n\r\nAl utilizar el parámetro de `state`, puede ayudar a evitar que agentes maliciosos intercepten o modifiquen la solicitud de autorización en tránsito, ya que el valor de `state` único sólo lo conocen la aplicación cliente y el servidor de autorización. Esto puede ayudar a garantizar la integridad y seguridad del flujo OAuth y proteger contra ataques CSRF.\r\n\r\n## Validar scope\r\n> Tener scope por defecto, y validar scope para cada aplicación\r\n\r\nEn OAuth, los scopes se utilizan para especificar los permisos y niveles de acceso que se conceden a las aplicaciones cliente cuando acceden a recursos protegidos en nombre de un usuario.\r\n\r\nLa mejor práctica de tener un scope predeterminado y validar el scope para cada aplicación es importante porque ayuda a garantizar que las aplicaciones cliente sólo tienen acceso a los recursos que necesitan, y que los usuarios sólo conceden los permisos necesarios a cada aplicación.\r\n\r\nEl scope predeterminado es un conjunto de permisos que se conceden a todas las aplicaciones cliente de forma predeterminada, a menos que el usuario especifique lo contrario. Al tener un scope predeterminado, puede asegurarse de que todas las aplicaciones estén sujetas a los mismos controles de acceso y seguridad básicos.\r\n\r\nAdemás de tener un scope por defecto, también se recomienda validar el scope para cada aplicación. Esto significa que cuando un usuario concede acceso a una aplicación, el servidor debe comprobar que el scope solicitado es válido y apropiado para esa aplicación. Esto puede ayudar a evitar que aplicaciones maliciosas soliciten permisos excesivos o acceso no autorizado a los datos del usuario.\r\n\r\nTeniendo un scope por defecto y validando el scope para cada aplicación, puedes ayudar a asegurar que el flujo OAuth es seguro y que las aplicaciones cliente sólo acceden a los recursos y permisos que requieren.","src/content/blog/seguridad-web/buenas-practicas-apis/oauth.md","09bed7652f9a3da6",{"html":1263,"metadata":1264},"\u003Ch2 id=\"redirect_uri\">redirect_uri\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Valida `redirect_uri’ en el lado del servidor para prevenir ataques de redirección abierta.\u003C/p>\n\u003C/blockquote>\n\u003Cp>En OAuth, \u003Ccode>redirect_uri\u003C/code> es un parámetro que especifica el URI (Uniform Resource Identifier) al que el servidor de autorización debe redirigir al usuario una vez completada la autenticación. El \u003Ccode>redirect_uri\u003C/code> se utiliza a menudo en el flujo de OAuth para devolver un código de autorización o token de acceso a la aplicación cliente.\u003C/p>\n\u003Cp>Es importante validar la \u003Ccode>redirect_uri\u003C/code> en el lado del servidor para prevenir ataques como los ataques de redirección abierta. En un ataque de redirección abierta, un atacante puede modificar el parámetro \u003Ccode>redirect_uri\u003C/code> para redirigir al usuario a un sitio web malicioso. Al validar la \u003Ccode>redirect_uri\u003C/code> en el lado del servidor, puede asegurarse de que la URI de redirección es una URI válida y autorizada para la aplicación cliente.\u003C/p>\n\u003Cp>La validación de la \u003Ccode>redirect_uri\u003C/code> en el lado del servidor también puede evitar otros tipos de ataques, como los ataques de suplantación de identidad (phishing) o los ataques de falsificación de petición entre sitios (CSRF). Al verificar que la \u003Ccode>redirect_uri\u003C/code> coincide con una lista predefinida de URI autorizadas, puede asegurarse de que el usuario es redirigido a un sitio de confianza una vez completada la autenticación.\u003C/p>\n\u003Ch2 id=\"evite-el-flujo-de-concesión-implícito\">Evite el flujo de concesión implícito\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Evita `response_type=token’ e intenta intercambiar por código en su lugar.\u003C/p>\n\u003C/blockquote>\n\u003Cp>En OAuth, \u003Ccode>response_type=token\u003C/code> es un método para obtener un token de acceso directamente del endpoint de autorización, sin usar un código de autorización. Este método se conoce como flujo de concesión implícito.\u003C/p>\n\u003Cp>Sin embargo, se recomienda evitar el uso de \u003Ccode>response_type=token\u003C/code> y utilizar en su lugar el flujo de concesión de código de autorización, en el que el cliente intercambia un código de autorización por un token de acceso. Esto se debe a que el flujo de concesión implícito puede ser menos seguro que el flujo de concesión de código de autorización.\u003C/p>\n\u003Cp>El motivo es que el código de acceso se devuelve directamente al cliente en el fragmento de URL de la URI de redirección. Esto significa que el token de acceso podría ser interceptado o expuesto en el historial del navegador o en los registros del servidor. En cambio, con el flujo de concesión de código de autorización, el token de acceso se devuelve al cliente sólo después de que éste haya intercambiado el código de autorización por el token mediante una comunicación segura de servidor a servidor.\u003C/p>\n\u003Cp>Por lo tanto, al utilizar el flujo de concesión de código de autorización en lugar del flujo de concesión implícito, puede ayudar a proteger el token de acceso de ser expuesto o interceptado por actores maliciosos.\u003C/p>\n\u003Ch2 id=\"usar-parámetro-de-state\">Usar parámetro de state\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Usar parámetro de state para evitar ataques CSRF\u003C/p>\n\u003C/blockquote>\n\u003Cp>En OAuth, el parámetro de \u003Ccode>state\u003C/code> se utiliza como medida de seguridad para evitar ataques CSRF (Cross-Site Request Forgery). Los ataques CSRF se producen cuando un sitio web o script malicioso envía una solicitud a un sitio web legítimo en nombre de un usuario que está autenticado en ese momento.\u003C/p>\n\u003Cp>Para evitar los ataques CSRF, el parámetro de \u003Ccode>state\u003C/code> se utiliza para almacenar un valor único generado por la aplicación cliente antes de iniciar la solicitud de autorización. Este valor se incluye en la solicitud de autorización y luego es verificado por el servidor de autorización cuando el usuario es redirigido de vuelta a la aplicación cliente. Si el valor de \u003Ccode>state\u003C/code> de la respuesta de autorización coincide con el valor de \u003Ccode>state\u003C/code> enviado por la aplicación cliente, la autorización se considera válida y el token de acceso se devuelve al cliente.\u003C/p>\n\u003Cp>Al utilizar el parámetro de \u003Ccode>state\u003C/code>, puede ayudar a evitar que agentes maliciosos intercepten o modifiquen la solicitud de autorización en tránsito, ya que el valor de \u003Ccode>state\u003C/code> único sólo lo conocen la aplicación cliente y el servidor de autorización. Esto puede ayudar a garantizar la integridad y seguridad del flujo OAuth y proteger contra ataques CSRF.\u003C/p>\n\u003Ch2 id=\"validar-scope\">Validar scope\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Tener scope por defecto, y validar scope para cada aplicación\u003C/p>\n\u003C/blockquote>\n\u003Cp>En OAuth, los scopes se utilizan para especificar los permisos y niveles de acceso que se conceden a las aplicaciones cliente cuando acceden a recursos protegidos en nombre de un usuario.\u003C/p>\n\u003Cp>La mejor práctica de tener un scope predeterminado y validar el scope para cada aplicación es importante porque ayuda a garantizar que las aplicaciones cliente sólo tienen acceso a los recursos que necesitan, y que los usuarios sólo conceden los permisos necesarios a cada aplicación.\u003C/p>\n\u003Cp>El scope predeterminado es un conjunto de permisos que se conceden a todas las aplicaciones cliente de forma predeterminada, a menos que el usuario especifique lo contrario. Al tener un scope predeterminado, puede asegurarse de que todas las aplicaciones estén sujetas a los mismos controles de acceso y seguridad básicos.\u003C/p>\n\u003Cp>Además de tener un scope por defecto, también se recomienda validar el scope para cada aplicación. Esto significa que cuando un usuario concede acceso a una aplicación, el servidor debe comprobar que el scope solicitado es válido y apropiado para esa aplicación. Esto puede ayudar a evitar que aplicaciones maliciosas soliciten permisos excesivos o acceso no autorizado a los datos del usuario.\u003C/p>\n\u003Cp>Teniendo un scope por defecto y validando el scope para cada aplicación, puedes ayudar a asegurar que el flujo OAuth es seguro y que las aplicaciones cliente sólo acceden a los recursos y permisos que requieren.\u003C/p>",{"headings":1265,"localImagePaths":1277,"remoteImagePaths":1278,"frontmatter":1279,"imagePaths":1282},[1266,1268,1271,1274],{"depth":76,"slug":1267,"text":1267},"redirect_uri",{"depth":76,"slug":1269,"text":1270},"evite-el-flujo-de-concesión-implícito","Evite el flujo de concesión implícito",{"depth":76,"slug":1272,"text":1273},"usar-parámetro-de-state","Usar parámetro de state",{"depth":76,"slug":1275,"text":1276},"validar-scope","Validar scope",[],[],{"rutas":1280,"title":333,"description":16,"pubDate":151,"updatedDate":151,"link":1281,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/oauth",[],"seguridad-web/buenas-practicas-apis/oauth.md","libros/you-dont-know-js-yet/get-started/apb",{"id":1284,"data":1286,"body":1291,"filePath":1292,"digest":1293,"rendered":1294,"legacyId":1322},{"rutas":1287,"title":1288,"description":16,"lang":17,"dir":18,"pubDate":1289,"updatedDate":1290},[804],"Apendice B",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"# You Don't Know JS Yet: Get Started - 2nd Edition\r\n# Appendix B: Practice, Practice, Practice!\r\n\r\nIn this appendix, we'll explore some exercises and their suggested solutions. These are just to *get you started* with practice over the concepts from the book.\r\n\r\n## Practicing Comparisons\r\n\r\nLet's practice working with value types and comparisons (Chapter 4, Pillar 3) where coercion will need to be involved.\r\n\r\n`scheduleMeeting(..)` should take a start time (in 24-hour format as a string \"hh:mm\") and a meeting duration (number of minutes). It should return `true` if the meeting falls entirely within the work day (according to the times specified in `dayStart` and `dayEnd`); return `false` if the meeting violates the work day bounds.\r\n\r\n```js\r\nconst dayStart = \"07:30\";\r\nconst dayEnd = \"17:45\";\r\n\r\nfunction scheduleMeeting(startTime,durationMinutes) {\r\n    // ..TODO..\r\n}\r\n\r\nscheduleMeeting(\"7:00\",15);     // false\r\nscheduleMeeting(\"07:15\",30);    // false\r\nscheduleMeeting(\"7:30\",30);     // true\r\nscheduleMeeting(\"11:30\",60);    // true\r\nscheduleMeeting(\"17:00\",45);    // true\r\nscheduleMeeting(\"17:30\",30);    // false\r\nscheduleMeeting(\"18:00\",15);    // false\r\n```\r\n\r\nTry to solve this yourself first. Consider the usage of equality and relational comparison operators, and how coercion impacts this code. Once you have code that works, *compare* your solution(s) to the code in \"Suggested Solutions\" at the end of this appendix.\r\n\r\n## Practicing Closure\r\n\r\nNow let's practice with closure (Chapter 4, Pillar 1).\r\n\r\nThe `range(..)` function takes a number as its first argument, representing the first number in a desired range of numbers. The second argument is also a number representing the end of the desired range (inclusive). If the second argument is omitted, then another function should be returned that expects that argument.\r\n\r\n```js\r\nfunction range(start,end) {\r\n    // ..TODO..\r\n}\r\n\r\nrange(3,3);    // [3]\r\nrange(3,8);    // [3,4,5,6,7,8]\r\nrange(3,0);    // []\r\n\r\nvar start3 = range(3);\r\nvar start4 = range(4);\r\n\r\nstart3(3);     // [3]\r\nstart3(8);     // [3,4,5,6,7,8]\r\nstart3(0);     // []\r\n\r\nstart4(6);     // [4,5,6]\r\n```\r\n\r\nTry to solve this yourself first.\r\n\r\nOnce you have code that works, *compare* your solution(s) to the code in \"Suggested Solutions\" at the end of this appendix.\r\n\r\n## Practicing Prototypes\r\n\r\nFinally, let's work on `this` and objects linked via prototype (Chapter 4, Pillar 2).\r\n\r\nDefine a slot machine with three reels that can individually `spin()`, and then `display()` the current contents of all the reels.\r\n\r\nThe basic behavior of a single reel is defined in the `reel` object below. But the slot machine needs individual reels—objects that delegate to `reel`, and which each have a `position` property.\r\n\r\nA reel only *knows how* to `display()` its current slot symbol, but a slot machine typically shows three symbols per reel: the current slot (`position`), one slot above (`position - 1`), and one slot below (`position + 1`). So displaying the slot machine should end up displaying a 3 x 3 grid of slot symbols.\r\n\r\n```js\r\nfunction randMax(max) {\r\n    return Math.trunc(1E9 * Math.random()) % max;\r\n}\r\n\r\nvar reel = {\r\n    symbols: [\r\n        \"♠\", \"♥\", \"♦\", \"♣\", \"☺\", \"★\", \"☾\", \"☀\"\r\n    ],\r\n    spin() {\r\n        if (this.position == null) {\r\n            this.position = randMax(\r\n                this.symbols.length - 1\r\n            );\r\n        }\r\n        this.position = (\r\n            this.position + 100 + randMax(100)\r\n        ) % this.symbols.length;\r\n    },\r\n    display() {\r\n        if (this.position == null) {\r\n            this.position = randMax(\r\n                this.symbols.length - 1\r\n            );\r\n        }\r\n        return this.symbols[this.position];\r\n    }\r\n};\r\n\r\nvar slotMachine = {\r\n    reels: [\r\n        // this slot machine needs 3 separate reels\r\n        // hint: Object.create(..)\r\n    ],\r\n    spin() {\r\n        this.reels.forEach(function spinReel(reel){\r\n            reel.spin();\r\n        });\r\n    },\r\n    display() {\r\n        // TODO\r\n    }\r\n};\r\n\r\nslotMachine.spin();\r\nslotMachine.display();\r\n// ☾ | ☀ | ★\r\n// ☀ | ♠ | ☾\r\n// ♠ | ♥ | ☀\r\n\r\nslotMachine.spin();\r\nslotMachine.display();\r\n// ♦ | ♠ | ♣\r\n// ♣ | ♥ | ☺\r\n// ☺ | ♦ | ★\r\n```\r\n\r\nTry to solve this yourself first.\r\n\r\nHints:\r\n\r\n* Use the `%` modulo operator for wrapping `position` as you access symbols circularly around a reel.\r\n\r\n* Use `Object.create(..)` to create an object and prototype-link it to another object. Once linked, delegation allows the objects to share `this` context during method invocation.\r\n\r\n* Instead of modifying the reel object directly to show each of the three positions, you can use another temporary object (`Object.create(..)` again) with its own `position`, to delegate from.\r\n\r\nOnce you have code that works, *compare* your solution(s) to the code in \"Suggested Solutions\" at the end of this appendix.\r\n\r\n## Suggested Solutions\r\n\r\nKeep in mind that these suggested solutions are just that: suggestions. There are many different ways to solve these practice exercises. Compare your approach to what you see here, and consider the pros and cons of each.\r\n\r\nSuggested solution for \"Comparisons\" (Pillar 3) practice:\r\n\r\n```js\r\nconst dayStart = \"07:30\";\r\nconst dayEnd = \"17:45\";\r\n\r\nfunction scheduleMeeting(startTime,durationMinutes) {\r\n    var [ , meetingStartHour, meetingStartMinutes ] =\r\n        startTime.match(/^(\\d{1,2}):(\\d{2})$/) || [];\r\n\r\n    durationMinutes = Number(durationMinutes);\r\n\r\n    if (\r\n        typeof meetingStartHour == \"string\" &&\r\n        typeof meetingStartMinutes == \"string\"\r\n    ) {\r\n        let durationHours =\r\n            Math.floor(durationMinutes / 60);\r\n        durationMinutes =\r\n            durationMinutes - (durationHours * 60);\r\n        let meetingEndHour =\r\n            Number(meetingStartHour) + durationHours;\r\n        let meetingEndMinutes =\r\n            Number(meetingStartMinutes) +\r\n            durationMinutes;\r\n\r\n        if (meetingEndMinutes >= 60) {\r\n            meetingEndHour = meetingEndHour + 1;\r\n            meetingEndMinutes =\r\n                meetingEndMinutes - 60;\r\n        }\r\n\r\n        // re-compose fully-qualified time strings\r\n        // (to make comparison easier)\r\n        let meetingStart = `${\r\n            meetingStartHour.padStart(2,\"0\")\r\n        }:${\r\n            meetingStartMinutes.padStart(2,\"0\")\r\n        }`;\r\n        let meetingEnd = `${\r\n            String(meetingEndHour).padStart(2,\"0\")\r\n        }:${\r\n            String(meetingEndMinutes).padStart(2,\"0\")\r\n        }`;\r\n\r\n        // NOTE: since expressions are all strings,\r\n        // comparisons here are alphabetic, but it's\r\n        // safe here since they're fully qualified\r\n        // time strings (ie, \"07:15\" \u003C \"07:30\")\r\n        return (\r\n            meetingStart >= dayStart &&\r\n            meetingEnd \u003C= dayEnd\r\n        );\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nscheduleMeeting(\"7:00\",15);     // false\r\nscheduleMeeting(\"07:15\",30);    // false\r\nscheduleMeeting(\"7:30\",30);     // true\r\nscheduleMeeting(\"11:30\",60);    // true\r\nscheduleMeeting(\"17:00\",45);    // true\r\nscheduleMeeting(\"17:30\",30);    // false\r\nscheduleMeeting(\"18:00\",15);    // false\r\n```\r\n\r\n----\r\n\r\nSuggested solution for \"Closure\" (Pillar 1) practice:\r\n\r\n```js\r\nfunction range(start,end) {\r\n    start = Number(start) || 0;\r\n\r\n    if (end === undefined) {\r\n        return function getEnd(end) {\r\n            return getRange(start,end);\r\n        };\r\n    }\r\n    else {\r\n        end = Number(end) || 0;\r\n        return getRange(start,end);\r\n    }\r\n\r\n\r\n    // **********************\r\n\r\n    function getRange(start,end) {\r\n        var ret = [];\r\n        for (let i = start; i \u003C= end; i++) {\r\n            ret.push(i);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\nrange(3,3);    // [3]\r\nrange(3,8);    // [3,4,5,6,7,8]\r\nrange(3,0);    // []\r\n\r\nvar start3 = range(3);\r\nvar start4 = range(4);\r\n\r\nstart3(3);     // [3]\r\nstart3(8);     // [3,4,5,6,7,8]\r\nstart3(0);     // []\r\n\r\nstart4(6);     // [4,5,6]\r\n```\r\n\r\n----\r\n\r\nSuggested solution for \"Prototypes\" (Pillar 2) practice:\r\n\r\n```js\r\nfunction randMax(max) {\r\n    return Math.trunc(1E9 * Math.random()) % max;\r\n}\r\n\r\nvar reel = {\r\n    symbols: [\r\n        \"♠\", \"♥\", \"♦\", \"♣\", \"☺\", \"★\", \"☾\", \"☀\"\r\n    ],\r\n    spin() {\r\n        if (this.position == null) {\r\n            this.position = randMax(\r\n                this.symbols.length - 1\r\n            );\r\n        }\r\n        this.position = (\r\n            this.position + 100 + randMax(100)\r\n        ) % this.symbols.length;\r\n    },\r\n    display() {\r\n        if (this.position == null) {\r\n            this.position = randMax(\r\n                this.symbols.length - 1\r\n            );\r\n        }\r\n        return this.symbols[this.position];\r\n    }\r\n};\r\n\r\nvar slotMachine = {\r\n    reels: [\r\n        Object.create(reel),\r\n        Object.create(reel),\r\n        Object.create(reel)\r\n    ],\r\n    spin() {\r\n        this.reels.forEach(function spinReel(reel){\r\n            reel.spin();\r\n        });\r\n    },\r\n    display() {\r\n        var lines = [];\r\n\r\n        // display all 3 lines on the slot machine\r\n        for (\r\n            let linePos = -1; linePos \u003C= 1; linePos++\r\n        ) {\r\n            let line = this.reels.map(\r\n                function getSlot(reel){\r\n                    var slot = Object.create(reel);\r\n                    slot.position = (\r\n                        reel.symbols.length +\r\n                        reel.position +\r\n                        linePos\r\n                    ) % reel.symbols.length;\r\n                    return slot.display();\r\n                }\r\n            );\r\n            lines.push(line.join(\" | \"));\r\n        }\r\n\r\n        return lines.join(\"\\n\");\r\n    }\r\n};\r\n\r\nslotMachine.spin();\r\nslotMachine.display();\r\n// ☾ | ☀ | ★\r\n// ☀ | ♠ | ☾\r\n// ♠ | ♥ | ☀\r\n\r\nslotMachine.spin();\r\nslotMachine.display();\r\n// ♦ | ♠ | ♣\r\n// ♣ | ♥ | ☺\r\n// ☺ | ♦ | ★\r\n```\r\n\r\nThat's it for this book. But now it's time to look for real projects to practice these ideas on. Just keep coding, because that's the best way to learn!","src/content/blog/libros/you-dont-know-js-yet/get-started/apB.md","ee774850fb4f9524",{"html":1295,"metadata":1296},"\u003Ch1 id=\"you-dont-know-js-yet-get-started---2nd-edition\">You Don’t Know JS Yet: Get Started - 2nd Edition\u003C/h1>\n\u003Ch1 id=\"appendix-b-practice-practice-practice\">Appendix B: Practice, Practice, Practice!\u003C/h1>\n\u003Cp>In this appendix, we’ll explore some exercises and their suggested solutions. These are just to \u003Cem>get you started\u003C/em> with practice over the concepts from the book.\u003C/p>\n\u003Ch2 id=\"practicing-comparisons\">Practicing Comparisons\u003C/h2>\n\u003Cp>Let’s practice working with value types and comparisons (Chapter 4, Pillar 3) where coercion will need to be involved.\u003C/p>\n\u003Cp>\u003Ccode>scheduleMeeting(..)\u003C/code> should take a start time (in 24-hour format as a string “hh:mm”) and a meeting duration (number of minutes). It should return \u003Ccode>true\u003C/code> if the meeting falls entirely within the work day (according to the times specified in \u003Ccode>dayStart\u003C/code> and \u003Ccode>dayEnd\u003C/code>); return \u003Ccode>false\u003C/code> if the meeting violates the work day bounds.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dayStart\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"07:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dayEnd\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"17:45\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">startTime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">durationMinutes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..TODO..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"7:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"07:15\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"7:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"11:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"17:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">45\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"17:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"18:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Try to solve this yourself first. Consider the usage of equality and relational comparison operators, and how coercion impacts this code. Once you have code that works, \u003Cem>compare\u003C/em> your solution(s) to the code in “Suggested Solutions” at the end of this appendix.\u003C/p>\n\u003Ch2 id=\"practicing-closure\">Practicing Closure\u003C/h2>\n\u003Cp>Now let’s practice with closure (Chapter 4, Pillar 1).\u003C/p>\n\u003Cp>The \u003Ccode>range(..)\u003C/code> function takes a number as its first argument, representing the first number in a desired range of numbers. The second argument is also a number representing the end of the desired range (inclusive). If the second argument is omitted, then another function should be returned that expects that argument.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..TODO..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3,4,5,6,7,8]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start3 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start4 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3,4,5,6,7,8]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [4,5,6]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Try to solve this yourself first.\u003C/p>\n\u003Cp>Once you have code that works, \u003Cem>compare\u003C/em> your solution(s) to the code in “Suggested Solutions” at the end of this appendix.\u003C/p>\n\u003Ch2 id=\"practicing-prototypes\">Practicing Prototypes\u003C/h2>\n\u003Cp>Finally, let’s work on \u003Ccode>this\u003C/code> and objects linked via prototype (Chapter 4, Pillar 2).\u003C/p>\n\u003Cp>Define a slot machine with three reels that can individually \u003Ccode>spin()\u003C/code>, and then \u003Ccode>display()\u003C/code> the current contents of all the reels.\u003C/p>\n\u003Cp>The basic behavior of a single reel is defined in the \u003Ccode>reel\u003C/code> object below. But the slot machine needs individual reels—objects that delegate to \u003Ccode>reel\u003C/code>, and which each have a \u003Ccode>position\u003C/code> property.\u003C/p>\n\u003Cp>A reel only \u003Cem>knows how\u003C/em> to \u003Ccode>display()\u003C/code> its current slot symbol, but a slot machine typically shows three symbols per reel: the current slot (\u003Ccode>position\u003C/code>), one slot above (\u003Ccode>position - 1\u003C/code>), and one slot below (\u003Ccode>position + 1\u003C/code>). So displaying the slot machine should end up displaying a 3 x 3 grid of slot symbols.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">trunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1E9\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> max;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> reel \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    symbols: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"♠\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♥\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♦\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♣\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☺\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"★\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☾\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☀\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">position\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ) \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols[\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> slotMachine \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    reels: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // this slot machine needs 3 separate reels\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // hint: Object.create(..)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.reels.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> spinReel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">reel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            reel.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // TODO\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☾ | ☀ | ★\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☀ | ♠ | ☾\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♠ | ♥ | ☀\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♦ | ♠ | ♣\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♣ | ♥ | ☺\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☺ | ♦ | ★\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Try to solve this yourself first.\u003C/p>\n\u003Cp>Hints:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Use the \u003Ccode>%\u003C/code> modulo operator for wrapping \u003Ccode>position\u003C/code> as you access symbols circularly around a reel.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Use \u003Ccode>Object.create(..)\u003C/code> to create an object and prototype-link it to another object. Once linked, delegation allows the objects to share \u003Ccode>this\u003C/code> context during method invocation.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Instead of modifying the reel object directly to show each of the three positions, you can use another temporary object (\u003Ccode>Object.create(..)\u003C/code> again) with its own \u003Ccode>position\u003C/code>, to delegate from.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Once you have code that works, \u003Cem>compare\u003C/em> your solution(s) to the code in “Suggested Solutions” at the end of this appendix.\u003C/p>\n\u003Ch2 id=\"suggested-solutions\">Suggested Solutions\u003C/h2>\n\u003Cp>Keep in mind that these suggested solutions are just that: suggestions. There are many different ways to solve these practice exercises. Compare your approach to what you see here, and consider the pros and cons of each.\u003C/p>\n\u003Cp>Suggested solution for “Comparisons” (Pillar 3) practice:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dayStart\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"07:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dayEnd\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"17:45\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">startTime\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">durationMinutes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ , meetingStartHour, meetingStartMinutes ] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        startTime.\u003C/span>\u003Cspan style=\"color:#B392F0\">match\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#F97583\">^\u003C/span>\u003Cspan style=\"color:#DBEDFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\d\u003C/span>\u003Cspan style=\"color:#F97583\">{1,2}\u003C/span>\u003Cspan style=\"color:#DBEDFF\">):(\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\d\u003C/span>\u003Cspan style=\"color:#F97583\">{2}\u003C/span>\u003Cspan style=\"color:#DBEDFF\">)\u003C/span>\u003Cspan style=\"color:#F97583\">$\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    durationMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(durationMinutes);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingStartHour \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"string\"\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingStartMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"string\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> durationHours \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">floor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(durationMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        durationMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            durationMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (durationHours \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingEndHour \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(meetingStartHour) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> durationHours;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingEndMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(meetingStartMinutes) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            durationMinutes;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (meetingEndMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingEndHour \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingEndHour \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingEndMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                meetingEndMinutes \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // re-compose fully-qualified time strings\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // (to make comparison easier)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingStart \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingStartHour\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">padStart\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        }:${\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingStartMinutes\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">padStart\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> meetingEnd \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `${\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            String\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">meetingEndHour\u003C/span>\u003Cspan style=\"color:#9ECBFF\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">padStart\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        }:${\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            String\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#E1E4E8\">meetingEndMinutes\u003C/span>\u003Cspan style=\"color:#9ECBFF\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">padStart\u003C/span>\u003Cspan style=\"color:#9ECBFF\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#9ECBFF\">,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"0\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // NOTE: since expressions are all strings,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // comparisons here are alphabetic, but it's\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // safe here since they're fully qualified\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // time strings (ie, \"07:15\" &#x3C; \"07:30\")\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingStart \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> dayStart \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            meetingEnd \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#FFAB70\"> dayEnd\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"7:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"07:15\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"7:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"11:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"17:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">45\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"17:30\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">scheduleMeeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"18:00\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">15\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Cp>Suggested solution for “Closure” (Pillar 1) practice:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    start \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (end \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getEnd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            return\u003C/span>\u003Cspan style=\"color:#B392F0\"> getRange\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start,end);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        end \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(end) \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#B392F0\"> getRange\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(start,end);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // **********************\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getRange\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">start\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ret \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> end; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ret.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(i);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ret;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3,4,5,6,7,8]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);    \u003C/span>\u003Cspan style=\"color:#6A737D\">// []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start3 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> start4 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> range\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [3,4,5,6,7,8]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// []\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">start4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);     \u003C/span>\u003Cspan style=\"color:#6A737D\">// [4,5,6]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Cp>Suggested solution for “Prototypes” (Pillar 2) practice:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">max\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">trunc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1E9\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Math.\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> max;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> reel \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    symbols: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"♠\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♥\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♦\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"♣\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☺\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"★\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☾\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"☀\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">position\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ) \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">            this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> randMax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.symbols[\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.position];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> slotMachine \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    reels: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reel),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reel),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reel)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.reels.\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> spinReel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">reel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            reel.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // display all 3 lines on the slot machine\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> linePos \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; linePos \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; linePos\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> line \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.reels.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getSlot\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">reel\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> slot \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(reel);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    slot.\u003C/span>\u003Cspan style=\"color:#B392F0\">position\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                        reel.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                        reel.position \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">                        linePos\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    ) \u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> reel.symbols.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> slot.\u003C/span>\u003Cspan style=\"color:#B392F0\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            lines.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(line.\u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\" | \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> lines.\u003C/span>\u003Cspan style=\"color:#B392F0\">join\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☾ | ☀ | ★\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☀ | ♠ | ☾\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♠ | ♥ | ☀\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">spin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">slotMachine.\u003C/span>\u003Cspan style=\"color:#B392F0\">display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♦ | ♠ | ♣\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ♣ | ♥ | ☺\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ☺ | ♦ | ★\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s it for this book. But now it’s time to look for real projects to practice these ideas on. Just keep coding, because that’s the best way to learn!\u003C/p>",{"headings":1297,"localImagePaths":1316,"remoteImagePaths":1317,"frontmatter":1318,"imagePaths":1321},[1298,1301,1304,1307,1310,1313],{"depth":815,"slug":1299,"text":1300},"you-dont-know-js-yet-get-started---2nd-edition","You Don’t Know JS Yet: Get Started - 2nd Edition",{"depth":815,"slug":1302,"text":1303},"appendix-b-practice-practice-practice","Appendix B: Practice, Practice, Practice!",{"depth":76,"slug":1305,"text":1306},"practicing-comparisons","Practicing Comparisons",{"depth":76,"slug":1308,"text":1309},"practicing-closure","Practicing Closure",{"depth":76,"slug":1311,"text":1312},"practicing-prototypes","Practicing Prototypes",{"depth":76,"slug":1314,"text":1315},"suggested-solutions","Suggested Solutions",[],[],{"rutas":1319,"title":1288,"description":16,"pubDate":151,"updatedDate":151,"link":1320,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/apB",[],"libros/you-dont-know-js-yet/get-started/apB.md","libros/you-dont-know-js-yet/get-started/apa",{"id":1323,"data":1325,"body":1330,"filePath":1331,"digest":1332,"rendered":1333,"legacyId":1359},{"rutas":1326,"title":1327,"description":16,"lang":17,"dir":18,"pubDate":1328,"updatedDate":1329},[804],"Apendice A",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"# You Don't Know JS Yet: Get Started - 2nd Edition\r\n# Appendix A: Exploring Further\r\n\r\nIn this appendix, we're going to explore some topics from the main chapter text in a bit more detail. Think of this content as an optional preview of some of the more nuanced details covered throughout the rest of the book series.\r\n\r\n## Values vs. References\r\n\r\nIn Chapter 2, we introduced the two main types of values: primitives and objects. But we didn't discuss yet one key difference between the two: how these values are assigned and passed around.\r\n\r\nIn many languages, the developer can choose between assigning/passing a value as the value itself, or as a reference to the value. In JS, however, this decision is entirely determined by the kind of value. That surprises a lot of developers from other languages when they start using JS.\r\n\r\nIf you assign/pass a value itself, the value is copied. For example:\r\n\r\n```js\r\nvar myName = \"Kyle\";\r\n\r\nvar yourName = myName;\r\n```\r\n\r\nHere, the `yourName` variable has a separate copy of the `\"Kyle\"` string from the value that's stored in `myName`. That's because the value is a primitive, and primitive values are always assigned/passed as **value copies**.\r\n\r\nHere's how you can prove there's two separate values involved:\r\n\r\n```js\r\nvar myName = \"Kyle\";\r\n\r\nvar yourName = myName;\r\n\r\nmyName = \"Frank\";\r\n\r\nconsole.log(myName);\r\n// Frank\r\n\r\nconsole.log(yourName);\r\n// Kyle\r\n```\r\n\r\nSee how `yourName` wasn't affected by the re-assignment of `myName` to `\"Frank\"`? That's because each variable holds its own copy of the value.\r\n\r\nBy contrast, references are the idea that two or more variables are pointing at the same value, such that modifying this shared value would be reflected by access via any of those references. In JS, only object values (arrays, objects, functions, etc.) are treated as references.\r\n\r\nConsider:\r\n\r\n```js\r\nvar myAddress = {\r\n    street: \"123 JS Blvd\",\r\n    city: \"Austin\",\r\n    state: \"TX\"\r\n};\r\n\r\nvar yourAddress = myAddress;\r\n\r\n// I've got to move to a new house!\r\nmyAddress.street = \"456 TS Ave\";\r\n\r\nconsole.log(yourAddress.street);\r\n// 456 TS Ave\r\n```\r\n\r\nBecause the value assigned to `myAddress` is an object, it's held/assigned by reference, and thus the assignment to the `yourAddress` variable is a copy of the reference, not the object value itself. That's why the updated value assigned to the `myAddress.street` is reflected when we access `yourAddress.street`. `myAddress` and `yourAddress` have copies of the reference to the single shared object, so an update to one is an update to both.\r\n\r\nAgain, JS chooses the value-copy vs. reference-copy behavior based on the value type. Primitives are held by value, objects are held by reference. There's no way to override this in JS, in either direction.\r\n\r\n## So Many Function Forms\r\n\r\nRecall this snippet from the \"Functions\" section in Chapter 2:\r\n\r\n```js\r\nvar awesomeFunction = function(coolThings) {\r\n    // ..\r\n    return amazingStuff;\r\n};\r\n```\r\n\r\nThe function expression here is referred to as an *anonymous function expression*, since it has no name identifier between the `function` keyword and the `(..)` parameter list. This point confuses many JS developers because as of ES6, JS performs a \"name inference\" on an anonymous function:\r\n\r\n```js\r\nawesomeFunction.name;\r\n// \"awesomeFunction\"\r\n```\r\n\r\nThe `name` property of a function will reveal either its directly given name (in the case of a declaration) or its inferred name in the case of an anonymous function expression. That value is generally used by developer tools when inspecting a function value or when reporting an error stack trace.\r\n\r\nSo even an anonymous function expression *might* get a name. However, name inference only happens in limited cases such as when the function expression is assigned (with `=`). If you pass a function expression as an argument to a function call, for example, no name inference occurs; the `name` property will be an empty string, and the developer console will usually report \"(anonymous function)\".\r\n\r\nEven if a name is inferred, **it's still an anonymous function.** Why? Because the inferred name is a metadata string value, not an available identifier to refer to the function. An anonymous function doesn't have an identifier to use to refer to itself from inside itself—for recursion, event unbinding, etc.\r\n\r\nCompare the anonymous function expression form to:\r\n\r\n```js\r\n// let awesomeFunction = ..\r\n// const awesomeFunction = ..\r\nvar awesomeFunction = function someName(coolThings) {\r\n    // ..\r\n    return amazingStuff;\r\n};\r\n\r\nawesomeFunction.name;\r\n// \"someName\"\r\n```\r\n\r\nThis function expression is a *named function expression*, since the identifier `someName` is directly associated with the function expression at compile time; the association with the identifier `awesomeFunction` still doesn't happen until runtime at the time of that statement. Those two identifiers don't have to match; sometimes it makes sense to have them be different, other times it's better to have them be the same.\r\n\r\nNotice also that the explicit function name, the identifier `someName`, takes precedence when assigning a *name* for the `name` property.\r\n\r\nShould function expressions be named or anonymous? Opinions vary widely on this. Most developers tend to be unconcerned with using anonymous functions. They're shorter, and unquestionably more common in the broad sphere of JS code out there.\r\n\r\nIn my opinion, if a function exists in your program, it has a purpose; otherwise, take it out! And if it has a purpose, it has a natural name that describes that purpose.\r\n\r\nIf a function has a name, you the code author should include that name in the code, so that the reader does not have to infer that name from reading and mentally executing that function's source code. Even a trivial function body like `x * 2` has to be read to infer a name like \"double\" or \"multBy2\"; that brief extra mental work is unnecessary when you could just take a second to name the function \"double\" or \"multBy2\" *once*, saving the reader that repeated mental work every time it's read in the future.\r\n\r\nThere are, regrettably in some respects, many other function definition forms in JS as of early 2020 (maybe more in the future!).\r\n\r\nHere are some more declaration forms:\r\n\r\n```js\r\n// generator function declaration\r\nfunction *two() { .. }\r\n\r\n// async function declaration\r\nasync function three() { .. }\r\n\r\n// async generator function declaration\r\nasync function *four() { .. }\r\n\r\n// named function export declaration (ES6 modules)\r\nexport function five() { .. }\r\n```\r\n\r\nAnd here are some more of the (many!) function expression forms:\r\n\r\n```js\r\n// IIFE\r\n(function(){ .. })();\r\n(function namedIIFE(){ .. })();\r\n\r\n// asynchronous IIFE\r\n(async function(){ .. })();\r\n(async function namedAIIFE(){ .. })();\r\n\r\n// arrow function expressions\r\nvar f;\r\nf = () => 42;\r\nf = x => x * 2;\r\nf = (x) => x * 2;\r\nf = (x,y) => x * y;\r\nf = x => ({ x: x * 2 });\r\nf = x => { return x * 2; };\r\nf = async x => {\r\n    var y = await doSomethingAsync(x);\r\n    return y * 2;\r\n};\r\nsomeOperation( x => x * 2 );\r\n// ..\r\n```\r\n\r\nKeep in mind that arrow function expressions are **syntactically anonymous**, meaning the syntax doesn't provide a way to provide a direct name identifier for the function. The function expression may get an inferred name, but only if it's one of the assignment forms, not in the (more common!) form of being passed as a function call argument (as in the last line of the snippet).\r\n\r\nSince I don't think anonymous functions are a good idea to use frequently in your programs, I'm not a fan of using the `=>` arrow function form. This kind of function actually has a specific purpose (i.e., handling the `this` keyword lexically), but that doesn't mean we should use it for every function we write. Use the most appropriate tool for each job.\r\n\r\nFunctions can also be specified in class definitions and object literal definitions. They're typically referred to as \"methods\" when in these forms, though in JS this term doesn't have much observable difference over \"function\":\r\n\r\n```js\r\nclass SomethingKindaGreat {\r\n    // class methods\r\n    coolMethod() { .. }   // no commas!\r\n    boringMethod() { .. }\r\n}\r\n\r\nvar EntirelyDifferent = {\r\n    // object methods\r\n    coolMethod() { .. },   // commas!\r\n    boringMethod() { .. },\r\n\r\n    // (anonymous) function expression property\r\n    oldSchool: function() { .. }\r\n};\r\n```\r\n\r\nPhew! That's a lot of different ways to define functions.\r\n\r\nThere's no simple shortcut path here; you just have to build familiarity with all the function forms so you can recognize them in existing code and use them appropriately in the code you write. Study them closely and practice!\r\n\r\n## Coercive Conditional Comparison\r\n\r\nYes, that section name is quite a mouthful. But what are we talking about? We're talking about conditional expressions needing to perform coercion-oriented comparisons to make their decisions.\r\n\r\n`if` and `? :`-ternary statements, as well as the test clauses in `while` and `for` loops, all perform an implicit value comparison. But what sort? Is it \"strict\" or \"coercive\"? Both, actually.\r\n\r\nConsider:\r\n\r\n```js\r\nvar x = 1;\r\n\r\nif (x) {\r\n    // will run!\r\n}\r\n\r\nwhile (x) {\r\n    // will run, once!\r\n    x = false;\r\n}\r\n```\r\n\r\nYou might think of these `(x)` conditional expressions like this:\r\n\r\n```js\r\nvar x = 1;\r\n\r\nif (x == true) {\r\n    // will run!\r\n}\r\n\r\nwhile (x == true) {\r\n    // will run, once!\r\n    x = false;\r\n}\r\n```\r\n\r\nIn this specific case -- the value of `x` being `1` -- that mental model works, but it's not accurate more broadly. Consider:\r\n\r\n```js\r\nvar x = \"hello\";\r\n\r\nif (x) {\r\n    // will run!\r\n}\r\n\r\nif (x == true) {\r\n    // won't run :(\r\n}\r\n```\r\n\r\nOops. So what is the `if` statement actually doing? This is the more accurate mental model:\r\n\r\n```js\r\nvar x = \"hello\";\r\n\r\nif (Boolean(x) == true) {\r\n    // will run\r\n}\r\n\r\n// which is the same as:\r\n\r\nif (Boolean(x) === true) {\r\n    // will run\r\n}\r\n```\r\n\r\nSince the `Boolean(..)` function always returns a value of type boolean, the `==` vs `===` in this snippet is irrelevant; they'll both do the same thing. But the important part is to see that before the comparison, a coercion occurs, from whatever type `x` currently is, to boolean.\r\n\r\nYou just can't get away from coercions in JS comparisons. Buckle down and learn them.\r\n\r\n## Prototypal \"Classes\"\r\n\r\nIn Chapter 3, we introduced prototypes and showed how we can link objects through a prototype chain.\r\n\r\nAnother way of wiring up such prototype linkages served as the (honestly, ugly) predecessor to the elegance of the ES6 `class` system (see Chapter 2, \"Classes\"), and is referred to as prototypal classes.\r\n\r\n| TIP: |\r\n| :--- |\r\n| While this style of code is quite uncommon in JS these days, it's still perplexingly rather common to be asked about it in job interviews! |\r\n\r\nLet's first recall the `Object.create(..)` style of coding:\r\n\r\n```js\r\nvar Classroom = {\r\n    welcome() {\r\n        console.log(\"Welcome, students!\");\r\n    }\r\n};\r\n\r\nvar mathClass = Object.create(Classroom);\r\n\r\nmathClass.welcome();\r\n// Welcome, students!\r\n```\r\n\r\nHere, a `mathClass` object is linked via its prototype to a `Classroom` object. Through this linkage, the function call `mathClass.welcome()` is delegated to the method defined on `Classroom`.\r\n\r\nThe prototypal class pattern would have labeled this delegation behavior \"inheritance,\" and alternatively have defined it (with the same behavior) as:\r\n\r\n```js\r\nfunction Classroom() {\r\n    // ..\r\n}\r\n\r\nClassroom.prototype.welcome = function hello() {\r\n    console.log(\"Welcome, students!\");\r\n};\r\n\r\nvar mathClass = new Classroom();\r\n\r\nmathClass.welcome();\r\n// Welcome, students!\r\n```\r\n\r\nAll functions by default reference an empty object at a property named `prototype`. Despite the confusing naming, this is **not** the function's *prototype* (where the function is prototype linked to), but rather the prototype object to *link to* when other objects are created by calling the function with `new`.\r\n\r\nWe add a `welcome` property on that empty object (called `Classroom.prototype`), pointing at the `hello()` function.\r\n\r\nThen `new Classroom()` creates a new object (assigned to `mathClass`), and prototype links it to the existing `Classroom.prototype` object.\r\n\r\nThough `mathClass` does not have a `welcome()` property/function, it successfully delegates to the function `Classroom.prototype.welcome()`.\r\n\r\nThis \"prototypal class\" pattern is now strongly discouraged, in favor of using ES6's `class` mechanism:\r\n\r\n```js\r\nclass Classroom {\r\n    constructor() {\r\n        // ..\r\n    }\r\n\r\n    welcome() {\r\n        console.log(\"Welcome, students!\");\r\n    }\r\n}\r\n\r\nvar mathClass = new Classroom();\r\n\r\nmathClass.welcome();\r\n// Welcome, students!\r\n```\r\n\r\nUnder the covers, the same prototype linkage is wired up, but this `class` syntax fits the class-oriented design pattern much more cleanly than \"prototypal classes\".","src/content/blog/libros/you-dont-know-js-yet/get-started/apA.md","94b0e244668a5d0c",{"html":1334,"metadata":1335},"\u003Ch1 id=\"you-dont-know-js-yet-get-started---2nd-edition\">You Don’t Know JS Yet: Get Started - 2nd Edition\u003C/h1>\n\u003Ch1 id=\"appendix-a-exploring-further\">Appendix A: Exploring Further\u003C/h1>\n\u003Cp>In this appendix, we’re going to explore some topics from the main chapter text in a bit more detail. Think of this content as an optional preview of some of the more nuanced details covered throughout the rest of the book series.\u003C/p>\n\u003Ch2 id=\"values-vs-references\">Values vs. References\u003C/h2>\n\u003Cp>In Chapter 2, we introduced the two main types of values: primitives and objects. But we didn’t discuss yet one key difference between the two: how these values are assigned and passed around.\u003C/p>\n\u003Cp>In many languages, the developer can choose between assigning/passing a value as the value itself, or as a reference to the value. In JS, however, this decision is entirely determined by the kind of value. That surprises a lot of developers from other languages when they start using JS.\u003C/p>\n\u003Cp>If you assign/pass a value itself, the value is copied. For example:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> yourName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, the \u003Ccode>yourName\u003C/code> variable has a separate copy of the \u003Ccode>\"Kyle\"\u003C/code> string from the value that’s stored in \u003Ccode>myName\u003C/code>. That’s because the value is a primitive, and primitive values are always assigned/passed as \u003Cstrong>value copies\u003C/strong>.\u003C/p>\n\u003Cp>Here’s how you can prove there’s two separate values involved:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> yourName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Frank\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(myName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Frank\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(yourName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>See how \u003Ccode>yourName\u003C/code> wasn’t affected by the re-assignment of \u003Ccode>myName\u003C/code> to \u003Ccode>\"Frank\"\u003C/code>? That’s because each variable holds its own copy of the value.\u003C/p>\n\u003Cp>By contrast, references are the idea that two or more variables are pointing at the same value, such that modifying this shared value would be reflected by access via any of those references. In JS, only object values (arrays, objects, functions, etc.) are treated as references.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myAddress \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    street: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"123 JS Blvd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    city: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Austin\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    state: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"TX\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> yourAddress \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myAddress;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// I've got to move to a new house!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">myAddress.street \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"456 TS Ave\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(yourAddress.street);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 456 TS Ave\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Because the value assigned to \u003Ccode>myAddress\u003C/code> is an object, it’s held/assigned by reference, and thus the assignment to the \u003Ccode>yourAddress\u003C/code> variable is a copy of the reference, not the object value itself. That’s why the updated value assigned to the \u003Ccode>myAddress.street\u003C/code> is reflected when we access \u003Ccode>yourAddress.street\u003C/code>. \u003Ccode>myAddress\u003C/code> and \u003Ccode>yourAddress\u003C/code> have copies of the reference to the single shared object, so an update to one is an update to both.\u003C/p>\n\u003Cp>Again, JS chooses the value-copy vs. reference-copy behavior based on the value type. Primitives are held by value, objects are held by reference. There’s no way to override this in JS, in either direction.\u003C/p>\n\u003Ch2 id=\"so-many-function-forms\">So Many Function Forms\u003C/h2>\n\u003Cp>Recall this snippet from the “Functions” section in Chapter 2:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> awesomeFunction\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">coolThings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> amazingStuff;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The function expression here is referred to as an \u003Cem>anonymous function expression\u003C/em>, since it has no name identifier between the \u003Ccode>function\u003C/code> keyword and the \u003Ccode>(..)\u003C/code> parameter list. This point confuses many JS developers because as of ES6, JS performs a “name inference” on an anonymous function:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">awesomeFunction.name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"awesomeFunction\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>name\u003C/code> property of a function will reveal either its directly given name (in the case of a declaration) or its inferred name in the case of an anonymous function expression. That value is generally used by developer tools when inspecting a function value or when reporting an error stack trace.\u003C/p>\n\u003Cp>So even an anonymous function expression \u003Cem>might\u003C/em> get a name. However, name inference only happens in limited cases such as when the function expression is assigned (with \u003Ccode>=\u003C/code>). If you pass a function expression as an argument to a function call, for example, no name inference occurs; the \u003Ccode>name\u003C/code> property will be an empty string, and the developer console will usually report “(anonymous function)”.\u003C/p>\n\u003Cp>Even if a name is inferred, \u003Cstrong>it’s still an anonymous function.\u003C/strong> Why? Because the inferred name is a metadata string value, not an available identifier to refer to the function. An anonymous function doesn’t have an identifier to use to refer to itself from inside itself—for recursion, event unbinding, etc.\u003C/p>\n\u003Cp>Compare the anonymous function expression form to:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// let awesomeFunction = ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// const awesomeFunction = ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> awesomeFunction\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> someName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">coolThings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> amazingStuff;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">awesomeFunction.name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"someName\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This function expression is a \u003Cem>named function expression\u003C/em>, since the identifier \u003Ccode>someName\u003C/code> is directly associated with the function expression at compile time; the association with the identifier \u003Ccode>awesomeFunction\u003C/code> still doesn’t happen until runtime at the time of that statement. Those two identifiers don’t have to match; sometimes it makes sense to have them be different, other times it’s better to have them be the same.\u003C/p>\n\u003Cp>Notice also that the explicit function name, the identifier \u003Ccode>someName\u003C/code>, takes precedence when assigning a \u003Cem>name\u003C/em> for the \u003Ccode>name\u003C/code> property.\u003C/p>\n\u003Cp>Should function expressions be named or anonymous? Opinions vary widely on this. Most developers tend to be unconcerned with using anonymous functions. They’re shorter, and unquestionably more common in the broad sphere of JS code out there.\u003C/p>\n\u003Cp>In my opinion, if a function exists in your program, it has a purpose; otherwise, take it out! And if it has a purpose, it has a natural name that describes that purpose.\u003C/p>\n\u003Cp>If a function has a name, you the code author should include that name in the code, so that the reader does not have to infer that name from reading and mentally executing that function’s source code. Even a trivial function body like \u003Ccode>x * 2\u003C/code> has to be read to infer a name like “double” or “multBy2”; that brief extra mental work is unnecessary when you could just take a second to name the function “double” or “multBy2” \u003Cem>once\u003C/em>, saving the reader that repeated mental work every time it’s read in the future.\u003C/p>\n\u003Cp>There are, regrettably in some respects, many other function definition forms in JS as of early 2020 (maybe more in the future!).\u003C/p>\n\u003Cp>Here are some more declaration forms:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// generator function declaration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#B392F0\">two\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// async function declaration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> three\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// async generator function declaration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#B392F0\">four\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// named function export declaration (ES6 modules)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> five\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And here are some more of the (many!) function expression forms:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// IIFE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){ .. })();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> namedIIFE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){ .. })();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// asynchronous IIFE\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){ .. })();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> namedAIIFE\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){ .. })();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// arrow function expressions\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> f;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 42\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">y\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({ x: x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#FFAB70\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">f\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#FFAB70\"> x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> doSomethingAsync\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">someOperation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">( \u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ..\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Keep in mind that arrow function expressions are \u003Cstrong>syntactically anonymous\u003C/strong>, meaning the syntax doesn’t provide a way to provide a direct name identifier for the function. The function expression may get an inferred name, but only if it’s one of the assignment forms, not in the (more common!) form of being passed as a function call argument (as in the last line of the snippet).\u003C/p>\n\u003Cp>Since I don’t think anonymous functions are a good idea to use frequently in your programs, I’m not a fan of using the \u003Ccode>=>\u003C/code> arrow function form. This kind of function actually has a specific purpose (i.e., handling the \u003Ccode>this\u003C/code> keyword lexically), but that doesn’t mean we should use it for every function we write. Use the most appropriate tool for each job.\u003C/p>\n\u003Cp>Functions can also be specified in class definitions and object literal definitions. They’re typically referred to as “methods” when in these forms, though in JS this term doesn’t have much observable difference over “function”:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> SomethingKindaGreat\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // class methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    coolMethod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }   \u003C/span>\u003Cspan style=\"color:#6A737D\">// no commas!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    boringMethod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> EntirelyDifferent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // object methods\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    coolMethod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. },   \u003C/span>\u003Cspan style=\"color:#6A737D\">// commas!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    boringMethod\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // (anonymous) function expression property\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    oldSchool\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() { .. }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Phew! That’s a lot of different ways to define functions.\u003C/p>\n\u003Cp>There’s no simple shortcut path here; you just have to build familiarity with all the function forms so you can recognize them in existing code and use them appropriately in the code you write. Study them closely and practice!\u003C/p>\n\u003Ch2 id=\"coercive-conditional-comparison\">Coercive Conditional Comparison\u003C/h2>\n\u003Cp>Yes, that section name is quite a mouthful. But what are we talking about? We’re talking about conditional expressions needing to perform coercion-oriented comparisons to make their decisions.\u003C/p>\n\u003Cp>\u003Ccode>if\u003C/code> and \u003Ccode>? :\u003C/code>-ternary statements, as well as the test clauses in \u003Ccode>while\u003C/code> and \u003Ccode>for\u003C/code> loops, all perform an implicit value comparison. But what sort? Is it “strict” or “coercive”? Both, actually.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run, once!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You might think of these \u003Ccode>(x)\u003C/code> conditional expressions like this:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run, once!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In this specific case — the value of \u003Ccode>x\u003C/code> being \u003Ccode>1\u003C/code> — that mental model works, but it’s not accurate more broadly. Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (x \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // won't run :(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Oops. So what is the \u003Ccode>if\u003C/code> statement actually doing? This is the more accurate mental model:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#B392F0\">Boolean\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x) \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// which is the same as:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#B392F0\">Boolean\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since the \u003Ccode>Boolean(..)\u003C/code> function always returns a value of type boolean, the \u003Ccode>==\u003C/code> vs \u003Ccode>===\u003C/code> in this snippet is irrelevant; they’ll both do the same thing. But the important part is to see that before the comparison, a coercion occurs, from whatever type \u003Ccode>x\u003C/code> currently is, to boolean.\u003C/p>\n\u003Cp>You just can’t get away from coercions in JS comparisons. Buckle down and learn them.\u003C/p>\n\u003Ch2 id=\"prototypal-classes\">Prototypal “Classes”\u003C/h2>\n\u003Cp>In Chapter 3, we introduced prototypes and showed how we can link objects through a prototype chain.\u003C/p>\n\u003Cp>Another way of wiring up such prototype linkages served as the (honestly, ugly) predecessor to the elegance of the ES6 \u003Ccode>class\u003C/code> system (see Chapter 2, “Classes”), and is referred to as prototypal classes.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">TIP:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">While this style of code is quite uncommon in JS these days, it’s still perplexingly rather common to be asked about it in job interviews!\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Let’s first recall the \u003Ccode>Object.create(..)\u003C/code> style of coding:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Classroom \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    welcome\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Welcome, students!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mathClass \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Classroom);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathClass.\u003C/span>\u003Cspan style=\"color:#B392F0\">welcome\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Welcome, students!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, a \u003Ccode>mathClass\u003C/code> object is linked via its prototype to a \u003Ccode>Classroom\u003C/code> object. Through this linkage, the function call \u003Ccode>mathClass.welcome()\u003C/code> is delegated to the method defined on \u003Ccode>Classroom\u003C/code>.\u003C/p>\n\u003Cp>The prototypal class pattern would have labeled this delegation behavior “inheritance,” and alternatively have defined it (with the same behavior) as:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">Classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">prototype\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">welcome\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Welcome, students!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mathClass \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathClass.\u003C/span>\u003Cspan style=\"color:#B392F0\">welcome\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Welcome, students!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>All functions by default reference an empty object at a property named \u003Ccode>prototype\u003C/code>. Despite the confusing naming, this is \u003Cstrong>not\u003C/strong> the function’s \u003Cem>prototype\u003C/em> (where the function is prototype linked to), but rather the prototype object to \u003Cem>link to\u003C/em> when other objects are created by calling the function with \u003Ccode>new\u003C/code>.\u003C/p>\n\u003Cp>We add a \u003Ccode>welcome\u003C/code> property on that empty object (called \u003Ccode>Classroom.prototype\u003C/code>), pointing at the \u003Ccode>hello()\u003C/code> function.\u003C/p>\n\u003Cp>Then \u003Ccode>new Classroom()\u003C/code> creates a new object (assigned to \u003Ccode>mathClass\u003C/code>), and prototype links it to the existing \u003Ccode>Classroom.prototype\u003C/code> object.\u003C/p>\n\u003Cp>Though \u003Ccode>mathClass\u003C/code> does not have a \u003Ccode>welcome()\u003C/code> property/function, it successfully delegates to the function \u003Ccode>Classroom.prototype.welcome()\u003C/code>.\u003C/p>\n\u003Cp>This “prototypal class” pattern is now strongly discouraged, in favor of using ES6’s \u003Ccode>class\u003C/code> mechanism:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    welcome\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Welcome, students!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mathClass \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathClass.\u003C/span>\u003Cspan style=\"color:#B392F0\">welcome\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Welcome, students!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Under the covers, the same prototype linkage is wired up, but this \u003Ccode>class\u003C/code> syntax fits the class-oriented design pattern much more cleanly than “prototypal classes”.\u003C/p>",{"headings":1336,"localImagePaths":1353,"remoteImagePaths":1354,"frontmatter":1355,"imagePaths":1358},[1337,1338,1341,1344,1347,1350],{"depth":815,"slug":1299,"text":1300},{"depth":815,"slug":1339,"text":1340},"appendix-a-exploring-further","Appendix A: Exploring Further",{"depth":76,"slug":1342,"text":1343},"values-vs-references","Values vs. References",{"depth":76,"slug":1345,"text":1346},"so-many-function-forms","So Many Function Forms",{"depth":76,"slug":1348,"text":1349},"coercive-conditional-comparison","Coercive Conditional Comparison",{"depth":76,"slug":1351,"text":1352},"prototypal-classes","Prototypal “Classes”",[],[],{"rutas":1356,"title":1327,"description":16,"pubDate":151,"updatedDate":151,"link":1357,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/apA",[],"libros/you-dont-know-js-yet/get-started/apA.md","seguridad-web/buenas-practicas-apis/salida",{"id":1360,"data":1362,"body":1366,"filePath":1367,"digest":1368,"rendered":1369,"legacyId":1400},{"rutas":1363,"title":936,"description":16,"lang":17,"dir":18,"pubDate":1364,"updatedDate":1365},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## X-Content-Type-Options: nosniff\r\n> Enviar la cabecera `X-Content-Type-Options: nosniff`.\r\n\r\nDebes enviar la cabecera `X-Content-Type-Options: nosniff` para prevenir ataques de sniffing de tipo MIME en tu aplicación web. Esta cabecera indica al navegador que no anule el tipo de contenido de la respuesta aunque no sea el esperado. Por ejemplo, si un atacante consigue subir un archivo HTML con una extensión camuflada como .jpg, el servidor puede seguir enviando la cabecera de tipo de contenido correcta para el archivo HTML. Sin embargo, algunos navegadores pueden ignorar esta cabecera e intentar \"husmear\" el tipo de contenido basándose en el contenido real del archivo, lo que puede provocar un ataque de secuencias de comandos en sitios cruzados (XSS).\r\n\r\nAl enviar la cabecera `X-Content-Type-Options: nosniff`, le indica al navegador que confíe siempre en el tipo de contenido proporcionado y no intente husmear el tipo de contenido. Esto ayuda a mitigar el riesgo de que los atacantes se aprovechen de la falta de coincidencia del tipo de contenido para enviar contenido malicioso a usuarios desprevenidos.\r\n\r\n## X-Frame-Options: Deny\r\n> Envía la cabecera `X-Frame-Options: deny`.\r\n\r\nLa cabecera `X-Frame-Options` impide que la página se muestre en un iframe, que suele utilizarse en ataques de clickjacking. Al establecer el valor de esta cabecera como `deny`, le está indicando al navegador que no muestre la página en ningún iframe. Esto ayuda a evitar que la página se incruste en el sitio web de un atacante y reduce el riesgo de ataques de clickjacking.\r\n\r\n## Política de seguridad de contenidos\r\n> Enviar la cabecera `Content-Security-Policy: default-src 'none'`.\r\n\r\nEnviar la cabecera `Content-Security-Policy: default-src 'none'` es una buena práctica de seguridad que ayuda a prevenir ataques de cross-site scripting (XSS). Esta cabecera indica al navegador que no permita la carga de recursos de fuentes externas, como scripts, hojas de estilo o imágenes. Sólo permite recursos que estén explícitamente en la lista blanca del encabezado CSP, como scripts u hojas de estilo alojados en su propio dominio. Esto puede ayudar a evitar que actores maliciosos inyecten código en sus páginas web mediante ataques XSS, ya que el navegador no ejecutará ningún script ni cargará ningún recurso que no esté explícitamente permitido por la política CSP.\r\n\r\n## Eliminar huellas digitales\r\n> Elimine las cabeceras fingerprinting (es decir, x-powered-by, etc.) de la solicitud HTTP.\r\n\r\nLas cabeceras fingerprinting pueden utilizarse para identificar el servidor web y su versión. Esta información puede ser utilizada por atacantes para identificar vulnerabilidades en el servidor web y explotarlas.\r\n\r\n## Forzar Content-Type\r\n> Forzar siempre que la cabecera `Content-Type` se establezca en el tipo MIME relevante.\r\n\r\nForzar el Content-Type para la seguridad de la API es importante porque garantiza que el cliente y el servidor se comunican en un formato mutuamente acordado para los datos que se transmiten. Esto puede prevenir ataques como la suplantación o inyección de contenido, donde un atacante intenta engañar al servidor para que procese contenido malicioso simulando que es de un Content-Type diferente. Al forzar el Content-Type a un formato específico, el servidor puede validar que los datos que está recibiendo son legítimos y seguros de procesar. Además, forzar el Content-Type puede ayudar a prevenir ciertos tipos de errores de análisis que podrían ser explotados por los atacantes.\r\n\r\n## Evite devolver datos sensibles\r\n> Devuelva sólo los datos necesarios para que el cliente funcione.\r\n\r\nDevolver sólo los datos necesarios para que el cliente funcione es una práctica recomendada importante para la seguridad de la API. Esto se debe a que limitar la cantidad de datos que se devuelven reduce la cantidad de información sensible que queda expuesta. Al devolver sólo los datos necesarios, puede ayudar a prevenir vulnerabilidades de seguridad como la fuga de datos, ataques de inyección y otros tipos de ataques que se basan en exponer demasiada información. Además, reducir la cantidad de datos devueltos puede mejorar el rendimiento de su API al reducir la cantidad de datos que deben procesarse y transmitirse.\r\n\r\n## Código de respuesta adecuado\r\n> Devuelve el código de estado apropiado según la operación completada. p.ej.\r\n> \r\n> * 200 OK\r\n> * 400 Solicitud errónea\r\n> * 401 No autorizado\r\n> * 405 Método no permitido\r\n> * ...etc.\r\n\r\nDevolver el código de estado apropiado según la operación completada es importante para la seguridad de la API porque permite al cliente entender el resultado de su petición y tomar las acciones apropiadas. Por ejemplo, si el servidor devuelve un código de estado 401 No Autorizado, el cliente sabe que sus credenciales de autenticación son incorrectas y puede pedir al usuario que vuelva a introducir sus datos de acceso. Por otro lado, si el servidor devuelve un código de estado 200 OK aunque la solicitud haya fallado, el cliente puede no darse cuenta de que había un problema y podría ejecutar acciones maliciosas o mostrar datos incorrectos. Proporcionar códigos de estado precisos puede ayudar a prevenir vulnerabilidades de seguridad y mejorar la fiabilidad y usabilidad general de la API.","src/content/blog/seguridad-web/buenas-practicas-apis/salida.md","c1cd777db3900bec",{"html":1370,"metadata":1371},"\u003Ch2 id=\"x-content-type-options-nosniff\">X-Content-Type-Options: nosniff\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Enviar la cabecera \u003Ccode>X-Content-Type-Options: nosniff\u003C/code>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Debes enviar la cabecera \u003Ccode>X-Content-Type-Options: nosniff\u003C/code> para prevenir ataques de sniffing de tipo MIME en tu aplicación web. Esta cabecera indica al navegador que no anule el tipo de contenido de la respuesta aunque no sea el esperado. Por ejemplo, si un atacante consigue subir un archivo HTML con una extensión camuflada como .jpg, el servidor puede seguir enviando la cabecera de tipo de contenido correcta para el archivo HTML. Sin embargo, algunos navegadores pueden ignorar esta cabecera e intentar “husmear” el tipo de contenido basándose en el contenido real del archivo, lo que puede provocar un ataque de secuencias de comandos en sitios cruzados (XSS).\u003C/p>\n\u003Cp>Al enviar la cabecera \u003Ccode>X-Content-Type-Options: nosniff\u003C/code>, le indica al navegador que confíe siempre en el tipo de contenido proporcionado y no intente husmear el tipo de contenido. Esto ayuda a mitigar el riesgo de que los atacantes se aprovechen de la falta de coincidencia del tipo de contenido para enviar contenido malicioso a usuarios desprevenidos.\u003C/p>\n\u003Ch2 id=\"x-frame-options-deny\">X-Frame-Options: Deny\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Envía la cabecera \u003Ccode>X-Frame-Options: deny\u003C/code>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>La cabecera \u003Ccode>X-Frame-Options\u003C/code> impide que la página se muestre en un iframe, que suele utilizarse en ataques de clickjacking. Al establecer el valor de esta cabecera como \u003Ccode>deny\u003C/code>, le está indicando al navegador que no muestre la página en ningún iframe. Esto ayuda a evitar que la página se incruste en el sitio web de un atacante y reduce el riesgo de ataques de clickjacking.\u003C/p>\n\u003Ch2 id=\"política-de-seguridad-de-contenidos\">Política de seguridad de contenidos\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Enviar la cabecera \u003Ccode>Content-Security-Policy: default-src 'none'\u003C/code>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Enviar la cabecera \u003Ccode>Content-Security-Policy: default-src 'none'\u003C/code> es una buena práctica de seguridad que ayuda a prevenir ataques de cross-site scripting (XSS). Esta cabecera indica al navegador que no permita la carga de recursos de fuentes externas, como scripts, hojas de estilo o imágenes. Sólo permite recursos que estén explícitamente en la lista blanca del encabezado CSP, como scripts u hojas de estilo alojados en su propio dominio. Esto puede ayudar a evitar que actores maliciosos inyecten código en sus páginas web mediante ataques XSS, ya que el navegador no ejecutará ningún script ni cargará ningún recurso que no esté explícitamente permitido por la política CSP.\u003C/p>\n\u003Ch2 id=\"eliminar-huellas-digitales\">Eliminar huellas digitales\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Elimine las cabeceras fingerprinting (es decir, x-powered-by, etc.) de la solicitud HTTP.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Las cabeceras fingerprinting pueden utilizarse para identificar el servidor web y su versión. Esta información puede ser utilizada por atacantes para identificar vulnerabilidades en el servidor web y explotarlas.\u003C/p>\n\u003Ch2 id=\"forzar-content-type\">Forzar Content-Type\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Forzar siempre que la cabecera \u003Ccode>Content-Type\u003C/code> se establezca en el tipo MIME relevante.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Forzar el Content-Type para la seguridad de la API es importante porque garantiza que el cliente y el servidor se comunican en un formato mutuamente acordado para los datos que se transmiten. Esto puede prevenir ataques como la suplantación o inyección de contenido, donde un atacante intenta engañar al servidor para que procese contenido malicioso simulando que es de un Content-Type diferente. Al forzar el Content-Type a un formato específico, el servidor puede validar que los datos que está recibiendo son legítimos y seguros de procesar. Además, forzar el Content-Type puede ayudar a prevenir ciertos tipos de errores de análisis que podrían ser explotados por los atacantes.\u003C/p>\n\u003Ch2 id=\"evite-devolver-datos-sensibles\">Evite devolver datos sensibles\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Devuelva sólo los datos necesarios para que el cliente funcione.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Devolver sólo los datos necesarios para que el cliente funcione es una práctica recomendada importante para la seguridad de la API. Esto se debe a que limitar la cantidad de datos que se devuelven reduce la cantidad de información sensible que queda expuesta. Al devolver sólo los datos necesarios, puede ayudar a prevenir vulnerabilidades de seguridad como la fuga de datos, ataques de inyección y otros tipos de ataques que se basan en exponer demasiada información. Además, reducir la cantidad de datos devueltos puede mejorar el rendimiento de su API al reducir la cantidad de datos que deben procesarse y transmitirse.\u003C/p>\n\u003Ch2 id=\"código-de-respuesta-adecuado\">Código de respuesta adecuado\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Devuelve el código de estado apropiado según la operación completada. p.ej.\u003C/p>\n\u003Cul>\n\u003Cli>200 OK\u003C/li>\n\u003Cli>400 Solicitud errónea\u003C/li>\n\u003Cli>401 No autorizado\u003C/li>\n\u003Cli>405 Método no permitido\u003C/li>\n\u003Cli>…etc.\u003C/li>\n\u003C/ul>\n\u003C/blockquote>\n\u003Cp>Devolver el código de estado apropiado según la operación completada es importante para la seguridad de la API porque permite al cliente entender el resultado de su petición y tomar las acciones apropiadas. Por ejemplo, si el servidor devuelve un código de estado 401 No Autorizado, el cliente sabe que sus credenciales de autenticación son incorrectas y puede pedir al usuario que vuelva a introducir sus datos de acceso. Por otro lado, si el servidor devuelve un código de estado 200 OK aunque la solicitud haya fallado, el cliente puede no darse cuenta de que había un problema y podría ejecutar acciones maliciosas o mostrar datos incorrectos. Proporcionar códigos de estado precisos puede ayudar a prevenir vulnerabilidades de seguridad y mejorar la fiabilidad y usabilidad general de la API.\u003C/p>",{"headings":1372,"localImagePaths":1394,"remoteImagePaths":1395,"frontmatter":1396,"imagePaths":1399},[1373,1376,1379,1382,1385,1388,1391],{"depth":76,"slug":1374,"text":1375},"x-content-type-options-nosniff","X-Content-Type-Options: nosniff",{"depth":76,"slug":1377,"text":1378},"x-frame-options-deny","X-Frame-Options: Deny",{"depth":76,"slug":1380,"text":1381},"política-de-seguridad-de-contenidos","Política de seguridad de contenidos",{"depth":76,"slug":1383,"text":1384},"eliminar-huellas-digitales","Eliminar huellas digitales",{"depth":76,"slug":1386,"text":1387},"forzar-content-type","Forzar Content-Type",{"depth":76,"slug":1389,"text":1390},"evite-devolver-datos-sensibles","Evite devolver datos sensibles",{"depth":76,"slug":1392,"text":1393},"código-de-respuesta-adecuado","Código de respuesta adecuado",[],[],{"rutas":1397,"title":936,"description":16,"pubDate":151,"updatedDate":151,"link":1398,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/salida",[],"seguridad-web/buenas-practicas-apis/salida.md","seguridad-web/buenas-practicas-apis/processing",{"id":1401,"data":1403,"body":1407,"filePath":1408,"digest":1409,"rendered":1410,"legacyId":1447},{"rutas":1404,"title":930,"description":16,"lang":17,"dir":18,"pubDate":1405,"updatedDate":1406},[15],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Autenticación de endpoints\r\n> Compruebe si todos los endpoints protegidos están detrás de la autenticación para evitar procesos de autenticación rotos\r\n\r\nAl identificar y corregir los flujos de trabajo de autenticación rotos, la API puede evitar ataques como los de fuerza bruta, relleno de credenciales, secuestro de sesiones y otros ataques relacionados con la autenticación. Esto puede ayudar a garantizar la seguridad del sistema y la protección de los datos sensibles.\r\n\r\n## Evitar el ID personal en las URL\r\n> Evite el ID personal del usuario en las URL de los recursos, por ejemplo, users/242/orders.\r\n\r\nDebe evitarse el ID de recurso del propio usuario. Utilice /yo/pedidos en lugar de /usuario/654321/pedidos. Esto ayudará a evitar el riesgo de exponer el ID personal del usuario que puede ser utilizado para otros ataques.\r\n\r\n## Elija UUID\r\n> Utilice UUID en lugar de números enteros autoincrementados. Los UUID son únicos a nivel mundial y no son secuenciales. También son más difíciles de adivinar que los números enteros secuenciales.\r\n\r\nEl uso de UUID en lugar de números enteros autoincrementados impide a los atacantes adivinar o iterar a través de los ID de los recursos. Los UUID se generan aleatoriamente y contienen 128 bits de entropía, lo que hace prácticamente imposible que los atacantes los adivinen. En cambio, los ID autoincrementables pueden predecirse o iterarse fácilmente, lo que permite a los atacantes acceder o manipular recursos a los que no deberían tener acceso. Además, el uso de UUID puede ayudar a evitar la divulgación de información al ocultar el orden de creación o acceso a los recursos.\r\n\r\n## Desactivar el análisis sintáctico de entidades en XML\r\n> Deshabilite el análisis sintáctico de entidades si está analizando XML para evitar ataques XXE.\r\n\r\nSi el analizador XML es vulnerable a ataques XXE, el atacante puede utilizar esta vulnerabilidad para leer archivos en el servidor, realizar ataques SSRF, y más. Esto puede llevar a la divulgación de información sensible, denegación de servicio y otros ataques.\r\n\r\nEl ataque XXE (XML External Entity) es un tipo de ataque dirigido a aplicaciones que analizan la entrada XML de fuentes no fiables. En este ataque, un atacante inyecta una carga maliciosa XML. Esta carga útil puede contener entidades externas que el atacante puede utilizar para recuperar datos confidenciales, ejecutar código remoto o lanzar ataques de denegación de servicio. Los ataques XXE pueden evitarse desactivando el procesamiento de entidades externas o validando y desinfectando la entrada XML antes de analizarla.\r\n\r\n## Desactivar la expansión de entidades\r\n> Deshabilite la expansión de entidades si utiliza XML, YML o cualquier otro lenguaje\r\n\r\nDeshabilitar la expansión de entidades es importante cuando se usa XML, YAML o cualquier otro lenguaje que permita entidades porque ayuda a prevenir ataques de inyección de etiquetas XXE (XML External Entity) o YAML. En estos ataques, el atacante normalmente inyecta algún tipo de código personalizado en la entrada para realizar ataques contra la aplicación.... Deshabilitando la expansión de entidades, la entrada no puede ser manipulada de esta manera, reduciendo el riesgo de tales ataques.\r\n\r\n## Usar CDN para subir archivos\r\n> Utilizar CDN para la carga de archivos\r\n\r\nEl uso de una red de distribución de contenidos (CDN) para la carga de archivos puede hacer que una API sea más segura al descargar el tráfico de carga de archivos del servidor API y reducir el riesgo de ataques DDoS.\r\n\r\n## Evitar el bloqueo HTTP\r\n> Evita el bloqueo HTTP si estás utilizando una gran cantidad de datos moviendo las operaciones HTTP pesadas a trabajos en segundo plano o tareas asíncronas.\r\n\r\nEl bloqueo HTTP es un problema común en las aplicaciones web. Ocurre cuando la aplicación es incapaz de procesar las peticiones HTTP entrantes debido a un gran número de peticiones o una gran cantidad de datos. Esto puede provocar que la aplicación deje de responder y que el servidor se bloquee. Esto puede evitarse moviendo las operaciones HTTP pesadas a trabajos en segundo plano o tareas asíncronas. Puedes utilizar una cola de mensajes para poner en cola las peticiones y procesarlas en segundo plano. Esto permitirá a la aplicación continuar procesando otras peticiones mientras las operaciones pesadas se procesan en segundo plano.\r\n\r\n## Desactivar el modo de depuración\r\n> Asegúrese de desactivar el modo de depuración en producción\r\n\r\nEl modo de depuración es una característica que se utiliza para ayudar a los desarrolladores a depurar su código. No debe utilizarse en producción. Puede exponer información sensible sobre la aplicación y el servidor en el que se ejecuta. Asegúrese de desactivar el modo de depuración en producción.\r\n\r\n## Pilas no ejecutables\r\n> Utilice pilas no ejecutables para evitar que los atacantes ejecuten código en su servidor.\r\n\r\nUna pila normalmente se refiere a la pila de llamadas o pila de ejecución. Es una estructura de datos utilizada por el programa informático para gestionar y realizar un seguimiento de la secuencia de llamadas a funciones, variables locales y otros datos relacionados durante la ejecución del programa.\r\n\r\nUna pila no ejecutable es un mecanismo de seguridad que evita que se ejecute código malicioso impidiendo que la memoria de la pila se ejecute como código. Esto ayuda a prevenir ataques como los de desbordamiento de búfer, en los que un atacante intenta sobrescribir la dirección de retorno en la pila para redirigir el programa a la ejecución de código malicioso. Al utilizar pilas no ejecutables, el programa puede mantener la pila separada del código ejecutable y ayudar a prevenir este tipo de ataques.","src/content/blog/seguridad-web/buenas-practicas-apis/processing.md","69852b0da4e79ed4",{"html":1411,"metadata":1412},"\u003Ch2 id=\"autenticación-de-endpoints\">Autenticación de endpoints\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Compruebe si todos los endpoints protegidos están detrás de la autenticación para evitar procesos de autenticación rotos\u003C/p>\n\u003C/blockquote>\n\u003Cp>Al identificar y corregir los flujos de trabajo de autenticación rotos, la API puede evitar ataques como los de fuerza bruta, relleno de credenciales, secuestro de sesiones y otros ataques relacionados con la autenticación. Esto puede ayudar a garantizar la seguridad del sistema y la protección de los datos sensibles.\u003C/p>\n\u003Ch2 id=\"evitar-el-id-personal-en-las-url\">Evitar el ID personal en las URL\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Evite el ID personal del usuario en las URL de los recursos, por ejemplo, users/242/orders.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Debe evitarse el ID de recurso del propio usuario. Utilice /yo/pedidos en lugar de /usuario/654321/pedidos. Esto ayudará a evitar el riesgo de exponer el ID personal del usuario que puede ser utilizado para otros ataques.\u003C/p>\n\u003Ch2 id=\"elija-uuid\">Elija UUID\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice UUID en lugar de números enteros autoincrementados. Los UUID son únicos a nivel mundial y no son secuenciales. También son más difíciles de adivinar que los números enteros secuenciales.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El uso de UUID en lugar de números enteros autoincrementados impide a los atacantes adivinar o iterar a través de los ID de los recursos. Los UUID se generan aleatoriamente y contienen 128 bits de entropía, lo que hace prácticamente imposible que los atacantes los adivinen. En cambio, los ID autoincrementables pueden predecirse o iterarse fácilmente, lo que permite a los atacantes acceder o manipular recursos a los que no deberían tener acceso. Además, el uso de UUID puede ayudar a evitar la divulgación de información al ocultar el orden de creación o acceso a los recursos.\u003C/p>\n\u003Ch2 id=\"desactivar-el-análisis-sintáctico-de-entidades-en-xml\">Desactivar el análisis sintáctico de entidades en XML\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Deshabilite el análisis sintáctico de entidades si está analizando XML para evitar ataques XXE.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Si el analizador XML es vulnerable a ataques XXE, el atacante puede utilizar esta vulnerabilidad para leer archivos en el servidor, realizar ataques SSRF, y más. Esto puede llevar a la divulgación de información sensible, denegación de servicio y otros ataques.\u003C/p>\n\u003Cp>El ataque XXE (XML External Entity) es un tipo de ataque dirigido a aplicaciones que analizan la entrada XML de fuentes no fiables. En este ataque, un atacante inyecta una carga maliciosa XML. Esta carga útil puede contener entidades externas que el atacante puede utilizar para recuperar datos confidenciales, ejecutar código remoto o lanzar ataques de denegación de servicio. Los ataques XXE pueden evitarse desactivando el procesamiento de entidades externas o validando y desinfectando la entrada XML antes de analizarla.\u003C/p>\n\u003Ch2 id=\"desactivar-la-expansión-de-entidades\">Desactivar la expansión de entidades\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Deshabilite la expansión de entidades si utiliza XML, YML o cualquier otro lenguaje\u003C/p>\n\u003C/blockquote>\n\u003Cp>Deshabilitar la expansión de entidades es importante cuando se usa XML, YAML o cualquier otro lenguaje que permita entidades porque ayuda a prevenir ataques de inyección de etiquetas XXE (XML External Entity) o YAML. En estos ataques, el atacante normalmente inyecta algún tipo de código personalizado en la entrada para realizar ataques contra la aplicación… Deshabilitando la expansión de entidades, la entrada no puede ser manipulada de esta manera, reduciendo el riesgo de tales ataques.\u003C/p>\n\u003Ch2 id=\"usar-cdn-para-subir-archivos\">Usar CDN para subir archivos\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilizar CDN para la carga de archivos\u003C/p>\n\u003C/blockquote>\n\u003Cp>El uso de una red de distribución de contenidos (CDN) para la carga de archivos puede hacer que una API sea más segura al descargar el tráfico de carga de archivos del servidor API y reducir el riesgo de ataques DDoS.\u003C/p>\n\u003Ch2 id=\"evitar-el-bloqueo-http\">Evitar el bloqueo HTTP\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Evita el bloqueo HTTP si estás utilizando una gran cantidad de datos moviendo las operaciones HTTP pesadas a trabajos en segundo plano o tareas asíncronas.\u003C/p>\n\u003C/blockquote>\n\u003Cp>El bloqueo HTTP es un problema común en las aplicaciones web. Ocurre cuando la aplicación es incapaz de procesar las peticiones HTTP entrantes debido a un gran número de peticiones o una gran cantidad de datos. Esto puede provocar que la aplicación deje de responder y que el servidor se bloquee. Esto puede evitarse moviendo las operaciones HTTP pesadas a trabajos en segundo plano o tareas asíncronas. Puedes utilizar una cola de mensajes para poner en cola las peticiones y procesarlas en segundo plano. Esto permitirá a la aplicación continuar procesando otras peticiones mientras las operaciones pesadas se procesan en segundo plano.\u003C/p>\n\u003Ch2 id=\"desactivar-el-modo-de-depuración\">Desactivar el modo de depuración\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Asegúrese de desactivar el modo de depuración en producción\u003C/p>\n\u003C/blockquote>\n\u003Cp>El modo de depuración es una característica que se utiliza para ayudar a los desarrolladores a depurar su código. No debe utilizarse en producción. Puede exponer información sensible sobre la aplicación y el servidor en el que se ejecuta. Asegúrese de desactivar el modo de depuración en producción.\u003C/p>\n\u003Ch2 id=\"pilas-no-ejecutables\">Pilas no ejecutables\u003C/h2>\n\u003Cblockquote>\n\u003Cp>Utilice pilas no ejecutables para evitar que los atacantes ejecuten código en su servidor.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Una pila normalmente se refiere a la pila de llamadas o pila de ejecución. Es una estructura de datos utilizada por el programa informático para gestionar y realizar un seguimiento de la secuencia de llamadas a funciones, variables locales y otros datos relacionados durante la ejecución del programa.\u003C/p>\n\u003Cp>Una pila no ejecutable es un mecanismo de seguridad que evita que se ejecute código malicioso impidiendo que la memoria de la pila se ejecute como código. Esto ayuda a prevenir ataques como los de desbordamiento de búfer, en los que un atacante intenta sobrescribir la dirección de retorno en la pila para redirigir el programa a la ejecución de código malicioso. Al utilizar pilas no ejecutables, el programa puede mantener la pila separada del código ejecutable y ayudar a prevenir este tipo de ataques.\u003C/p>",{"headings":1413,"localImagePaths":1441,"remoteImagePaths":1442,"frontmatter":1443,"imagePaths":1446},[1414,1417,1420,1423,1426,1429,1432,1435,1438],{"depth":76,"slug":1415,"text":1416},"autenticación-de-endpoints","Autenticación de endpoints",{"depth":76,"slug":1418,"text":1419},"evitar-el-id-personal-en-las-url","Evitar el ID personal en las URL",{"depth":76,"slug":1421,"text":1422},"elija-uuid","Elija UUID",{"depth":76,"slug":1424,"text":1425},"desactivar-el-análisis-sintáctico-de-entidades-en-xml","Desactivar el análisis sintáctico de entidades en XML",{"depth":76,"slug":1427,"text":1428},"desactivar-la-expansión-de-entidades","Desactivar la expansión de entidades",{"depth":76,"slug":1430,"text":1431},"usar-cdn-para-subir-archivos","Usar CDN para subir archivos",{"depth":76,"slug":1433,"text":1434},"evitar-el-bloqueo-http","Evitar el bloqueo HTTP",{"depth":76,"slug":1436,"text":1437},"desactivar-el-modo-de-depuración","Desactivar el modo de depuración",{"depth":76,"slug":1439,"text":1440},"pilas-no-ejecutables","Pilas no ejecutables",[],[],{"rutas":1444,"title":930,"description":16,"pubDate":151,"updatedDate":151,"link":1445,"lastModified":152},[15],"/blog/Seguridad_Web/seguridad-web/buenas-practicas-apis/processing",[],"seguridad-web/buenas-practicas-apis/processing.md","libros/you-dont-know-js-yet/get-started/ch1",{"id":1448,"data":1450,"body":1455,"filePath":1456,"digest":1457,"rendered":1458,"legacyId":1511},{"rutas":1451,"title":1452,"description":16,"lang":17,"dir":18,"pubDate":1453,"updatedDate":1454},[804],"Capítulo 1: ¿Qué Es JavaScript?",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"No conoces JS, todavía. Yo tampoco, al menos no completamente. Ninguno de nosotros lo hace. Pero todos podemos empezar a conocer mejor a JS.\r\n\r\nEn este primer capítulo del primer libro de la serie *You Don't Know JS Yet* (YDKJSY), dedicaremos tiempo a construir una base para avanzar. Necesitamos comenzar cubriendo una variedad de detalles importantes de mantenimiento, desmitificando algunos mitos y malentendidos sobre lo que realmente es el lenguaje (¡y lo que no es!).\r\n\r\nEsta es una perspicacia valiosa sobre la identidad y el proceso de cómo está organizado y mantenido JS; todos los desarrolladores de JS deberían entenderlo. Si quieres conocer a JS, así es como *comenzar* dando los primeros pasos en ese viaje.\r\n\r\n## Sobre Este Libro\r\n\r\nEnfatizo la palabra viaje porque *conocer JS* no es un destino, es una dirección. No importa cuánto tiempo pases con el lenguaje, siempre podrás encontrar algo más que aprender y entender un poco mejor. Así que no veas este libro como algo para apresurarte y lograr un logro rápido. En cambio, la paciencia y la persistencia son lo mejor mientras das estos primeros pasos.\r\n\r\nDespués de este capítulo introductorio, el resto del libro presenta un mapa de alto nivel de lo que encontrarás mientras profundizas y estudias JS con los libros de YDKJSY.\r\n\r\nEn particular, el Capítulo 4 identifica tres pilares principales alrededor de los cuales está organizado el lenguaje JS: scope/closures (alcance/cierres), prototypes/objects (prototipos/objetos) y types/coercion (tipos/coerción). JS es un lenguaje amplio y sofisticado, con muchas características y capacidades. Pero todo JS se basa en estos tres pilares fundamentales.\r\n\r\nTen en cuenta que, aunque este libro tiene el título \"Get Started\", **no está destinado como un libro para principiantes o una introducción**. El trabajo principal de este libro es prepararte para estudiar JS en profundidad a lo largo del resto de la serie; está escrito asumiendo que ya tienes familiaridad con JS y al menos varios meses de experiencia antes de avanzar en YDKJSY. Entonces, para aprovechar al máximo *Get Started*, asegúrate de pasar mucho tiempo escribiendo código JS para acumular experiencia.\r\n\r\nIncluso si ya has escrito mucho JS antes, este libro no debe pasarse por alto o saltarse; tómate tu tiempo para procesar completamente el material aquí. **Un buen comienzo siempre depende de un primer paso sólido.**\r\n\r\n## ¿Qué significa ese nombre?\r\n\r\nEl nombre JavaScript es probablemente el nombre de un lenguaje de programación más malinterpretado y comprendido.\r\n\r\n¿Está este lenguaje relacionado con Java? ¿Es solo la forma de script para Java? ¿Solo sirve para escribir scripts y no programas reales?\r\n\r\nLa verdad es que el nombre JavaScript es un resultado de artimañas de marketing. Cuando Brendan Eich concibió por primera vez el lenguaje, lo denominó Mocha. Internamente en Netscape, se utilizaba la marca LiveScript. Pero cuando llegó el momento de nombrar públicamente el lenguaje, \"JavaScript\" ganó la votación.\r\n\r\n¿Por qué? Porque este lenguaje fue diseñado originalmente para atraer a una audiencia compuesta en su mayoría por programadores de Java, y porque la palabra \"script\" estaba de moda en ese momento para referirse a programas livianos. Estos \"scripts\" livianos serían los primeros en incrustarse en páginas en esta nueva cosa llamada web!\r\n\r\nEn otras palabras, JavaScript fue un truco de marketing para tratar de posicionar este lenguaje como una alternativa aceptable para escribir el más pesado y más conocido Java de la época. Podría haberse llamado igualmente \"WebJava\", por así decirlo.\r\n\r\nExisten algunas similitudes superficiales entre el código de JavaScript y el código de Java. Esas similitudes no provienen especialmente de un desarrollo compartido, sino porque ambos lenguajes apuntan a desarrolladores con expectativas de sintaxis asumidas de C (y en cierta medida, C++).\r\n\r\nPor ejemplo, usamos la `{` para comenzar un bloque de código y la `}` para finalizar ese bloque de código, al igual que en C/C++ y Java. También usamos el `;` para poner fin a una declaración.\r\n\r\nDe alguna manera, las relaciones legales van aún más allá de la sintaxis. Oracle (a través de Sun), la empresa que aún posee y opera Java, también posee la marca registrada oficial para el nombre \"JavaScript\" (a través de Netscape). Esta marca registrada casi nunca se hace valer y probablemente no podría hacerse en este momento.\r\n\r\nPor estas razones, algunos han sugerido que usemos JS en lugar de JavaScript. Esa es una abreviatura muy común, aunque no es un buen candidato para la marca oficial del lenguaje. De hecho, estos libros utilizan JS casi exclusivamente para referirse al lenguaje.\r\n\r\nPara distanciar aún más al lenguaje de la marca registrada propiedad de Oracle, el nombre oficial del lenguaje especificado por TC39 y formalizado por el organismo de normas ECMA es **ECMAScript**. Y de hecho, desde 2016, el nombre oficial del lenguaje también ha sido seguido por el año de revisión; al momento de escribir esto, eso es ECMAScript 2019, o de lo contrario abreviado como ES2019.\r\n\r\nEn otras palabras, el JavaScript/JS que se ejecuta en tu navegador o en Node.js, es *una* implementación del estándar ES2019.\r\n\r\n| NOTA: |\r\n| :--- |\r\n| No uses términos como \"JS6\" o \"ES8\" para referirte al lenguaje. Algunos lo hacen, pero esos términos solo sirven para perpetuar la confusión. \"ES20xx\" o simplemente \"JS\" son los términos a los que debes ceñirte. |\r\n\r\nYa sea que lo llames JavaScript, JS, ECMAScript o ES2019, ¡definitivamente no es una variante del lenguaje Java!\r\n\r\n> \"Java es a JavaScript como jamón es a hámster.\" --Jeremy Keith, 2009\r\n\r\n## Especificación del Lenguaje.\r\n\r\nMencioné TC39, el comité de dirección técnica que gestiona JS. Su tarea principal es gestionar la especificación oficial del lenguaje. Se reúnen regularmente para votar sobre cualquier cambio acordado, que luego envían a ECMA, la organización de estándares.\r\n\r\nLa sintaxis y el comportamiento de JS están definidos en la especificación ES.\r\n\r\nES2019 resulta ser la décima especificación/revisión numerada principal desde el inicio de JS en 1995, así que en la URL oficial de la especificación alojada por ECMA, encontrarás \"10.0\":\r\n\r\nhttps://www.ecma-international.org/ecma-262/10.0/\r\n\r\nEl comité TC39 está compuesto por entre 50 y aproximadamente 100 personas de una amplia variedad de empresas relacionadas con la web, como fabricantes de navegadores (Mozilla, Google, Apple) y fabricantes de dispositivos (Samsung, etc). Todos los miembros del comité son voluntarios, aunque muchos de ellos son empleados de estas empresas y pueden recibir compensación en parte por sus funciones en el comité.\r\n\r\nTC39 se reúne generalmente aproximadamente cada dos meses, por lo general durante unos tres días, para revisar el trabajo realizado por los miembros desde la última reunión, discutir problemas y votar sobre propuestas. Las ubicaciones de las reuniones rotan entre las empresas miembros dispuestas a ser anfitrionas.\r\n\r\nTodas las propuestas de TC39 avanzan a través de un proceso de cinco etapas, por supuesto, ya que somos programadores, ¡comienza en 0! Desde la Etapa 0 hasta la Etapa 4. Puedes obtener más información sobre el proceso de etapas aquí: https://tc39.es/process-document/\r\n\r\nLa Etapa 0 significa aproximadamente que alguien en TC39 piensa que es una idea valiosa y planea respaldarla y trabajar en ella. Eso significa que muchas ideas que los no miembros de TC39 \"proponen\", a través de medios informales como las redes sociales o publicaciones en blogs, son realmente \"pre-etapa 0\". Debes conseguir que un miembro de TC39 respalde una propuesta para que sea considerada oficialmente \"Etapa 0\".\r\n\r\nUna vez que una propuesta alcanza el estado de \"Etapa 4\", es elegible para ser incluida en la próxima revisión anual del lenguaje. Puede tomar desde varios meses hasta unos pocos años para que una propuesta avance a través de estas etapas.\r\n\r\nTodas las propuestas se gestionan de manera abierta, en el repositorio de Github de TC39: https://github.com/tc39/proposals\r\n\r\nCualquier persona, ya sea miembro de TC39 o no, puede participar en estas discusiones públicas y en los procesos para trabajar en las propuestas. Sin embargo, solo los miembros de TC39 pueden asistir a las reuniones y votar sobre las propuestas y los cambios. Por lo tanto, en efecto, la voz de un miembro de TC39 tiene mucho peso en la dirección que tomará JS.\r\n\r\nContrariamente a algún mito establecido y frustrantemente perpetuado, *no* hay múltiples versiones de JavaScript en circulación. Solo existe **un JS**, el estándar oficial mantenido por TC39 y ECMA.\r\n\r\nEn la década de los 2000s, cuando Microsoft mantenía una versión bifurcada e ingenierizada en reversa (y no del todo compatible) de JS llamada \"JScript\", realmente existían \"versiones múltiples\" de JS. Pero esos días han quedado atrás. Es obsoleto y inexacto hacer tales afirmaciones sobre JS hoy en día.\r\n\r\nTodos los principales navegadores y fabricantes de dispositivos se han comprometido a mantener sus implementaciones de JS compatibles con esta única especificación central. Por supuesto, los motores implementan características en diferentes momentos. Pero nunca debería ser el caso de que el motor V8 (el motor JS de Chrome) implemente una característica especificada de manera diferente o incompatible en comparación con el motor SpiderMonkey (el motor JS de Mozilla).\r\n\r\nEsto significa que puedes aprender un **solo JS** y confiar en ese mismo JS en todas partes.\r\n\r\n### La Web Lo Gobierna Todo (JS)\r\n\r\nMientras que la variedad de entornos que ejecutan JS está en constante expansión (desde navegadores, hasta servidores (Node.js), pasando por robots, bombillas, hasta...), el único entorno que domina JS es la web. En otras palabras, cómo se implementa JS para los navegadores web es, en la práctica, la única realidad que importa.\r\n\r\nEn su mayor parte, el JS definido en la especificación y el JS que se ejecuta en los motores de JS basados en el navegador es el mismo. Pero hay algunas diferencias que deben tenerse en cuenta.\r\n\r\nA veces, la especificación de JS dictará algún comportamiento nuevo o refinado, y aún así, eso no coincidirá exactamente con cómo funciona en los motores de JS basados en el navegador. Tal desajuste es histórico: los motores de JS han tenido más de 20 años de comportamientos observables en casos particulares de características en las que el contenido web ha llegado a depender. Como tal, a veces los motores de JS se negarán a conformarse a un cambio dictado por la especificación porque rompería ese contenido web.\r\n\r\nEn estos casos, a menudo TC39 retrocederá y simplemente elegirá ajustar la especificación a la realidad de la web. Por ejemplo, TC39 planeaba agregar un método `contains(..)` para Arrays, pero se descubrió que este nombre entraba en conflicto con antiguos frameworks de JS que aún se utilizan en algunos sitios, así que cambiaron el nombre a un `includes(..)` que no tenía conflictos. Lo mismo ocurrió con una cómica/trágica *crisis comunitaria* de JS llamada \"smooshgate\", donde el método planeado `flatten(..)` fue finalmente renombrado a `flat(..)`.\r\n\r\nPero ocasionalmente, TC39 decidirá que la especificación debe mantenerse firme en algún punto, aunque es poco probable que los motores de JS basados en el navegador se conformen.\r\n\r\n¿La solución? Apéndice B, \"Características Adicionales de ECMAScript para Navegadores Web\".[^specApB] La especificación de JS incluye este apéndice para detallar cualquier desajuste conocido entre la especificación oficial de JS y la realidad de JS en la web. En otras palabras, estas son excepciones permitidas *solo* para JS web; otros entornos de JS deben ceñirse al pie de la letra de la ley.\r\n\r\nLa Sección B.1 y B.2 cubren *adiciones* a JS (sintaxis y APIs) que JS web incluye, nuevamente por razones históricas, pero que TC39 no planea especificar formalmente en el núcleo de JS. Ejemplos incluyen literales octales con prefijo `0`, las utilidades globales `escape(..)` / `unescape(..)`, \"helpers\" de String como `anchor(..)` y `blink()`, y el método `compile(..)` de RegExp.\r\n\r\nLa Sección B.3 incluye algunos conflictos donde el código puede ejecutarse tanto en motores de JS web como en motores de JS no web, pero donde el comportamiento *podría* ser observadamente diferente, entregando resultados diferentes. La mayoría de los cambios enumerados involucran situaciones etiquetadas como errores tempranos cuando el código se ejecuta en strict mode.\r\n\r\nNo se encuentran *problemas* del Apéndice B muy a menudo, pero aún así es buena idea evitar estas construcciones para estar a salvo en el futuro. Siempre que sea posible, adhiérete a la especificación de JS y no confíes en comportamientos que solo son aplicables en ciertos entornos de motores de JS.\r\n\r\n### No Todo JS (Web)...\r\n\r\n¿Es este código un programa de JS?\r\n\r\n```js\r\nalert(\"Hello, JS!\");\r\n```\r\n\r\nDepende de cómo lo veas. La función `alert(..)` mostrada aquí no está incluida en la especificación de JS, pero sí *está* en todos los entornos web de JS. Sin embargo, no la encontrarás en el Apéndice B, ¿entonces qué pasa?\r\n\r\nVarios entornos de JS (como los motores de JS de los navegadores, Node.js, etc.) añaden APIs al ámbito global de tus programas de JS que te proporcionan capacidades específicas del entorno, como la capacidad de mostrar una ventana de alerta en el navegador del usuario.\r\n\r\nDe hecho, una amplia variedad de APIs que se parecen a JS, como `fetch(..)`, `getCurrentLocation(..)`, y `getUserMedia(..)`, son todas APIs web que parecen JS. En Node.js, podemos acceder a cientos de métodos de API de varios módulos integrados, como `fs.write(..)`.\r\n\r\nOtro ejemplo común es `console.log(..)` (¡y todos los demás métodos de `console.*` !). Estos no están especificados en JS, pero debido a su utilidad universal, son definidos por prácticamente todos los entornos de JS, según un consenso aproximado.\r\n\r\nEntonces, `alert(..)` y `console.log(..)` no están definidos por JS. Pero *parecen* JS. Son funciones y métodos de objetos y siguen las reglas de sintaxis de JS. Los comportamientos detrás de ellos son controlados por el entorno que ejecuta el motor de JS, pero en la superficie definitivamente tienen que cumplir con JS para poder jugar en el patio de juegos de JS.\r\n\r\nLa mayoría de las diferencias entre navegadores de las que la gente se queja con afirmaciones como \"¡JS es tan inconsistente!\" son en realidad debidas a diferencias en cómo funcionan esos comportamientos del entorno, no en cómo funciona el propio JS.\r\n\r\nEntonces, una llamada a `alert(..)` *es* JS, pero `alert` en sí mismo es realmente solo un invitado, no parte de la especificación oficial de JS.\r\n\r\n### No siempre es JS\r\n\r\nUsar la consola/REPL (Read-Evaluate-Print-Loop) en las Herramientas para Desarrolladores de tu navegador (o en Node) parece ser un entorno de JS bastante directo a primera vista. Pero en realidad no lo es.\r\n\r\nLas Herramientas para Desarrolladores son... herramientas para desarrolladores. Su propósito principal es hacer la vida más fácil para los desarrolladores. Priorizan la DX (Experiencia del Desarrollador). *No* es una meta de tales herramientas reflejar con precisión y purismo todas las sutilezas del comportamiento estricto de JS. Como tal, hay muchas peculiaridades que pueden actuar como \"trampas\" si estás tratando la consola como un entorno de JS *puro*.\r\n\r\nEsta conveniencia es algo bueno, ¡por cierto! Me alegra que las Herramientas para Desarrolladores faciliten la vida de los desarrolladores. Me alegra que tengamos encantos de UX agradables como el autocompletado de variables/propiedades, etc. Solo estoy señalando que no podemos ni debemos esperar que tales herramientas se adhieran *siempre* estrictamente a la manera en que se manejan los programas de JS, porque ese no es el propósito de estas herramientas.\r\n\r\nDado que tales herramientas varían en comportamiento de un navegador a otro, y dado que cambian (a veces bastante frecuentemente), no voy a \"codificar\" específicamente detalles en este texto, asegurando así que el texto de este libro esté desactualizado rápidamente.\r\n\r\nPero solo daré algunas pistas de ejemplos de peculiaridades que han sido verdaderas en varios momentos en diferentes entornos de consolas de JS, para reforzar mi punto acerca de no asumir el comportamiento nativo de JS mientras las usas:\r\n\r\n* Si una declaración `var` o `function` en el \"ámbito global\" superior de la consola realmente crea una variable global real (¡y una propiedad `window` reflejada, y viceversa!).\r\n\r\n* Qué sucede con múltiples declaraciones `let` y `const` en el \"ámbito global\" superior.\r\n\r\n* Si `\"use strict\";` en una entrada de una sola línea (presionar `\u003Center>` después) habilita el strict mode para el resto de esa sesión de consola, de la misma manera que lo haría en la primera línea de un archivo .js, y también si puedes usar `\"use strict\";` más allá de la \"primera línea\" y aún así activar el strict mode para esa sesión.\r\n\r\n* Cómo funciona el enlace predeterminado de `this` en el modo no estricto para las llamadas de funciones, y si el \"objeto global\" utilizado contendrá las variables globales esperadas.\r\n\r\n* Cómo funciona el izado (consulte el Libro 2, *Scope & Closures*) en múltiples entradas de líneas.\r\n\r\n* ...varias otras\r\n\r\nLa consola del desarrollador no está tratando de fingir ser un compilador de JS que maneje tu código ingresado exactamente de la misma manera que el motor de JS maneja un archivo .js. Está tratando de facilitarte la entrada rápida de unas pocas líneas de código y ver los resultados de inmediato. Estos son casos de uso completamente diferentes, y como tal, es irrazonable esperar que una herramienta maneje ambos de manera equitativa.\r\n\r\nNo confíes en el comportamiento que ves en una consola de desarrollador como que representa la semántica *exacta* de JS al pie de la letra; para eso, lee la especificación. En cambio, piensa en la consola como un entorno \"amigable con JS\". Eso es útil por sí mismo.\r\n\r\n## Muchas Caras\r\n\r\nEl término \"paradigma\" en el contexto de lenguajes de programación se refiere a una mentalidad y enfoque amplio (casi universal) para estructurar el código. Dentro de un paradigma, hay una miríada de variaciones de estilo y forma que distinguen programas, incluyendo innumerables bibliotecas y marcos diferentes que dejan su firma única en cualquier código dado.\r\n\r\nPero, sin importar cuál sea el estilo individual de un programa, las divisiones a gran escala en torno a los paradigmas casi siempre son evidentes a primera vista de cualquier programa.\r\n\r\nLas categorías típicas de código a nivel de paradigma incluyen estilo procedural, orientado a objetos (OO/clases) y funcional (FP):\r\n\r\n* El estilo procedural organiza el código en una progresión lineal de arriba hacia abajo a través de un conjunto predefinido de operaciones, generalmente recopiladas en unidades relacionadas llamadas procedimientos.\r\n\r\n* El estilo OO organiza el código al reunir la lógica y los datos en unidades llamadas clases.\r\n\r\n* El estilo FP organiza el código en funciones (cálculos puros en lugar de procedimientos) y las adaptaciones de esas funciones como valores.\r\n\r\nLos paradigmas no son ni correctos ni incorrectos. Son orientaciones que guían y moldean cómo los programadores abordan problemas y soluciones, cómo estructuran y mantienen su código.\r\n\r\nAlgunos lenguajes están fuertemente inclinados hacia un paradigma en particular; por ejemplo, C es procedural, Java/C++ es casi totalmente orientado a clases, y Haskell es completamente funcional.\r\n\r\nPero muchos lenguajes también admiten patrones de código que pueden provenir, e incluso combinarse, de diferentes paradigmas. Los llamados \"lenguajes multi-paradigma\" ofrecen flexibilidad máxima. En algunos casos, un solo programa incluso puede tener dos o más expresiones de estos paradigmas conviviendo uno al lado del otro.\r\n\r\nJS es definitivamente un lenguaje multi-paradigma. Puedes escribir código procedural, orientado a clases o en estilo FP, y puedes tomar esas decisiones línea por línea en lugar de estar obligado a elegir todo-o-nada.\r\n\r\n## Hacia atrás y hacia adelante\r\n\r\nUno de los principios fundamentales que guía a JS es la preservación de la *compatibilidad hacia atrás*. Muchos se confunden con las implicaciones de este término y a menudo lo confunden con un término relacionado pero diferente: *compatibilidad hacia adelante*.\r\n\r\nVamos a aclarar las cosas.\r\n\r\nLa compatibilidad hacia atrás significa que, una vez que algo se acepta como código JS válido, no habrá un cambio futuro en el lenguaje que haga que ese código deje de ser válido. El código escrito en 1995, ¡por primitivo o limitado que fuera!, debería seguir funcionando hoy. Como a menudo proclaman los miembros de TC39, \"¡no rompemos la web!\"\r\n\r\nLa idea es que los desarrolladores de JS pueden escribir código con la confianza de que su código no dejará de funcionar de manera impredecible porque se lance una actualización del navegador. Esto hace que la decisión de elegir JS para un programa sea una inversión más sabia y segura, durante años en el futuro.\r\n\r\nEsa \"garantía\" no es algo pequeño. Mantener la compatibilidad hacia atrás, extendida a lo largo de casi 25 años de la historia del lenguaje, crea una enorme carga y una serie de desafíos únicos. Sería difícil encontrar muchos otros ejemplos en informática de un compromiso tan firme con la compatibilidad hacia atrás.\r\n\r\nLos costos de adherirse a este principio no deben ser desestimados. Esto crea una barrera muy alta para incluir cambios o extensiones en el lenguaje; cualquier decisión se vuelve efectivamente permanente, con errores y todo. Una vez que está en JS, no se puede quitar porque podría romper programas, ¡incluso si realmente quisiéramos eliminarlo!\r\n\r\nHay algunas pequeñas excepciones a esta regla. JS ha tenido algunos cambios incompatibles hacia atrás, pero TC39 es extremadamente cauteloso al hacerlo. Estudian el código existente en la web (a través de la recopilación de datos del navegador) para estimar el impacto de tales cambios, y los navegadores finalmente deciden y votan si están dispuestos a enfrentar las críticas de los usuarios por un cambio de muy pequeña escala frente a los beneficios de corregir o mejorar algún aspecto del lenguaje para muchos más sitios (y usuarios).\r\n\r\nEstos cambios son raros y casi siempre se dan en casos marginales de uso que es poco probable que se rompan de manera observable en muchos sitios.\r\n\r\nComparado con la *compatibilidad hacia atrás*, su contraparte, la *compatibilidad hacia adelante*. Ser hacia adelante-compatible significa que incluir una nueva adición al lenguaje en un programa no haría que ese programa se rompiera si se ejecutara en un motor JS más antiguo. **JS no es compatible hacia adelante**, a pesar de que muchos lo desean e incluso creen incorrectamente en el mito de que lo es.\r\n\r\nHTML y CSS, en cambio, son hacia adelante compatibles pero no hacia atrás. Si desenterrases algo de HTML o CSS escrito en 1995, es completamente posible que no funcione (o funcione de la misma manera) hoy. Pero, si usas una nueva función de 2019 en un navegador de 2010, la página no está \"rota\" -- el CSS/HTML no reconocido se pasa por alto, mientras que el resto de la CSS/HTML se procesaría según corresponda.\r\n\r\nPuede parecer deseable incluir la compatibilidad hacia adelante en el diseño de lenguajes de programación, pero generalmente es impráctico hacerlo. La marcación (HTML) o el estilo (CSS) son de naturaleza declarativa, por lo que es mucho más fácil \"pasar por alto\" declaraciones no reconocidas con un impacto mínimo en otras declaraciones reconocidas.\r\n\r\nPero el caos y la no determinismo se producirían si un motor de lenguaje de programación selectivamente omitiera declaraciones (¡incluso expresiones!) que no entendiera, ya que es imposible asegurar que una parte posterior del programa no esperara que la parte omitida haya sido procesada.\r\n\r\nAunque JavaScript no es, ni puede ser, compatible hacia adelante, es fundamental reconocer la compatibilidad hacia atrás de JavaScript, incluidos los beneficios duraderos para la web y las limitaciones y dificultades que impone a JavaScript como resultado.\r\n\r\n### Saltando las brechas\r\n\r\nDado que JavaScript no es compatible hacia adelante, significa que siempre existe el potencial de una brecha entre el código que puedes escribir que es válido en JavaScript y el motor más antiguo que tu sitio o aplicación necesita admitir. Si ejecutas un programa que utiliza una característica de ES2019 en un motor de 2016, es muy probable que veas que el programa se rompe y falla.\r\n\r\nSi la característica es una nueva sintaxis, el programa generalmente fallará por completo al compilar y ejecutarse, generalmente arrojando un error de sintaxis. Si la característica es una API (como `Object.is(..)` en ES6), el programa puede ejecutarse hasta cierto punto, pero luego arrojará una excepción en tiempo de ejecución y se detendrá una vez que encuentre la referencia a la API desconocida.\r\n\r\n¿Significa esto que los desarrolladores de JavaScript siempre deben quedarse atrás en el ritmo del progreso, utilizando solo código que esté en la vanguardia de los entornos de motor JS más antiguos que necesitan admitir? ¡No!\r\n\r\nPero sí significa que los desarrolladores de JavaScript deben tener un cuidado especial para abordar esta brecha.\r\n\r\nPara la nueva sintaxis e incompatible, la solución es la transpilación. La transpilación es un término inventado por la comunidad para describir el uso de una herramienta para convertir el código fuente de un programa de una forma a otra (pero aún como código fuente textual). Por lo general, los problemas de compatibilidad hacia adelante relacionados con la sintaxis se resuelven utilizando un transpilador (el más común siendo Babel (https://babeljs.io)) para convertir esa nueva versión de sintaxis de JavaScript a una sintaxis más antigua equivalente.\r\n\r\nPor ejemplo, un desarrollador puede escribir un fragmento de código como:\r\n\r\n```js\r\nif (something) {\r\n    let x = 3;\r\n    console.log(x);\r\n}\r\nelse {\r\n    let x = 4;\r\n    console.log(x);\r\n}\r\n```\r\n\r\nAsí es como se vería el código en el árbol de código fuente de esa aplicación. Pero al producir el archivo (o archivos) para implementar en el sitio web público, el transpilador Babel podría convertir ese código para que se vea así:\r\n\r\n```js\r\nvar x$0, x$1;\r\nif (something) {\r\n    x$0 = 3;\r\n    console.log(x$0);\r\n}\r\nelse {\r\n    x$1 = 4;\r\n    console.log(x$1);\r\n}\r\n```\r\n\r\nEl fragmento original dependía de `let` para crear variables `x` con ámbito de bloque en las cláusulas `if` y `else`, que no interferían entre sí. Un programa equivalente (con mínimas modificaciones) que Babel puede producir simplemente elige nombrar dos variables diferentes con nombres únicos, logrando el mismo resultado de no interferencia.\r\n\r\n| NOTA: |\r\n| :--- |\r\n| La palabra clave `let` se agregó en ES6 (en 2015). El ejemplo anterior de transpilación solo sería necesario aplicarlo si una aplicación necesita ejecutarse en un entorno JS compatible con versiones anteriores a ES6. El ejemplo aquí es solo para simplificar la ilustración. Cuando ES6 era nuevo, la necesidad de esa transpilación era bastante común, pero en 2020 es mucho menos común necesitar admitir entornos pre-ES6. El \"objetivo\" utilizado para la transpilación es, por lo tanto, una ventana deslizante que se desplaza hacia arriba solo cuando se toman decisiones para que un sitio/aplicación deje de admitir algún navegador/motor antiguo. |\r\n\r\nPuede preguntarse: ¿por qué molestarse en usar una herramienta para convertir desde una versión de sintaxis más nueva a una más antigua? ¿No podríamos simplemente escribir las dos variables y evitar el uso de la palabra clave `let`? La razón es que se recomienda encarecidamente que los desarrolladores utilicen la última versión de JS para que su código sea limpio y comunique sus ideas de manera más efectiva.\r\n\r\nLos desarrolladores deben centrarse en escribir las formas de sintaxis nuevas y limpias, y permitir que las herramientas se encarguen de producir una versión compatible con el futuro de ese código que sea adecuada para implementar y ejecutar en los entornos de motor JS admitidos más antiguos.\r\n\r\n### Llenando los vacíos\r\n\r\nSi el problema de la compatibilidad futura no está relacionado con la nueva sintaxis, sino con un método de API faltante que se agregó recientemente, la solución más común es proporcionar una definición para ese método de API faltante que funcione como si el entorno más antiguo ya lo hubiera tenido definido de forma nativa. Este patrón se llama polyfill (también conocido como \"shim\").\r\n\r\nConsidera este código:\r\n\r\n```js\r\n// getSomeRecords() nos regresa una promesa para algunos\r\n// datos que recuperará\r\nvar pr = getSomeRecords();\r\n\r\n// mostrar el spinner UI mientras obtenemos los datos\r\nstartSpinner();\r\n\r\npr\r\n.then(renderRecords)   // renderizar si tiene éxito\r\n.catch(showError)      // mostrar un error si no\r\n.finally(hideSpinner)  // siempre oculta el spinner\r\n```\r\n\r\nEste código utiliza una característica de ES2019, el método `finally(..)` en el prototipo de la promesa. Si este código se usara en un entorno anterior a ES2019, el método `finally(..)` no existiría y se produciría un error.\r\n\r\nUn polyfill para `finally(..)` en entornos previos a ES2019 podría verse así:\r\n\r\n```js\r\nif (!Promise.prototype.finally) {\r\n    Promise.prototype.finally = function f(fn){\r\n        return this.then(\r\n            function t(v){\r\n                return Promise.resolve( fn() )\r\n                    .then(function t(){\r\n                        return v;\r\n                    });\r\n            },\r\n            function c(e){\r\n                return Promise.resolve( fn() )\r\n                    .then(function t(){\r\n                        throw e;\r\n                    });\r\n            }\r\n        );\r\n    };\r\n}\r\n```\r\n\r\n| ADVERTENCIA: |\r\n| :--- |\r\n| Esta es solo una ilustración simple de un polyfill básico (que no cumple completamente con las especificaciones) para `finally(..)`. No uses este polyfill en tu código; siempre utiliza un polyfill oficial y robusto cuando sea posible, como la colección de polyfills/shims en ES-Shim. |\r\n\r\nLa declaración `if` protege la definición del polyfill al evitar que se ejecute en cualquier entorno donde el motor JS ya haya definido ese método. En entornos más antiguos, el polyfill se define, pero en entornos más nuevos, la declaración `if` se salta silenciosamente.\r\n\r\nLos transpiladores como Babel generalmente detectan qué polyfills necesita tu código y los proporcionan automáticamente. Pero ocasionalmente puede ser necesario incluirlos/definirlos explícitamente, lo cual funciona de manera similar al fragmento que acabamos de ver.\r\n\r\nSiempre escribe código utilizando las características más apropiadas para comunicar sus ideas e intenciones de manera efectiva. En general, esto significa usar la versión más reciente y estable de JS. Evita afectar negativamente la legibilidad del código tratando de ajustar manualmente las lagunas de sintaxis/API. ¡Para eso están las herramientas!\r\n\r\nLa transpilación y el polyfilling son dos técnicas altamente efectivas para abordar la brecha entre el código que utiliza las características más recientes y estables del lenguaje y los antiguos entornos que un sitio o aplicación aún necesita admitir. Dado que JS no dejará de mejorar, la brecha nunca desaparecerá. Ambas técnicas deberían ser adoptadas como parte estándar de la cadena de producción de cada proyecto de JS en el futuro.\r\n\r\n## ¿Qué hay en una interpretación?\r\n\r\nDurante mucho tiempo, ha existido un debate sobre si el código escrito en JS es un script interpretado o un programa compilado. La opinión mayoritaria parece ser que JS es un lenguaje interpretado (de scripting). Sin embargo, la verdad es más complicada que eso.\r\n\r\nDurante gran parte de la historia de los lenguajes de programación, los lenguajes \"interpretados\" y los lenguajes \"de scripting\" han sido considerados inferiores en comparación con sus contrapartes compiladas. Las razones para esta animosidad son numerosas, incluyendo la percepción de una falta de optimización de rendimiento, así como la aversión a ciertas características del lenguaje, como el uso de tipos dinámicos en lugar de los \"más maduros\" lenguajes de tipos estáticos.\r\n\r\nLos lenguajes considerados \"compilados\" generalmente producen una representación (binaria) portátil del programa que se distribuye para su ejecución posterior. Dado que no observamos realmente ese tipo de modelo con JS (distribuimos el código fuente, no la forma binaria), muchos afirman que esto descalifica a JS de esa categoría. En realidad, el modelo de distribución de la forma \"ejecutable\" de un programa se ha vuelto drásticamente más variado y también menos relevante en las últimas décadas; para la pregunta en cuestión, ya no importa tanto la forma en que se distribuye un programa.\r\n\r\nEstas afirmaciones y críticas desinformadas deben ser dejadas de lado. La verdadera razón por la que importa tener una imagen clara de si JS es interpretado o compilado se relaciona con la forma en que se manejan los errores.\r\n\r\nHistóricamente, los lenguajes scriptados o interpretados se ejecutaban generalmente de arriba hacia abajo y línea por línea; por lo general, no hay un pase inicial a través del programa para procesarlo antes de que comience la ejecución (ver Figura 1).\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig1.png\" width=\"650\" alt=\"Interpretar un script para ejecutarlo\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 1: Ejecución Interpretada/Scripted\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\nEn lenguajes scriptados o interpretados, un error en la línea 5 de un programa no se descubrirá hasta que las líneas 1 a 4 ya se hayan ejecutado. Es importante destacar que el error en la línea 5 puede deberse a una condición en tiempo de ejecución, como algún valor o variable que tiene un valor inadecuado para una operación, o puede deberse a una declaración o comando mal formado en esa línea. Dependiendo del contexto, posponer el manejo de errores hasta la línea en la que ocurre el error puede ser un efecto deseable o indeseable.\r\n\r\nComparado con lenguajes que sí pasan por una etapa de procesamiento (normalmente llamada análisis) antes de que ocurra cualquier ejecución, como se ilustra en la Figura 2:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig2.png\" width=\"650\" alt=\"Parsear, compilar y ejecutar un programa\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 2: Parseo + Compilación + Ejecución\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\nEn este modelo de procesamiento, un comando no válido (como una sintaxis incorrecta) en la línea 5 se detectaría durante la fase de análisis, antes de que comience cualquier ejecución, y ninguno de los programas se ejecutaría. Para capturar errores de sintaxis (o errores \"estáticos\"), generalmente es preferible conocerlos antes de cualquier ejecución parcial condenada.\r\n\r\nEntonces, ¿qué tienen en común los lenguajes \"parseados\" con los lenguajes \"compilados\"? Primero, todos los lenguajes compilados son parseados. Por lo tanto, un lenguaje parseado está bastante avanzado en el camino hacia ser compilado. En la teoría clásica de la compilación, el último paso restante después del análisis es la generación de código: producir una forma ejecutable.\r\n\r\nUna vez que se ha parseado completamente un programa fuente, es muy común que su ejecución posterior incluya, de alguna forma, una traducción desde la forma parseada del programa, generalmente llamada Árbol de Sintaxis Abstracta (AST), hasta esa forma ejecutable.\r\n\r\nEn otras palabras, los lenguajes parseados suelen realizar la generación de código antes de la ejecución, por lo que no es tan exagerado decir que, en espíritu, son lenguajes compilados.\r\n\r\nEl código fuente de JS se parsea antes de ejecutarse. La especificación lo requiere, porque exige \"errores tempranos\" —errores estáticamente determinados en el código, como un nombre de parámetro duplicado— que se informen antes de que el código comience a ejecutarse. Esos errores no se pueden reconocer sin que el código haya sido parseado.\r\n\r\nEntonces, **JS es un lenguaje parseado**, pero ¿está compilado?\r\n\r\nLa respuesta está más cerca del sí que del no. El JS parseado se convierte en una forma optimizada (binaria), y ese \"código\" se ejecuta posteriormente (Figura 2); el motor no suele cambiar a un modo de ejecución línea por línea (como en la Figura 1) después de haber terminado todo el trabajo duro de análisis, ya que eso sería altamente ineficiente.\r\n\r\nPara ser específicos, esta \"compilación\" produce un código binario (de alguna manera), que luego se entrega a la \"máquina virtual de JS\" para ejecutarlo. A algunos les gusta decir que esta MV está \"interpretando\" el código binario. Pero eso significaría que Java, y una docena de otros lenguajes impulsados por JVM, por cierto, se interpretan en lugar de compilarse. Por supuesto, eso contradice la afirmación típica de que Java/etc. son lenguajes compilados.\r\n\r\nCuriosamente, aunque Java y JavaScript son lenguajes muy diferentes, la pregunta de interpretación/compilación está bastante relacionada entre ellos.\r\n\r\nOtra complicación es que los motores de JS pueden emplear múltiples pasadas de procesamiento/optimización JIT (Just-In-Time) en el código generado (post análisis), que nuevamente podría etiquetarse razonablemente como \"compilación\" o \"interpretación\" dependiendo de la perspectiva. De hecho, es una situación fantásticamente compleja bajo el capó de un motor de JS.\r\n\r\nEntonces, ¿en qué se reducen estos detalles minuciosos? Retrocede y considera todo el flujo de un programa fuente de JS:\r\n\r\n1. Después de que un programa sale del editor de un desarrollador, se transpila con Babel, luego se empaca con Webpack (y tal vez media docena de otros procesos de construcción), luego se entrega en esa forma muy diferente a un motor de JS.\r\n\r\n2. El motor de JS parsea el código a un AST.\r\n\r\n3. Luego, el motor convierte ese AST en una especie de código binario, una representación intermedia binaria (IR), que luego es refinada/convertida aún más por el compilador JIT optimizado.\r\n\r\n4. Finalmente, la MV de JS ejecuta el programa.\r\n\r\nPara visualizar esos pasos, nuevamente:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig3.png\" width=\"650\" alt=\"Pasos de compilación y ejecución de JS\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 3: Parseando, Compilando, y Ejecutando JS\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\n¿JS se maneja más como un script interpretado, línea por línea, como en la Figura 1, o se maneja más como un lenguaje compilado que se procesa en uno o varios pasos primero, antes de la ejecución (como en las Figuras 2 y 3)?\r\n\r\nCreo que está claro que en espíritu, si no en la práctica, **JS es un lenguaje compilado**.\r\n\r\nY nuevamente, la razón por la que esto importa es que, como JS está compilado, se nos informa de errores estáticos (como sintaxis malformada) antes de que se ejecute nuestro código. ¡Ese es un modelo de interacción sustancialmente diferente al que obtenemos con los programas de \"scripting\" tradicionales y podría argumentarse que es más útil!\r\n\r\n### Web Assembly (WASM)\r\n\r\nUna preocupación dominante que ha impulsado gran parte de la evolución de JS es el rendimiento, tanto en cuanto a la rapidez con la que JS puede ser parseado/compilado como a la velocidad con la que se puede ejecutar ese código compilado.\r\n\r\nEn 2013, ingenieros de Mozilla Firefox demostraron la portabilidad del motor de juegos Unreal 3 desde C a JS. La capacidad de que este código se ejecutara en un motor JS del navegador a una velocidad completa de 60 fps se basaba en un conjunto de optimizaciones que el motor JS podía realizar específicamente porque la versión JS del código del motor Unreal utilizaba un estilo de código que favorecía a un subconjunto del lenguaje JS, llamado \"ASM.js\".\r\n\r\nEste subconjunto es JS válido escrito de maneras que son algo inusuales en la programación normal, pero que señalan cierta información de tipado importante al motor que le permiten realizar optimizaciones clave. ASM.js se introdujo como una forma de abordar las presiones sobre el rendimiento en tiempo de ejecución de JS.\r\n\r\nPero es importante destacar que ASM.js nunca se pretendió que fuera código escrito por desarrolladores, sino más bien una representación de un programa que se había transpilado desde otro lenguaje (como C), donde estas \"anotaciones\" de tipado se insertaron automáticamente mediante las herramientas.\r\n\r\nVarios años después de que ASM.js demostrara la validez de versiones de programas creadas por herramientas que pueden procesarse de manera más eficiente en el motor JS, otro grupo de ingenieros (también, inicialmente, de Mozilla) lanzó WebAssembly (WASM).\r\n\r\nWASM es similar a ASM.js en el sentido de que su intención original era proporcionar un camino para que los programas no JS (C, etc.) se convirtieran en una forma que pudiera ejecutarse en el motor JS. A diferencia de ASM.js, WASM eligió además sortear algunos de los retrasos inherentes en el análisis/compilación de JS antes de que un programa pueda ejecutarse, representando el programa en una forma que es completamente diferente a JS.\r\n\r\nWASM es un formato de representación más parecido a Assembly (de ahí su nombre) que puede ser procesado por un motor JS al omitir el análisis/compilación que normalmente realiza el motor JS. El análisis/compilación de un programa dirigido a WASM se realiza antes de tiempo (AOT); lo que se distribuye es un programa binario empaquetado listo para que el motor JS lo ejecute con un procesamiento mínimo.\r\n\r\nUna motivación inicial para WASM fue claramente la mejora potencial de rendimiento. Aunque eso sigue siendo un enfoque, WASM también está motivado por el deseo de llevar más paridad a las lenguas no JS a la plataforma web. Por ejemplo, si un lenguaje como Go admite la programación con hilos, pero JS (el lenguaje) no lo hace, WASM ofrece la posibilidad de que dicho programa Go se convierta a una forma que el motor JS pueda entender, sin necesidad de una función de hilos en el propio lenguaje JS.\r\n\r\nEn otras palabras, WASM alivia la presión de agregar características a JS que están mayormente/exclusivamente destinadas a ser utilizadas por programas transpilados de otros lenguajes. Eso significa que el desarrollo de características de JS puede ser evaluado (por TC39) sin verse sesgado por intereses/demandas en otros ecosistemas de lenguajes, al tiempo que permite que esos lenguajes tengan una vía viable hacia la web.\r\n\r\nOtra perspectiva sobre WASM que está surgiendo es, interesantemente, ni siquiera está directamente relacionada con la web (W). WASM está evolucionando para convertirse en una especie de máquina virtual (VM) multiplataforma, donde los programas pueden compilarse una vez y ejecutarse en una variedad de entornos de sistemas diferentes.\r\n\r\nEntonces, WASM no es solo para la web, y WASM tampoco es JS. Irónicamente, aunque WASM se ejecuta en el motor JS, el lenguaje JS es uno de los menos adecuados para generar programas WASM, porque WASM depende en gran medida de información de tipado estático. Incluso TypeScript (TS), ostensiblemente JS + tipos estáticos, no es del todo adecuado (tal como está) para transpilarse a WASM, aunque variantes de lenguaje como AssemblyScript están tratando de cerrar la brecha entre JS/TS y WASM.\r\n\r\nEste libro no trata sobre WASM, así que no dedicaré mucho más tiempo a discutirlo, excepto para hacer un último punto. *Algunas* personas han sugerido que WASM apunta a un futuro en el que JS sea excluido o minimizado en la web. Estas personas a menudo albergan sentimientos negativos sobre JS y quieren que algún otro lenguaje, ¡cualquier otro lenguaje!, lo reemplace. Dado que WASM permite que otros lenguajes se ejecuten en el motor JS, en principio, esto no es un cuento de hadas completamente fantástico.\r\n\r\nPero permíteme decir simplemente: WASM no reemplazará a JS. WASM aumenta significativamente lo que la web (incluido JS) puede lograr. Eso es algo excelente, totalmente independiente de si algunas personas lo usarán como una salida para no tener que escribir JS.\r\n\r\n## E*strict*amente hablando\r\n\r\nEn 2009, con el lanzamiento de ES5, JS añadió el *strict mode* como un mecanismo opcional para fomentar la creación de programas JS de mejor calidad.\r\n\r\nLos beneficios del strict mode superan con creces los costos, pero las viejas costumbres son difíciles de cambiar y la inercia de las bases de código existentes (también conocidas como bases de código \"heredadas\") es realmente difícil de modificar. Lamentablemente, más de 10 años después, la *opcionabilidad* del strict mode significa que no es necesariamente la configuración predeterminada para los programadores JS.\r\n\r\n¿Por qué el strict mode? El strict mode no debería ser considerado como una restricción de lo que no se puede hacer, sino más bien como una guía sobre la mejor manera de hacer las cosas para que el motor JS tenga la mejor oportunidad de optimizar y ejecutar eficientemente el código. La mayoría de los códigos JS son trabajados por equipos de desarrolladores, por lo que la estrictitud del *strict* mode (¡junto con herramientas como linters!) a menudo ayuda en la colaboración en el código al evitar algunos de los errores más problemáticos que se pasan por alto en el modo no estricto.\r\n\r\nLa mayoría de los controles del strict mode están en forma de *errores tempranos*, lo que significa errores que no son estrictamente errores de sintaxis, pero que aún se lanzan en tiempo de compilación (antes de que se ejecute el código). Por ejemplo, el strict mode prohíbe nombrar dos parámetros de función iguales y genera un error temprano. Otros controles del strict mode solo se observan en tiempo de ejecución, como cómo `this` se establece en `undefined` en lugar del objeto global.\r\n\r\nEn lugar de luchar y discutir con el strict mode, como un niño que simplemente quiere desafiar lo que le dicen sus padres que no haga, la mejor mentalidad es que el strict mode es como un linter que te recuerda cómo *debería* escribirse JS para tener la mejor calidad y la mejor oportunidad de rendimiento. Si te encuentras sintiéndote limitado, tratando de evitar el strict mode, eso debería ser una señal de advertencia clara de que necesitas retroceder y reconsiderar todo el enfoque.\r\n\r\nEl strict mode se activa por archivo con una pragma especial (nada permitido antes de ella excepto comentarios/espacios en blanco):\r\n\r\n```js\r\n// sólo se permiten espacios en blanco y comentarios\r\n// antes del uso de use-strict\r\n\"use strict\";\r\n// el resto del archivo se ejecuta en strict mode\r\n```\r\n\r\n| ADVERTENCIA: |\r\n| :--- |\r\n| Algo importante a tener en cuenta es que incluso un `;` solitario que aparece justo antes de la pragma del strict mode hará que la pragma sea ineficaz; no se lanzarán errores porque es válido tener una expresión literal de cadena en una posición de declaración, ¡pero *tampoco* se activará silenciosamente el strict mode! |\r\n\r\nEl strict mode también se puede activar alternativamente por ámbito de función, con exactamente las mismas reglas sobre su entorno:\r\n\r\n```js\r\nfunction someOperations() {\r\n    // Los espacios en blanco y los comentarios están bien aquí\r\n    \"use strict\";\r\n\r\n    // todo este código se ejecutará en strict mode\r\n}\r\n```\r\nDe manera interesante, si un archivo tiene activado el strict mode, se prohíben los pragmas de strict mode a nivel de función. Por lo tanto, debes elegir uno u otro.\r\n\r\nLa **única** razón válida para utilizar un enfoque por función para el strict mode es cuando estás convirtiendo un archivo de programa existente que no está en strict mode y necesitas realizar los cambios poco a poco con el tiempo. De lo contrario, es mucho mejor activar el strict mode para todo el archivo/programa.\r\n\r\nMuchos se han preguntado si habrá algún momento en que JS haga del strict mode la opción predeterminada. La respuesta es casi seguramente no. Como discutimos anteriormente en cuanto a la compatibilidad con versiones anteriores, si una actualización del motor de JS comenzara a asumir que el código está en strict mode incluso si no está marcado como tal, es posible que este código se rompa como resultado de los controles del strict mode.\r\n\r\nSin embargo, hay algunos factores que reducen el impacto futuro de esta \"oscuridad\" no predeterminada del strict mode.\r\n\r\nEn primer lugar, prácticamente todo el código transpilado termina en strict mode incluso si el código fuente original no está escrito de esa manera. La mayoría del código JS en producción ha sido transpilado, lo que significa que la mayoría del código JS ya se adhiere al strict mode. Es posible deshacer esa suposición, pero realmente debes esforzarte por hacerlo, por lo que es muy poco probable.\r\n\r\nAdemás, está ocurriendo un cambio importante hacia que más/mayoría del nuevo código JS se escriba utilizando el formato de módulo ES6. Los módulos ES6 asumen el strict mode, por lo que todo el código en dichos archivos se establece automáticamente en el strict mode.\r\n\r\nEn conjunto, el strict mode es en gran medida la opción predeterminada de facto, aunque técnicamente no lo sea.\r\n\r\n## Definido\r\n\r\nJS es una implementación del estándar ECMAScript (versión ES2019 en el momento de escribir esto), que está guiado por el comité TC39 y alojado por ECMA. Se ejecuta en navegadores y otros entornos de JS, como Node.js.\r\n\r\nJS es un lenguaje multiparadigma, lo que significa que la sintaxis y las capacidades permiten a un desarrollador combinar y mezclar (¡y doblar y remodelar!) conceptos de varios paradigmas importantes, como el procedural, orientado a objetos (OO/clases) y funcional (FP).\r\n\r\nJS es un lenguaje compilado, lo que significa que las herramientas (incluido el motor de JS) procesan y verifican un programa (¡informando de cualquier error!) antes de que se ejecute.\r\n\r\nCon nuestro lenguaje ahora *definido*, comencemos a conocer sus detalles y peculiaridades.\r\n\r\n[^specApB]: ECMAScript 2019 Language Specification, Appendix B: Additional ECMAScript Features for Web Browsers, https://www.ecma-international.org/ecma-262/10.0/#sec-additional-ecmascript-features-for-web-browsers (la última versión disponible en el momento de escribir esto en enero de 2020)","src/content/blog/libros/you-dont-know-js-yet/get-started/ch1.md","0707211958a35dd4",{"html":1459,"metadata":1460},"\u003Cp>No conoces JS, todavía. Yo tampoco, al menos no completamente. Ninguno de nosotros lo hace. Pero todos podemos empezar a conocer mejor a JS.\u003C/p>\n\u003Cp>En este primer capítulo del primer libro de la serie \u003Cem>You Don’t Know JS Yet\u003C/em> (YDKJSY), dedicaremos tiempo a construir una base para avanzar. Necesitamos comenzar cubriendo una variedad de detalles importantes de mantenimiento, desmitificando algunos mitos y malentendidos sobre lo que realmente es el lenguaje (¡y lo que no es!).\u003C/p>\n\u003Cp>Esta es una perspicacia valiosa sobre la identidad y el proceso de cómo está organizado y mantenido JS; todos los desarrolladores de JS deberían entenderlo. Si quieres conocer a JS, así es como \u003Cem>comenzar\u003C/em> dando los primeros pasos en ese viaje.\u003C/p>\n\u003Ch2 id=\"sobre-este-libro\">Sobre Este Libro\u003C/h2>\n\u003Cp>Enfatizo la palabra viaje porque \u003Cem>conocer JS\u003C/em> no es un destino, es una dirección. No importa cuánto tiempo pases con el lenguaje, siempre podrás encontrar algo más que aprender y entender un poco mejor. Así que no veas este libro como algo para apresurarte y lograr un logro rápido. En cambio, la paciencia y la persistencia son lo mejor mientras das estos primeros pasos.\u003C/p>\n\u003Cp>Después de este capítulo introductorio, el resto del libro presenta un mapa de alto nivel de lo que encontrarás mientras profundizas y estudias JS con los libros de YDKJSY.\u003C/p>\n\u003Cp>En particular, el Capítulo 4 identifica tres pilares principales alrededor de los cuales está organizado el lenguaje JS: scope/closures (alcance/cierres), prototypes/objects (prototipos/objetos) y types/coercion (tipos/coerción). JS es un lenguaje amplio y sofisticado, con muchas características y capacidades. Pero todo JS se basa en estos tres pilares fundamentales.\u003C/p>\n\u003Cp>Ten en cuenta que, aunque este libro tiene el título “Get Started”, \u003Cstrong>no está destinado como un libro para principiantes o una introducción\u003C/strong>. El trabajo principal de este libro es prepararte para estudiar JS en profundidad a lo largo del resto de la serie; está escrito asumiendo que ya tienes familiaridad con JS y al menos varios meses de experiencia antes de avanzar en YDKJSY. Entonces, para aprovechar al máximo \u003Cem>Get Started\u003C/em>, asegúrate de pasar mucho tiempo escribiendo código JS para acumular experiencia.\u003C/p>\n\u003Cp>Incluso si ya has escrito mucho JS antes, este libro no debe pasarse por alto o saltarse; tómate tu tiempo para procesar completamente el material aquí. \u003Cstrong>Un buen comienzo siempre depende de un primer paso sólido.\u003C/strong>\u003C/p>\n\u003Ch2 id=\"qué-significa-ese-nombre\">¿Qué significa ese nombre?\u003C/h2>\n\u003Cp>El nombre JavaScript es probablemente el nombre de un lenguaje de programación más malinterpretado y comprendido.\u003C/p>\n\u003Cp>¿Está este lenguaje relacionado con Java? ¿Es solo la forma de script para Java? ¿Solo sirve para escribir scripts y no programas reales?\u003C/p>\n\u003Cp>La verdad es que el nombre JavaScript es un resultado de artimañas de marketing. Cuando Brendan Eich concibió por primera vez el lenguaje, lo denominó Mocha. Internamente en Netscape, se utilizaba la marca LiveScript. Pero cuando llegó el momento de nombrar públicamente el lenguaje, “JavaScript” ganó la votación.\u003C/p>\n\u003Cp>¿Por qué? Porque este lenguaje fue diseñado originalmente para atraer a una audiencia compuesta en su mayoría por programadores de Java, y porque la palabra “script” estaba de moda en ese momento para referirse a programas livianos. Estos “scripts” livianos serían los primeros en incrustarse en páginas en esta nueva cosa llamada web!\u003C/p>\n\u003Cp>En otras palabras, JavaScript fue un truco de marketing para tratar de posicionar este lenguaje como una alternativa aceptable para escribir el más pesado y más conocido Java de la época. Podría haberse llamado igualmente “WebJava”, por así decirlo.\u003C/p>\n\u003Cp>Existen algunas similitudes superficiales entre el código de JavaScript y el código de Java. Esas similitudes no provienen especialmente de un desarrollo compartido, sino porque ambos lenguajes apuntan a desarrolladores con expectativas de sintaxis asumidas de C (y en cierta medida, C++).\u003C/p>\n\u003Cp>Por ejemplo, usamos la \u003Ccode>{\u003C/code> para comenzar un bloque de código y la \u003Ccode>}\u003C/code> para finalizar ese bloque de código, al igual que en C/C++ y Java. También usamos el \u003Ccode>;\u003C/code> para poner fin a una declaración.\u003C/p>\n\u003Cp>De alguna manera, las relaciones legales van aún más allá de la sintaxis. Oracle (a través de Sun), la empresa que aún posee y opera Java, también posee la marca registrada oficial para el nombre “JavaScript” (a través de Netscape). Esta marca registrada casi nunca se hace valer y probablemente no podría hacerse en este momento.\u003C/p>\n\u003Cp>Por estas razones, algunos han sugerido que usemos JS en lugar de JavaScript. Esa es una abreviatura muy común, aunque no es un buen candidato para la marca oficial del lenguaje. De hecho, estos libros utilizan JS casi exclusivamente para referirse al lenguaje.\u003C/p>\n\u003Cp>Para distanciar aún más al lenguaje de la marca registrada propiedad de Oracle, el nombre oficial del lenguaje especificado por TC39 y formalizado por el organismo de normas ECMA es \u003Cstrong>ECMAScript\u003C/strong>. Y de hecho, desde 2016, el nombre oficial del lenguaje también ha sido seguido por el año de revisión; al momento de escribir esto, eso es ECMAScript 2019, o de lo contrario abreviado como ES2019.\u003C/p>\n\u003Cp>En otras palabras, el JavaScript/JS que se ejecuta en tu navegador o en Node.js, es \u003Cem>una\u003C/em> implementación del estándar ES2019.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">No uses términos como “JS6” o “ES8” para referirte al lenguaje. Algunos lo hacen, pero esos términos solo sirven para perpetuar la confusión. “ES20xx” o simplemente “JS” son los términos a los que debes ceñirte.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Ya sea que lo llames JavaScript, JS, ECMAScript o ES2019, ¡definitivamente no es una variante del lenguaje Java!\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Java es a JavaScript como jamón es a hámster.” —Jeremy Keith, 2009\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"especificación-del-lenguaje\">Especificación del Lenguaje.\u003C/h2>\n\u003Cp>Mencioné TC39, el comité de dirección técnica que gestiona JS. Su tarea principal es gestionar la especificación oficial del lenguaje. Se reúnen regularmente para votar sobre cualquier cambio acordado, que luego envían a ECMA, la organización de estándares.\u003C/p>\n\u003Cp>La sintaxis y el comportamiento de JS están definidos en la especificación ES.\u003C/p>\n\u003Cp>ES2019 resulta ser la décima especificación/revisión numerada principal desde el inicio de JS en 1995, así que en la URL oficial de la especificación alojada por ECMA, encontrarás “10.0”:\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.ecma-international.org/ecma-262/10.0/\">https://www.ecma-international.org/ecma-262/10.0/\u003C/a>\u003C/p>\n\u003Cp>El comité TC39 está compuesto por entre 50 y aproximadamente 100 personas de una amplia variedad de empresas relacionadas con la web, como fabricantes de navegadores (Mozilla, Google, Apple) y fabricantes de dispositivos (Samsung, etc). Todos los miembros del comité son voluntarios, aunque muchos de ellos son empleados de estas empresas y pueden recibir compensación en parte por sus funciones en el comité.\u003C/p>\n\u003Cp>TC39 se reúne generalmente aproximadamente cada dos meses, por lo general durante unos tres días, para revisar el trabajo realizado por los miembros desde la última reunión, discutir problemas y votar sobre propuestas. Las ubicaciones de las reuniones rotan entre las empresas miembros dispuestas a ser anfitrionas.\u003C/p>\n\u003Cp>Todas las propuestas de TC39 avanzan a través de un proceso de cinco etapas, por supuesto, ya que somos programadores, ¡comienza en 0! Desde la Etapa 0 hasta la Etapa 4. Puedes obtener más información sobre el proceso de etapas aquí: \u003Ca href=\"https://tc39.es/process-document/\">https://tc39.es/process-document/\u003C/a>\u003C/p>\n\u003Cp>La Etapa 0 significa aproximadamente que alguien en TC39 piensa que es una idea valiosa y planea respaldarla y trabajar en ella. Eso significa que muchas ideas que los no miembros de TC39 “proponen”, a través de medios informales como las redes sociales o publicaciones en blogs, son realmente “pre-etapa 0”. Debes conseguir que un miembro de TC39 respalde una propuesta para que sea considerada oficialmente “Etapa 0”.\u003C/p>\n\u003Cp>Una vez que una propuesta alcanza el estado de “Etapa 4”, es elegible para ser incluida en la próxima revisión anual del lenguaje. Puede tomar desde varios meses hasta unos pocos años para que una propuesta avance a través de estas etapas.\u003C/p>\n\u003Cp>Todas las propuestas se gestionan de manera abierta, en el repositorio de Github de TC39: \u003Ca href=\"https://github.com/tc39/proposals\">https://github.com/tc39/proposals\u003C/a>\u003C/p>\n\u003Cp>Cualquier persona, ya sea miembro de TC39 o no, puede participar en estas discusiones públicas y en los procesos para trabajar en las propuestas. Sin embargo, solo los miembros de TC39 pueden asistir a las reuniones y votar sobre las propuestas y los cambios. Por lo tanto, en efecto, la voz de un miembro de TC39 tiene mucho peso en la dirección que tomará JS.\u003C/p>\n\u003Cp>Contrariamente a algún mito establecido y frustrantemente perpetuado, \u003Cem>no\u003C/em> hay múltiples versiones de JavaScript en circulación. Solo existe \u003Cstrong>un JS\u003C/strong>, el estándar oficial mantenido por TC39 y ECMA.\u003C/p>\n\u003Cp>En la década de los 2000s, cuando Microsoft mantenía una versión bifurcada e ingenierizada en reversa (y no del todo compatible) de JS llamada “JScript”, realmente existían “versiones múltiples” de JS. Pero esos días han quedado atrás. Es obsoleto y inexacto hacer tales afirmaciones sobre JS hoy en día.\u003C/p>\n\u003Cp>Todos los principales navegadores y fabricantes de dispositivos se han comprometido a mantener sus implementaciones de JS compatibles con esta única especificación central. Por supuesto, los motores implementan características en diferentes momentos. Pero nunca debería ser el caso de que el motor V8 (el motor JS de Chrome) implemente una característica especificada de manera diferente o incompatible en comparación con el motor SpiderMonkey (el motor JS de Mozilla).\u003C/p>\n\u003Cp>Esto significa que puedes aprender un \u003Cstrong>solo JS\u003C/strong> y confiar en ese mismo JS en todas partes.\u003C/p>\n\u003Ch3 id=\"la-web-lo-gobierna-todo-js\">La Web Lo Gobierna Todo (JS)\u003C/h3>\n\u003Cp>Mientras que la variedad de entornos que ejecutan JS está en constante expansión (desde navegadores, hasta servidores (Node.js), pasando por robots, bombillas, hasta…), el único entorno que domina JS es la web. En otras palabras, cómo se implementa JS para los navegadores web es, en la práctica, la única realidad que importa.\u003C/p>\n\u003Cp>En su mayor parte, el JS definido en la especificación y el JS que se ejecuta en los motores de JS basados en el navegador es el mismo. Pero hay algunas diferencias que deben tenerse en cuenta.\u003C/p>\n\u003Cp>A veces, la especificación de JS dictará algún comportamiento nuevo o refinado, y aún así, eso no coincidirá exactamente con cómo funciona en los motores de JS basados en el navegador. Tal desajuste es histórico: los motores de JS han tenido más de 20 años de comportamientos observables en casos particulares de características en las que el contenido web ha llegado a depender. Como tal, a veces los motores de JS se negarán a conformarse a un cambio dictado por la especificación porque rompería ese contenido web.\u003C/p>\n\u003Cp>En estos casos, a menudo TC39 retrocederá y simplemente elegirá ajustar la especificación a la realidad de la web. Por ejemplo, TC39 planeaba agregar un método \u003Ccode>contains(..)\u003C/code> para Arrays, pero se descubrió que este nombre entraba en conflicto con antiguos frameworks de JS que aún se utilizan en algunos sitios, así que cambiaron el nombre a un \u003Ccode>includes(..)\u003C/code> que no tenía conflictos. Lo mismo ocurrió con una cómica/trágica \u003Cem>crisis comunitaria\u003C/em> de JS llamada “smooshgate”, donde el método planeado \u003Ccode>flatten(..)\u003C/code> fue finalmente renombrado a \u003Ccode>flat(..)\u003C/code>.\u003C/p>\n\u003Cp>Pero ocasionalmente, TC39 decidirá que la especificación debe mantenerse firme en algún punto, aunque es poco probable que los motores de JS basados en el navegador se conformen.\u003C/p>\n\u003Cp>¿La solución? Apéndice B, “Características Adicionales de ECMAScript para Navegadores Web”.\u003Csup>\u003Ca href=\"#user-content-fn-specapb\" id=\"user-content-fnref-specapb\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup> La especificación de JS incluye este apéndice para detallar cualquier desajuste conocido entre la especificación oficial de JS y la realidad de JS en la web. En otras palabras, estas son excepciones permitidas \u003Cem>solo\u003C/em> para JS web; otros entornos de JS deben ceñirse al pie de la letra de la ley.\u003C/p>\n\u003Cp>La Sección B.1 y B.2 cubren \u003Cem>adiciones\u003C/em> a JS (sintaxis y APIs) que JS web incluye, nuevamente por razones históricas, pero que TC39 no planea especificar formalmente en el núcleo de JS. Ejemplos incluyen literales octales con prefijo \u003Ccode>0\u003C/code>, las utilidades globales \u003Ccode>escape(..)\u003C/code> / \u003Ccode>unescape(..)\u003C/code>, “helpers” de String como \u003Ccode>anchor(..)\u003C/code> y \u003Ccode>blink()\u003C/code>, y el método \u003Ccode>compile(..)\u003C/code> de RegExp.\u003C/p>\n\u003Cp>La Sección B.3 incluye algunos conflictos donde el código puede ejecutarse tanto en motores de JS web como en motores de JS no web, pero donde el comportamiento \u003Cem>podría\u003C/em> ser observadamente diferente, entregando resultados diferentes. La mayoría de los cambios enumerados involucran situaciones etiquetadas como errores tempranos cuando el código se ejecuta en strict mode.\u003C/p>\n\u003Cp>No se encuentran \u003Cem>problemas\u003C/em> del Apéndice B muy a menudo, pero aún así es buena idea evitar estas construcciones para estar a salvo en el futuro. Siempre que sea posible, adhiérete a la especificación de JS y no confíes en comportamientos que solo son aplicables en ciertos entornos de motores de JS.\u003C/p>\n\u003Ch3 id=\"no-todo-js-web\">No Todo JS (Web)…\u003C/h3>\n\u003Cp>¿Es este código un programa de JS?\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">alert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Hello, JS!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Depende de cómo lo veas. La función \u003Ccode>alert(..)\u003C/code> mostrada aquí no está incluida en la especificación de JS, pero sí \u003Cem>está\u003C/em> en todos los entornos web de JS. Sin embargo, no la encontrarás en el Apéndice B, ¿entonces qué pasa?\u003C/p>\n\u003Cp>Varios entornos de JS (como los motores de JS de los navegadores, Node.js, etc.) añaden APIs al ámbito global de tus programas de JS que te proporcionan capacidades específicas del entorno, como la capacidad de mostrar una ventana de alerta en el navegador del usuario.\u003C/p>\n\u003Cp>De hecho, una amplia variedad de APIs que se parecen a JS, como \u003Ccode>fetch(..)\u003C/code>, \u003Ccode>getCurrentLocation(..)\u003C/code>, y \u003Ccode>getUserMedia(..)\u003C/code>, son todas APIs web que parecen JS. En Node.js, podemos acceder a cientos de métodos de API de varios módulos integrados, como \u003Ccode>fs.write(..)\u003C/code>.\u003C/p>\n\u003Cp>Otro ejemplo común es \u003Ccode>console.log(..)\u003C/code> (¡y todos los demás métodos de \u003Ccode>console.*\u003C/code> !). Estos no están especificados en JS, pero debido a su utilidad universal, son definidos por prácticamente todos los entornos de JS, según un consenso aproximado.\u003C/p>\n\u003Cp>Entonces, \u003Ccode>alert(..)\u003C/code> y \u003Ccode>console.log(..)\u003C/code> no están definidos por JS. Pero \u003Cem>parecen\u003C/em> JS. Son funciones y métodos de objetos y siguen las reglas de sintaxis de JS. Los comportamientos detrás de ellos son controlados por el entorno que ejecuta el motor de JS, pero en la superficie definitivamente tienen que cumplir con JS para poder jugar en el patio de juegos de JS.\u003C/p>\n\u003Cp>La mayoría de las diferencias entre navegadores de las que la gente se queja con afirmaciones como “¡JS es tan inconsistente!” son en realidad debidas a diferencias en cómo funcionan esos comportamientos del entorno, no en cómo funciona el propio JS.\u003C/p>\n\u003Cp>Entonces, una llamada a \u003Ccode>alert(..)\u003C/code> \u003Cem>es\u003C/em> JS, pero \u003Ccode>alert\u003C/code> en sí mismo es realmente solo un invitado, no parte de la especificación oficial de JS.\u003C/p>\n\u003Ch3 id=\"no-siempre-es-js\">No siempre es JS\u003C/h3>\n\u003Cp>Usar la consola/REPL (Read-Evaluate-Print-Loop) en las Herramientas para Desarrolladores de tu navegador (o en Node) parece ser un entorno de JS bastante directo a primera vista. Pero en realidad no lo es.\u003C/p>\n\u003Cp>Las Herramientas para Desarrolladores son… herramientas para desarrolladores. Su propósito principal es hacer la vida más fácil para los desarrolladores. Priorizan la DX (Experiencia del Desarrollador). \u003Cem>No\u003C/em> es una meta de tales herramientas reflejar con precisión y purismo todas las sutilezas del comportamiento estricto de JS. Como tal, hay muchas peculiaridades que pueden actuar como “trampas” si estás tratando la consola como un entorno de JS \u003Cem>puro\u003C/em>.\u003C/p>\n\u003Cp>Esta conveniencia es algo bueno, ¡por cierto! Me alegra que las Herramientas para Desarrolladores faciliten la vida de los desarrolladores. Me alegra que tengamos encantos de UX agradables como el autocompletado de variables/propiedades, etc. Solo estoy señalando que no podemos ni debemos esperar que tales herramientas se adhieran \u003Cem>siempre\u003C/em> estrictamente a la manera en que se manejan los programas de JS, porque ese no es el propósito de estas herramientas.\u003C/p>\n\u003Cp>Dado que tales herramientas varían en comportamiento de un navegador a otro, y dado que cambian (a veces bastante frecuentemente), no voy a “codificar” específicamente detalles en este texto, asegurando así que el texto de este libro esté desactualizado rápidamente.\u003C/p>\n\u003Cp>Pero solo daré algunas pistas de ejemplos de peculiaridades que han sido verdaderas en varios momentos en diferentes entornos de consolas de JS, para reforzar mi punto acerca de no asumir el comportamiento nativo de JS mientras las usas:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Si una declaración \u003Ccode>var\u003C/code> o \u003Ccode>function\u003C/code> en el “ámbito global” superior de la consola realmente crea una variable global real (¡y una propiedad \u003Ccode>window\u003C/code> reflejada, y viceversa!).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Qué sucede con múltiples declaraciones \u003Ccode>let\u003C/code> y \u003Ccode>const\u003C/code> en el “ámbito global” superior.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Si \u003Ccode>\"use strict\";\u003C/code> en una entrada de una sola línea (presionar \u003Ccode>&#x3C;enter>\u003C/code> después) habilita el strict mode para el resto de esa sesión de consola, de la misma manera que lo haría en la primera línea de un archivo .js, y también si puedes usar \u003Ccode>\"use strict\";\u003C/code> más allá de la “primera línea” y aún así activar el strict mode para esa sesión.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cómo funciona el enlace predeterminado de \u003Ccode>this\u003C/code> en el modo no estricto para las llamadas de funciones, y si el “objeto global” utilizado contendrá las variables globales esperadas.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Cómo funciona el izado (consulte el Libro 2, \u003Cem>Scope &#x26; Closures\u003C/em>) en múltiples entradas de líneas.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>…varias otras\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>La consola del desarrollador no está tratando de fingir ser un compilador de JS que maneje tu código ingresado exactamente de la misma manera que el motor de JS maneja un archivo .js. Está tratando de facilitarte la entrada rápida de unas pocas líneas de código y ver los resultados de inmediato. Estos son casos de uso completamente diferentes, y como tal, es irrazonable esperar que una herramienta maneje ambos de manera equitativa.\u003C/p>\n\u003Cp>No confíes en el comportamiento que ves en una consola de desarrollador como que representa la semántica \u003Cem>exacta\u003C/em> de JS al pie de la letra; para eso, lee la especificación. En cambio, piensa en la consola como un entorno “amigable con JS”. Eso es útil por sí mismo.\u003C/p>\n\u003Ch2 id=\"muchas-caras\">Muchas Caras\u003C/h2>\n\u003Cp>El término “paradigma” en el contexto de lenguajes de programación se refiere a una mentalidad y enfoque amplio (casi universal) para estructurar el código. Dentro de un paradigma, hay una miríada de variaciones de estilo y forma que distinguen programas, incluyendo innumerables bibliotecas y marcos diferentes que dejan su firma única en cualquier código dado.\u003C/p>\n\u003Cp>Pero, sin importar cuál sea el estilo individual de un programa, las divisiones a gran escala en torno a los paradigmas casi siempre son evidentes a primera vista de cualquier programa.\u003C/p>\n\u003Cp>Las categorías típicas de código a nivel de paradigma incluyen estilo procedural, orientado a objetos (OO/clases) y funcional (FP):\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>El estilo procedural organiza el código en una progresión lineal de arriba hacia abajo a través de un conjunto predefinido de operaciones, generalmente recopiladas en unidades relacionadas llamadas procedimientos.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>El estilo OO organiza el código al reunir la lógica y los datos en unidades llamadas clases.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>El estilo FP organiza el código en funciones (cálculos puros en lugar de procedimientos) y las adaptaciones de esas funciones como valores.\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Los paradigmas no son ni correctos ni incorrectos. Son orientaciones que guían y moldean cómo los programadores abordan problemas y soluciones, cómo estructuran y mantienen su código.\u003C/p>\n\u003Cp>Algunos lenguajes están fuertemente inclinados hacia un paradigma en particular; por ejemplo, C es procedural, Java/C++ es casi totalmente orientado a clases, y Haskell es completamente funcional.\u003C/p>\n\u003Cp>Pero muchos lenguajes también admiten patrones de código que pueden provenir, e incluso combinarse, de diferentes paradigmas. Los llamados “lenguajes multi-paradigma” ofrecen flexibilidad máxima. En algunos casos, un solo programa incluso puede tener dos o más expresiones de estos paradigmas conviviendo uno al lado del otro.\u003C/p>\n\u003Cp>JS es definitivamente un lenguaje multi-paradigma. Puedes escribir código procedural, orientado a clases o en estilo FP, y puedes tomar esas decisiones línea por línea en lugar de estar obligado a elegir todo-o-nada.\u003C/p>\n\u003Ch2 id=\"hacia-atrás-y-hacia-adelante\">Hacia atrás y hacia adelante\u003C/h2>\n\u003Cp>Uno de los principios fundamentales que guía a JS es la preservación de la \u003Cem>compatibilidad hacia atrás\u003C/em>. Muchos se confunden con las implicaciones de este término y a menudo lo confunden con un término relacionado pero diferente: \u003Cem>compatibilidad hacia adelante\u003C/em>.\u003C/p>\n\u003Cp>Vamos a aclarar las cosas.\u003C/p>\n\u003Cp>La compatibilidad hacia atrás significa que, una vez que algo se acepta como código JS válido, no habrá un cambio futuro en el lenguaje que haga que ese código deje de ser válido. El código escrito en 1995, ¡por primitivo o limitado que fuera!, debería seguir funcionando hoy. Como a menudo proclaman los miembros de TC39, “¡no rompemos la web!”\u003C/p>\n\u003Cp>La idea es que los desarrolladores de JS pueden escribir código con la confianza de que su código no dejará de funcionar de manera impredecible porque se lance una actualización del navegador. Esto hace que la decisión de elegir JS para un programa sea una inversión más sabia y segura, durante años en el futuro.\u003C/p>\n\u003Cp>Esa “garantía” no es algo pequeño. Mantener la compatibilidad hacia atrás, extendida a lo largo de casi 25 años de la historia del lenguaje, crea una enorme carga y una serie de desafíos únicos. Sería difícil encontrar muchos otros ejemplos en informática de un compromiso tan firme con la compatibilidad hacia atrás.\u003C/p>\n\u003Cp>Los costos de adherirse a este principio no deben ser desestimados. Esto crea una barrera muy alta para incluir cambios o extensiones en el lenguaje; cualquier decisión se vuelve efectivamente permanente, con errores y todo. Una vez que está en JS, no se puede quitar porque podría romper programas, ¡incluso si realmente quisiéramos eliminarlo!\u003C/p>\n\u003Cp>Hay algunas pequeñas excepciones a esta regla. JS ha tenido algunos cambios incompatibles hacia atrás, pero TC39 es extremadamente cauteloso al hacerlo. Estudian el código existente en la web (a través de la recopilación de datos del navegador) para estimar el impacto de tales cambios, y los navegadores finalmente deciden y votan si están dispuestos a enfrentar las críticas de los usuarios por un cambio de muy pequeña escala frente a los beneficios de corregir o mejorar algún aspecto del lenguaje para muchos más sitios (y usuarios).\u003C/p>\n\u003Cp>Estos cambios son raros y casi siempre se dan en casos marginales de uso que es poco probable que se rompan de manera observable en muchos sitios.\u003C/p>\n\u003Cp>Comparado con la \u003Cem>compatibilidad hacia atrás\u003C/em>, su contraparte, la \u003Cem>compatibilidad hacia adelante\u003C/em>. Ser hacia adelante-compatible significa que incluir una nueva adición al lenguaje en un programa no haría que ese programa se rompiera si se ejecutara en un motor JS más antiguo. \u003Cstrong>JS no es compatible hacia adelante\u003C/strong>, a pesar de que muchos lo desean e incluso creen incorrectamente en el mito de que lo es.\u003C/p>\n\u003Cp>HTML y CSS, en cambio, son hacia adelante compatibles pero no hacia atrás. Si desenterrases algo de HTML o CSS escrito en 1995, es completamente posible que no funcione (o funcione de la misma manera) hoy. Pero, si usas una nueva función de 2019 en un navegador de 2010, la página no está “rota” — el CSS/HTML no reconocido se pasa por alto, mientras que el resto de la CSS/HTML se procesaría según corresponda.\u003C/p>\n\u003Cp>Puede parecer deseable incluir la compatibilidad hacia adelante en el diseño de lenguajes de programación, pero generalmente es impráctico hacerlo. La marcación (HTML) o el estilo (CSS) son de naturaleza declarativa, por lo que es mucho más fácil “pasar por alto” declaraciones no reconocidas con un impacto mínimo en otras declaraciones reconocidas.\u003C/p>\n\u003Cp>Pero el caos y la no determinismo se producirían si un motor de lenguaje de programación selectivamente omitiera declaraciones (¡incluso expresiones!) que no entendiera, ya que es imposible asegurar que una parte posterior del programa no esperara que la parte omitida haya sido procesada.\u003C/p>\n\u003Cp>Aunque JavaScript no es, ni puede ser, compatible hacia adelante, es fundamental reconocer la compatibilidad hacia atrás de JavaScript, incluidos los beneficios duraderos para la web y las limitaciones y dificultades que impone a JavaScript como resultado.\u003C/p>\n\u003Ch3 id=\"saltando-las-brechas\">Saltando las brechas\u003C/h3>\n\u003Cp>Dado que JavaScript no es compatible hacia adelante, significa que siempre existe el potencial de una brecha entre el código que puedes escribir que es válido en JavaScript y el motor más antiguo que tu sitio o aplicación necesita admitir. Si ejecutas un programa que utiliza una característica de ES2019 en un motor de 2016, es muy probable que veas que el programa se rompe y falla.\u003C/p>\n\u003Cp>Si la característica es una nueva sintaxis, el programa generalmente fallará por completo al compilar y ejecutarse, generalmente arrojando un error de sintaxis. Si la característica es una API (como \u003Ccode>Object.is(..)\u003C/code> en ES6), el programa puede ejecutarse hasta cierto punto, pero luego arrojará una excepción en tiempo de ejecución y se detendrá una vez que encuentre la referencia a la API desconocida.\u003C/p>\n\u003Cp>¿Significa esto que los desarrolladores de JavaScript siempre deben quedarse atrás en el ritmo del progreso, utilizando solo código que esté en la vanguardia de los entornos de motor JS más antiguos que necesitan admitir? ¡No!\u003C/p>\n\u003Cp>Pero sí significa que los desarrolladores de JavaScript deben tener un cuidado especial para abordar esta brecha.\u003C/p>\n\u003Cp>Para la nueva sintaxis e incompatible, la solución es la transpilación. La transpilación es un término inventado por la comunidad para describir el uso de una herramienta para convertir el código fuente de un programa de una forma a otra (pero aún como código fuente textual). Por lo general, los problemas de compatibilidad hacia adelante relacionados con la sintaxis se resuelven utilizando un transpilador (el más común siendo Babel (\u003Ca href=\"https://babeljs.io\">https://babeljs.io\u003C/a>)) para convertir esa nueva versión de sintaxis de JavaScript a una sintaxis más antigua equivalente.\u003C/p>\n\u003Cp>Por ejemplo, un desarrollador puede escribir un fragmento de código como:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (something) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Así es como se vería el código en el árbol de código fuente de esa aplicación. Pero al producir el archivo (o archivos) para implementar en el sitio web público, el transpilador Babel podría convertir ese código para que se vea así:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x$0, x$1;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (something) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x$0 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x$0);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    x$1 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(x$1);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>El fragmento original dependía de \u003Ccode>let\u003C/code> para crear variables \u003Ccode>x\u003C/code> con ámbito de bloque en las cláusulas \u003Ccode>if\u003C/code> y \u003Ccode>else\u003C/code>, que no interferían entre sí. Un programa equivalente (con mínimas modificaciones) que Babel puede producir simplemente elige nombrar dos variables diferentes con nombres únicos, logrando el mismo resultado de no interferencia.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">La palabra clave \u003Ccode>let\u003C/code> se agregó en ES6 (en 2015). El ejemplo anterior de transpilación solo sería necesario aplicarlo si una aplicación necesita ejecutarse en un entorno JS compatible con versiones anteriores a ES6. El ejemplo aquí es solo para simplificar la ilustración. Cuando ES6 era nuevo, la necesidad de esa transpilación era bastante común, pero en 2020 es mucho menos común necesitar admitir entornos pre-ES6. El “objetivo” utilizado para la transpilación es, por lo tanto, una ventana deslizante que se desplaza hacia arriba solo cuando se toman decisiones para que un sitio/aplicación deje de admitir algún navegador/motor antiguo.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Puede preguntarse: ¿por qué molestarse en usar una herramienta para convertir desde una versión de sintaxis más nueva a una más antigua? ¿No podríamos simplemente escribir las dos variables y evitar el uso de la palabra clave \u003Ccode>let\u003C/code>? La razón es que se recomienda encarecidamente que los desarrolladores utilicen la última versión de JS para que su código sea limpio y comunique sus ideas de manera más efectiva.\u003C/p>\n\u003Cp>Los desarrolladores deben centrarse en escribir las formas de sintaxis nuevas y limpias, y permitir que las herramientas se encarguen de producir una versión compatible con el futuro de ese código que sea adecuada para implementar y ejecutar en los entornos de motor JS admitidos más antiguos.\u003C/p>\n\u003Ch3 id=\"llenando-los-vacíos\">Llenando los vacíos\u003C/h3>\n\u003Cp>Si el problema de la compatibilidad futura no está relacionado con la nueva sintaxis, sino con un método de API faltante que se agregó recientemente, la solución más común es proporcionar una definición para ese método de API faltante que funcione como si el entorno más antiguo ya lo hubiera tenido definido de forma nativa. Este patrón se llama polyfill (también conocido como “shim”).\u003C/p>\n\u003Cp>Considera este código:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// getSomeRecords() nos regresa una promesa para algunos\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// datos que recuperará\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> getSomeRecords\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// mostrar el spinner UI mientras obtenemos los datos\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">startSpinner\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">pr\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(renderRecords)   \u003C/span>\u003Cspan style=\"color:#6A737D\">// renderizar si tiene éxito\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(showError)      \u003C/span>\u003Cspan style=\"color:#6A737D\">// mostrar un error si no\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finally\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(hideSpinner)  \u003C/span>\u003Cspan style=\"color:#6A737D\">// siempre oculta el spinner\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Este código utiliza una característica de ES2019, el método \u003Ccode>finally(..)\u003C/code> en el prototipo de la promesa. Si este código se usara en un entorno anterior a ES2019, el método \u003Ccode>finally(..)\u003C/code> no existiría y se produciría un error.\u003C/p>\n\u003Cp>Un polyfill para \u003Ccode>finally(..)\u003C/code> en entornos previos a ES2019 podría verse así:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#79B8FF\">Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">prototype\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.finally) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">prototype\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">finally\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            function\u003C/span>\u003Cspan style=\"color:#B392F0\"> t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">v\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">( \u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            function\u003C/span>\u003Cspan style=\"color:#B392F0\"> c\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">e\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Promise\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">resolve\u003C/span>\u003Cspan style=\"color:#E1E4E8\">( \u003C/span>\u003Cspan style=\"color:#B392F0\">fn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    .\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> t\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        throw\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> e;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">ADVERTENCIA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Esta es solo una ilustración simple de un polyfill básico (que no cumple completamente con las especificaciones) para \u003Ccode>finally(..)\u003C/code>. No uses este polyfill en tu código; siempre utiliza un polyfill oficial y robusto cuando sea posible, como la colección de polyfills/shims en ES-Shim.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>La declaración \u003Ccode>if\u003C/code> protege la definición del polyfill al evitar que se ejecute en cualquier entorno donde el motor JS ya haya definido ese método. En entornos más antiguos, el polyfill se define, pero en entornos más nuevos, la declaración \u003Ccode>if\u003C/code> se salta silenciosamente.\u003C/p>\n\u003Cp>Los transpiladores como Babel generalmente detectan qué polyfills necesita tu código y los proporcionan automáticamente. Pero ocasionalmente puede ser necesario incluirlos/definirlos explícitamente, lo cual funciona de manera similar al fragmento que acabamos de ver.\u003C/p>\n\u003Cp>Siempre escribe código utilizando las características más apropiadas para comunicar sus ideas e intenciones de manera efectiva. En general, esto significa usar la versión más reciente y estable de JS. Evita afectar negativamente la legibilidad del código tratando de ajustar manualmente las lagunas de sintaxis/API. ¡Para eso están las herramientas!\u003C/p>\n\u003Cp>La transpilación y el polyfilling son dos técnicas altamente efectivas para abordar la brecha entre el código que utiliza las características más recientes y estables del lenguaje y los antiguos entornos que un sitio o aplicación aún necesita admitir. Dado que JS no dejará de mejorar, la brecha nunca desaparecerá. Ambas técnicas deberían ser adoptadas como parte estándar de la cadena de producción de cada proyecto de JS en el futuro.\u003C/p>\n\u003Ch2 id=\"qué-hay-en-una-interpretación\">¿Qué hay en una interpretación?\u003C/h2>\n\u003Cp>Durante mucho tiempo, ha existido un debate sobre si el código escrito en JS es un script interpretado o un programa compilado. La opinión mayoritaria parece ser que JS es un lenguaje interpretado (de scripting). Sin embargo, la verdad es más complicada que eso.\u003C/p>\n\u003Cp>Durante gran parte de la historia de los lenguajes de programación, los lenguajes “interpretados” y los lenguajes “de scripting” han sido considerados inferiores en comparación con sus contrapartes compiladas. Las razones para esta animosidad son numerosas, incluyendo la percepción de una falta de optimización de rendimiento, así como la aversión a ciertas características del lenguaje, como el uso de tipos dinámicos en lugar de los “más maduros” lenguajes de tipos estáticos.\u003C/p>\n\u003Cp>Los lenguajes considerados “compilados” generalmente producen una representación (binaria) portátil del programa que se distribuye para su ejecución posterior. Dado que no observamos realmente ese tipo de modelo con JS (distribuimos el código fuente, no la forma binaria), muchos afirman que esto descalifica a JS de esa categoría. En realidad, el modelo de distribución de la forma “ejecutable” de un programa se ha vuelto drásticamente más variado y también menos relevante en las últimas décadas; para la pregunta en cuestión, ya no importa tanto la forma en que se distribuye un programa.\u003C/p>\n\u003Cp>Estas afirmaciones y críticas desinformadas deben ser dejadas de lado. La verdadera razón por la que importa tener una imagen clara de si JS es interpretado o compilado se relaciona con la forma en que se manejan los errores.\u003C/p>\n\u003Cp>Históricamente, los lenguajes scriptados o interpretados se ejecutaban generalmente de arriba hacia abajo y línea por línea; por lo general, no hay un pase inicial a través del programa para procesarlo antes de que comience la ejecución (ver Figura 1).\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig1.png\" width=\"650\" alt=\"Interpretar un script para ejecutarlo\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 1: Ejecución Interpretada/Scripted\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>En lenguajes scriptados o interpretados, un error en la línea 5 de un programa no se descubrirá hasta que las líneas 1 a 4 ya se hayan ejecutado. Es importante destacar que el error en la línea 5 puede deberse a una condición en tiempo de ejecución, como algún valor o variable que tiene un valor inadecuado para una operación, o puede deberse a una declaración o comando mal formado en esa línea. Dependiendo del contexto, posponer el manejo de errores hasta la línea en la que ocurre el error puede ser un efecto deseable o indeseable.\u003C/p>\n\u003Cp>Comparado con lenguajes que sí pasan por una etapa de procesamiento (normalmente llamada análisis) antes de que ocurra cualquier ejecución, como se ilustra en la Figura 2:\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig2.png\" width=\"650\" alt=\"Parsear, compilar y ejecutar un programa\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 2: Parseo + Compilación + Ejecución\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>En este modelo de procesamiento, un comando no válido (como una sintaxis incorrecta) en la línea 5 se detectaría durante la fase de análisis, antes de que comience cualquier ejecución, y ninguno de los programas se ejecutaría. Para capturar errores de sintaxis (o errores “estáticos”), generalmente es preferible conocerlos antes de cualquier ejecución parcial condenada.\u003C/p>\n\u003Cp>Entonces, ¿qué tienen en común los lenguajes “parseados” con los lenguajes “compilados”? Primero, todos los lenguajes compilados son parseados. Por lo tanto, un lenguaje parseado está bastante avanzado en el camino hacia ser compilado. En la teoría clásica de la compilación, el último paso restante después del análisis es la generación de código: producir una forma ejecutable.\u003C/p>\n\u003Cp>Una vez que se ha parseado completamente un programa fuente, es muy común que su ejecución posterior incluya, de alguna forma, una traducción desde la forma parseada del programa, generalmente llamada Árbol de Sintaxis Abstracta (AST), hasta esa forma ejecutable.\u003C/p>\n\u003Cp>En otras palabras, los lenguajes parseados suelen realizar la generación de código antes de la ejecución, por lo que no es tan exagerado decir que, en espíritu, son lenguajes compilados.\u003C/p>\n\u003Cp>El código fuente de JS se parsea antes de ejecutarse. La especificación lo requiere, porque exige “errores tempranos” —errores estáticamente determinados en el código, como un nombre de parámetro duplicado— que se informen antes de que el código comience a ejecutarse. Esos errores no se pueden reconocer sin que el código haya sido parseado.\u003C/p>\n\u003Cp>Entonces, \u003Cstrong>JS es un lenguaje parseado\u003C/strong>, pero ¿está compilado?\u003C/p>\n\u003Cp>La respuesta está más cerca del sí que del no. El JS parseado se convierte en una forma optimizada (binaria), y ese “código” se ejecuta posteriormente (Figura 2); el motor no suele cambiar a un modo de ejecución línea por línea (como en la Figura 1) después de haber terminado todo el trabajo duro de análisis, ya que eso sería altamente ineficiente.\u003C/p>\n\u003Cp>Para ser específicos, esta “compilación” produce un código binario (de alguna manera), que luego se entrega a la “máquina virtual de JS” para ejecutarlo. A algunos les gusta decir que esta MV está “interpretando” el código binario. Pero eso significaría que Java, y una docena de otros lenguajes impulsados por JVM, por cierto, se interpretan en lugar de compilarse. Por supuesto, eso contradice la afirmación típica de que Java/etc. son lenguajes compilados.\u003C/p>\n\u003Cp>Curiosamente, aunque Java y JavaScript son lenguajes muy diferentes, la pregunta de interpretación/compilación está bastante relacionada entre ellos.\u003C/p>\n\u003Cp>Otra complicación es que los motores de JS pueden emplear múltiples pasadas de procesamiento/optimización JIT (Just-In-Time) en el código generado (post análisis), que nuevamente podría etiquetarse razonablemente como “compilación” o “interpretación” dependiendo de la perspectiva. De hecho, es una situación fantásticamente compleja bajo el capó de un motor de JS.\u003C/p>\n\u003Cp>Entonces, ¿en qué se reducen estos detalles minuciosos? Retrocede y considera todo el flujo de un programa fuente de JS:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Después de que un programa sale del editor de un desarrollador, se transpila con Babel, luego se empaca con Webpack (y tal vez media docena de otros procesos de construcción), luego se entrega en esa forma muy diferente a un motor de JS.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>El motor de JS parsea el código a un AST.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Luego, el motor convierte ese AST en una especie de código binario, una representación intermedia binaria (IR), que luego es refinada/convertida aún más por el compilador JIT optimizado.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Finalmente, la MV de JS ejecuta el programa.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>Para visualizar esos pasos, nuevamente:\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig3.png\" width=\"650\" alt=\"Pasos de compilación y ejecución de JS\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 3: Parseando, Compilando, y Ejecutando JS\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>¿JS se maneja más como un script interpretado, línea por línea, como en la Figura 1, o se maneja más como un lenguaje compilado que se procesa en uno o varios pasos primero, antes de la ejecución (como en las Figuras 2 y 3)?\u003C/p>\n\u003Cp>Creo que está claro que en espíritu, si no en la práctica, \u003Cstrong>JS es un lenguaje compilado\u003C/strong>.\u003C/p>\n\u003Cp>Y nuevamente, la razón por la que esto importa es que, como JS está compilado, se nos informa de errores estáticos (como sintaxis malformada) antes de que se ejecute nuestro código. ¡Ese es un modelo de interacción sustancialmente diferente al que obtenemos con los programas de “scripting” tradicionales y podría argumentarse que es más útil!\u003C/p>\n\u003Ch3 id=\"web-assembly-wasm\">Web Assembly (WASM)\u003C/h3>\n\u003Cp>Una preocupación dominante que ha impulsado gran parte de la evolución de JS es el rendimiento, tanto en cuanto a la rapidez con la que JS puede ser parseado/compilado como a la velocidad con la que se puede ejecutar ese código compilado.\u003C/p>\n\u003Cp>En 2013, ingenieros de Mozilla Firefox demostraron la portabilidad del motor de juegos Unreal 3 desde C a JS. La capacidad de que este código se ejecutara en un motor JS del navegador a una velocidad completa de 60 fps se basaba en un conjunto de optimizaciones que el motor JS podía realizar específicamente porque la versión JS del código del motor Unreal utilizaba un estilo de código que favorecía a un subconjunto del lenguaje JS, llamado “ASM.js”.\u003C/p>\n\u003Cp>Este subconjunto es JS válido escrito de maneras que son algo inusuales en la programación normal, pero que señalan cierta información de tipado importante al motor que le permiten realizar optimizaciones clave. ASM.js se introdujo como una forma de abordar las presiones sobre el rendimiento en tiempo de ejecución de JS.\u003C/p>\n\u003Cp>Pero es importante destacar que ASM.js nunca se pretendió que fuera código escrito por desarrolladores, sino más bien una representación de un programa que se había transpilado desde otro lenguaje (como C), donde estas “anotaciones” de tipado se insertaron automáticamente mediante las herramientas.\u003C/p>\n\u003Cp>Varios años después de que ASM.js demostrara la validez de versiones de programas creadas por herramientas que pueden procesarse de manera más eficiente en el motor JS, otro grupo de ingenieros (también, inicialmente, de Mozilla) lanzó WebAssembly (WASM).\u003C/p>\n\u003Cp>WASM es similar a ASM.js en el sentido de que su intención original era proporcionar un camino para que los programas no JS (C, etc.) se convirtieran en una forma que pudiera ejecutarse en el motor JS. A diferencia de ASM.js, WASM eligió además sortear algunos de los retrasos inherentes en el análisis/compilación de JS antes de que un programa pueda ejecutarse, representando el programa en una forma que es completamente diferente a JS.\u003C/p>\n\u003Cp>WASM es un formato de representación más parecido a Assembly (de ahí su nombre) que puede ser procesado por un motor JS al omitir el análisis/compilación que normalmente realiza el motor JS. El análisis/compilación de un programa dirigido a WASM se realiza antes de tiempo (AOT); lo que se distribuye es un programa binario empaquetado listo para que el motor JS lo ejecute con un procesamiento mínimo.\u003C/p>\n\u003Cp>Una motivación inicial para WASM fue claramente la mejora potencial de rendimiento. Aunque eso sigue siendo un enfoque, WASM también está motivado por el deseo de llevar más paridad a las lenguas no JS a la plataforma web. Por ejemplo, si un lenguaje como Go admite la programación con hilos, pero JS (el lenguaje) no lo hace, WASM ofrece la posibilidad de que dicho programa Go se convierta a una forma que el motor JS pueda entender, sin necesidad de una función de hilos en el propio lenguaje JS.\u003C/p>\n\u003Cp>En otras palabras, WASM alivia la presión de agregar características a JS que están mayormente/exclusivamente destinadas a ser utilizadas por programas transpilados de otros lenguajes. Eso significa que el desarrollo de características de JS puede ser evaluado (por TC39) sin verse sesgado por intereses/demandas en otros ecosistemas de lenguajes, al tiempo que permite que esos lenguajes tengan una vía viable hacia la web.\u003C/p>\n\u003Cp>Otra perspectiva sobre WASM que está surgiendo es, interesantemente, ni siquiera está directamente relacionada con la web (W). WASM está evolucionando para convertirse en una especie de máquina virtual (VM) multiplataforma, donde los programas pueden compilarse una vez y ejecutarse en una variedad de entornos de sistemas diferentes.\u003C/p>\n\u003Cp>Entonces, WASM no es solo para la web, y WASM tampoco es JS. Irónicamente, aunque WASM se ejecuta en el motor JS, el lenguaje JS es uno de los menos adecuados para generar programas WASM, porque WASM depende en gran medida de información de tipado estático. Incluso TypeScript (TS), ostensiblemente JS + tipos estáticos, no es del todo adecuado (tal como está) para transpilarse a WASM, aunque variantes de lenguaje como AssemblyScript están tratando de cerrar la brecha entre JS/TS y WASM.\u003C/p>\n\u003Cp>Este libro no trata sobre WASM, así que no dedicaré mucho más tiempo a discutirlo, excepto para hacer un último punto. \u003Cem>Algunas\u003C/em> personas han sugerido que WASM apunta a un futuro en el que JS sea excluido o minimizado en la web. Estas personas a menudo albergan sentimientos negativos sobre JS y quieren que algún otro lenguaje, ¡cualquier otro lenguaje!, lo reemplace. Dado que WASM permite que otros lenguajes se ejecuten en el motor JS, en principio, esto no es un cuento de hadas completamente fantástico.\u003C/p>\n\u003Cp>Pero permíteme decir simplemente: WASM no reemplazará a JS. WASM aumenta significativamente lo que la web (incluido JS) puede lograr. Eso es algo excelente, totalmente independiente de si algunas personas lo usarán como una salida para no tener que escribir JS.\u003C/p>\n\u003Ch2 id=\"estrictamente-hablando\">E\u003Cem>strict\u003C/em>amente hablando\u003C/h2>\n\u003Cp>En 2009, con el lanzamiento de ES5, JS añadió el \u003Cem>strict mode\u003C/em> como un mecanismo opcional para fomentar la creación de programas JS de mejor calidad.\u003C/p>\n\u003Cp>Los beneficios del strict mode superan con creces los costos, pero las viejas costumbres son difíciles de cambiar y la inercia de las bases de código existentes (también conocidas como bases de código “heredadas”) es realmente difícil de modificar. Lamentablemente, más de 10 años después, la \u003Cem>opcionabilidad\u003C/em> del strict mode significa que no es necesariamente la configuración predeterminada para los programadores JS.\u003C/p>\n\u003Cp>¿Por qué el strict mode? El strict mode no debería ser considerado como una restricción de lo que no se puede hacer, sino más bien como una guía sobre la mejor manera de hacer las cosas para que el motor JS tenga la mejor oportunidad de optimizar y ejecutar eficientemente el código. La mayoría de los códigos JS son trabajados por equipos de desarrolladores, por lo que la estrictitud del \u003Cem>strict\u003C/em> mode (¡junto con herramientas como linters!) a menudo ayuda en la colaboración en el código al evitar algunos de los errores más problemáticos que se pasan por alto en el modo no estricto.\u003C/p>\n\u003Cp>La mayoría de los controles del strict mode están en forma de \u003Cem>errores tempranos\u003C/em>, lo que significa errores que no son estrictamente errores de sintaxis, pero que aún se lanzan en tiempo de compilación (antes de que se ejecute el código). Por ejemplo, el strict mode prohíbe nombrar dos parámetros de función iguales y genera un error temprano. Otros controles del strict mode solo se observan en tiempo de ejecución, como cómo \u003Ccode>this\u003C/code> se establece en \u003Ccode>undefined\u003C/code> en lugar del objeto global.\u003C/p>\n\u003Cp>En lugar de luchar y discutir con el strict mode, como un niño que simplemente quiere desafiar lo que le dicen sus padres que no haga, la mejor mentalidad es que el strict mode es como un linter que te recuerda cómo \u003Cem>debería\u003C/em> escribirse JS para tener la mejor calidad y la mejor oportunidad de rendimiento. Si te encuentras sintiéndote limitado, tratando de evitar el strict mode, eso debería ser una señal de advertencia clara de que necesitas retroceder y reconsiderar todo el enfoque.\u003C/p>\n\u003Cp>El strict mode se activa por archivo con una pragma especial (nada permitido antes de ella excepto comentarios/espacios en blanco):\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// sólo se permiten espacios en blanco y comentarios\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// antes del uso de use-strict\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"use strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// el resto del archivo se ejecuta en strict mode\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">ADVERTENCIA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Algo importante a tener en cuenta es que incluso un \u003Ccode>;\u003C/code> solitario que aparece justo antes de la pragma del strict mode hará que la pragma sea ineficaz; no se lanzarán errores porque es válido tener una expresión literal de cadena en una posición de declaración, ¡pero \u003Cem>tampoco\u003C/em> se activará silenciosamente el strict mode!\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>El strict mode también se puede activar alternativamente por ámbito de función, con exactamente las mismas reglas sobre su entorno:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> someOperations\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Los espacios en blanco y los comentarios están bien aquí\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"use strict\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // todo este código se ejecutará en strict mode\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>De manera interesante, si un archivo tiene activado el strict mode, se prohíben los pragmas de strict mode a nivel de función. Por lo tanto, debes elegir uno u otro.\u003C/p>\n\u003Cp>La \u003Cstrong>única\u003C/strong> razón válida para utilizar un enfoque por función para el strict mode es cuando estás convirtiendo un archivo de programa existente que no está en strict mode y necesitas realizar los cambios poco a poco con el tiempo. De lo contrario, es mucho mejor activar el strict mode para todo el archivo/programa.\u003C/p>\n\u003Cp>Muchos se han preguntado si habrá algún momento en que JS haga del strict mode la opción predeterminada. La respuesta es casi seguramente no. Como discutimos anteriormente en cuanto a la compatibilidad con versiones anteriores, si una actualización del motor de JS comenzara a asumir que el código está en strict mode incluso si no está marcado como tal, es posible que este código se rompa como resultado de los controles del strict mode.\u003C/p>\n\u003Cp>Sin embargo, hay algunos factores que reducen el impacto futuro de esta “oscuridad” no predeterminada del strict mode.\u003C/p>\n\u003Cp>En primer lugar, prácticamente todo el código transpilado termina en strict mode incluso si el código fuente original no está escrito de esa manera. La mayoría del código JS en producción ha sido transpilado, lo que significa que la mayoría del código JS ya se adhiere al strict mode. Es posible deshacer esa suposición, pero realmente debes esforzarte por hacerlo, por lo que es muy poco probable.\u003C/p>\n\u003Cp>Además, está ocurriendo un cambio importante hacia que más/mayoría del nuevo código JS se escriba utilizando el formato de módulo ES6. Los módulos ES6 asumen el strict mode, por lo que todo el código en dichos archivos se establece automáticamente en el strict mode.\u003C/p>\n\u003Cp>En conjunto, el strict mode es en gran medida la opción predeterminada de facto, aunque técnicamente no lo sea.\u003C/p>\n\u003Ch2 id=\"definido\">Definido\u003C/h2>\n\u003Cp>JS es una implementación del estándar ECMAScript (versión ES2019 en el momento de escribir esto), que está guiado por el comité TC39 y alojado por ECMA. Se ejecuta en navegadores y otros entornos de JS, como Node.js.\u003C/p>\n\u003Cp>JS es un lenguaje multiparadigma, lo que significa que la sintaxis y las capacidades permiten a un desarrollador combinar y mezclar (¡y doblar y remodelar!) conceptos de varios paradigmas importantes, como el procedural, orientado a objetos (OO/clases) y funcional (FP).\u003C/p>\n\u003Cp>JS es un lenguaje compilado, lo que significa que las herramientas (incluido el motor de JS) procesan y verifican un programa (¡informando de cualquier error!) antes de que se ejecute.\u003C/p>\n\u003Cp>Con nuestro lenguaje ahora \u003Cem>definido\u003C/em>, comencemos a conocer sus detalles y peculiaridades.\u003C/p>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-specapb\">\n\u003Cp>ECMAScript 2019 Language Specification, Appendix B: Additional ECMAScript Features for Web Browsers, \u003Ca href=\"https://www.ecma-international.org/ecma-262/10.0/#sec-additional-ecmascript-features-for-web-browsers\">https://www.ecma-international.org/ecma-262/10.0/#sec-additional-ecmascript-features-for-web-browsers\u003C/a> (la última versión disponible en el momento de escribir esto en enero de 2020) \u003Ca href=\"#user-content-fnref-specapb\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":1461,"localImagePaths":1505,"remoteImagePaths":1506,"frontmatter":1507,"imagePaths":1510},[1462,1465,1468,1471,1474,1477,1480,1483,1486,1489,1492,1495,1498,1501,1504],{"depth":76,"slug":1463,"text":1464},"sobre-este-libro","Sobre Este Libro",{"depth":76,"slug":1466,"text":1467},"qué-significa-ese-nombre","¿Qué significa ese nombre?",{"depth":76,"slug":1469,"text":1470},"especificación-del-lenguaje","Especificación del Lenguaje.",{"depth":211,"slug":1472,"text":1473},"la-web-lo-gobierna-todo-js","La Web Lo Gobierna Todo (JS)",{"depth":211,"slug":1475,"text":1476},"no-todo-js-web","No Todo JS (Web)…",{"depth":211,"slug":1478,"text":1479},"no-siempre-es-js","No siempre es JS",{"depth":76,"slug":1481,"text":1482},"muchas-caras","Muchas Caras",{"depth":76,"slug":1484,"text":1485},"hacia-atrás-y-hacia-adelante","Hacia atrás y hacia adelante",{"depth":211,"slug":1487,"text":1488},"saltando-las-brechas","Saltando las brechas",{"depth":211,"slug":1490,"text":1491},"llenando-los-vacíos","Llenando los vacíos",{"depth":76,"slug":1493,"text":1494},"qué-hay-en-una-interpretación","¿Qué hay en una interpretación?",{"depth":211,"slug":1496,"text":1497},"web-assembly-wasm","Web Assembly (WASM)",{"depth":76,"slug":1499,"text":1500},"estrictamente-hablando","Estrictamente hablando",{"depth":76,"slug":1502,"text":1503},"definido","Definido",{"depth":76,"slug":218,"text":219},[],[],{"rutas":1508,"title":1452,"description":16,"pubDate":151,"updatedDate":151,"link":1509,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/ch1",[],"libros/you-dont-know-js-yet/get-started/ch1.md","libros/you-dont-know-js-yet/get-started/ch3",{"id":1512,"data":1514,"body":1519,"filePath":1520,"digest":1521,"rendered":1522,"legacyId":1559},{"rutas":1515,"title":1516,"description":16,"lang":17,"dir":18,"pubDate":1517,"updatedDate":1518},[804],"Chapter 3: Digging to the Roots of JS",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"If you've read Chapters 1 and 2, and taken the time to digest and percolate, you're hopefully starting to *get* JS a little more. If you skipped/skimmed them (especially Chapter 2), I recommend going back to spend some more time with that material.\r\n\r\nIn Chapter 2, we surveyed syntax, patterns, and behaviors at a high level. In this chapter, our attention shifts to some of the lower-level root characteristics of JS that underpin virtually every line of code we write.\r\n\r\nBe aware: this chapter digs much deeper than you're likely used to thinking about a programming language. My goal is to help you appreciate the core of how JS works, what makes it tick. This chapter should begin to answer some of the \"Why?\" questions that may be cropping up as you explore JS. However, this material is still not an exhaustive exposition of the language; that's what the rest of the book series is for! Our goal here is still just to *get started*, and become more comfortable with, the *feel* of JS, how it ebbs and flows.\r\n\r\nDon't run so quickly through this material that you get lost in the weeds. As I've said a dozen times already, **take your time**. Even still, you'll probably finish this chapter with remaining questions. That's OK, because there's a whole book series ahead of you to keep exploring!\r\n\r\n## Iteration\r\n\r\nSince programs are essentially built to process data (and make decisions on that data), the patterns used to step through the data have a big impact on the program's readability.\r\n\r\nThe iterator pattern has been around for decades, and suggests a \"standardized\" approach to consuming data from a source one *chunk* at a time. The idea is that it's more common and helpful to iterate the data source—to progressively handle the collection of data by processing the first part, then the next, and so on, rather than handling the entire set all at once.\r\n\r\nImagine a data structure that represents a relational database `SELECT` query, which typically organizes the results as rows. If this query had only one or a couple of rows, you could handle the entire result set at once, and assign each row to a local variable, and perform whatever operations on that data that were appropriate.\r\n\r\nBut if the query has 100 or 1,000 (or more!) rows, you'll need iterative processing to deal with this data (typically, a loop).\r\n\r\nThe iterator pattern defines a data structure called an \"iterator\" that has a reference to an underlying data source (like the query result rows), which exposes a method like `next()`. Calling `next()` returns the next piece of data (i.e., a \"record\" or \"row\" from a database query).\r\n\r\nYou don't always know how many pieces of data that you will need to iterate through, so the pattern typically indicates completion by some special value or exception once you iterate through the entire set and *go past the end*.\r\n\r\nThe importance of the iterator pattern is in adhering to a *standard* way of processing data iteratively, which creates cleaner and easier to understand code, as opposed to having every data structure/source define its own custom way of handling its data.\r\n\r\nAfter many years of various JS community efforts around mutually agreed-upon iteration techniques, ES6 standardized a specific protocol for the iterator pattern directly in the language. The protocol defines a `next()` method whose return is an object called an *iterator result*; the object has `value` and `done` properties, where `done` is a boolean that is `false` until the iteration over the underlying data source is complete.\r\n\r\n### Consuming Iterators\r\n\r\nWith the ES6 iteration protocol in place, it's workable to consume a data source one value at a time, checking after each `next()` call for `done` to be `true` to stop the iteration. But this approach is rather manual, so ES6 also included several mechanisms (syntax and APIs) for standardized consumption of these iterators.\r\n\r\nOne such mechanism is the `for..of` loop:\r\n\r\n```js\r\n// given an iterator of some data source:\r\nvar it = /* .. */;\r\n\r\n// loop over its results one at a time\r\nfor (let val of it) {\r\n    console.log(`Iterator value: ${ val }`);\r\n}\r\n// Iterator value: ..\r\n// Iterator value: ..\r\n// ..\r\n```\r\n\r\n| NOTE: |\r\n| :--- |\r\n| We'll omit the manual loop equivalent here, but it's definitely less readable than the `for..of` loop! |\r\n\r\nAnother mechanism that's often used for consuming iterators is the `...` operator. This operator actually has two symmetrical forms: *spread* and *rest* (or *gather*, as I prefer). The *spread* form is an iterator-consumer.\r\n\r\nTo *spread* an iterator, you have to have *something* to spread it into. There are two possibilities in JS: an array or an argument list for a function call.\r\n\r\nAn array spread:\r\n\r\n```js\r\n// spread an iterator into an array,\r\n// with each iterated value occupying\r\n// an array element position.\r\nvar vals = [ ...it ];\r\n```\r\n\r\nA function call spread:\r\n\r\n```js\r\n// spread an iterator into a function,\r\n// call with each iterated value\r\n// occupying an argument position.\r\ndoSomethingUseful( ...it );\r\n```\r\n\r\nIn both cases, the iterator-spread form of `...` follows the iterator-consumption protocol (the same as the `for..of` loop) to retrieve all available values from an iterator and place (aka, spread) them into the receiving context (array, argument list).\r\n\r\n### Iterables\r\n\r\nThe iterator-consumption protocol is technically defined for consuming *iterables*; an iterable is a value that can be iterated over.\r\n\r\nThe protocol automatically creates an iterator instance from an iterable, and consumes *just that iterator instance* to its completion. This means a single iterable could be consumed more than once; each time, a new iterator instance would be created and used.\r\n\r\nSo where do we find iterables?\r\n\r\nES6 defined the basic data structure/collection types in JS as iterables. This includes strings, arrays, maps, sets, and others.\r\n\r\nConsider:\r\n\r\n```js\r\n// an array is an iterable\r\nvar arr = [ 10, 20, 30 ];\r\n\r\nfor (let val of arr) {\r\n    console.log(`Array value: ${ val }`);\r\n}\r\n// Array value: 10\r\n// Array value: 20\r\n// Array value: 30\r\n```\r\n\r\nSince arrays are iterables, we can shallow-copy an array using iterator consumption via the `...` spread operator:\r\n\r\n```js\r\nvar arrCopy = [ ...arr ];\r\n```\r\n\r\nWe can also iterate the characters in a string one at a time:\r\n\r\n```js\r\nvar greeting = \"Hello world!\";\r\nvar chars = [ ...greeting ];\r\n\r\nchars;\r\n// [ \"H\", \"e\", \"l\", \"l\", \"o\", \" \",\r\n//   \"w\", \"o\", \"r\", \"l\", \"d\", \"!\" ]\r\n```\r\n\r\nA `Map` data structure uses objects as keys, associating a value (of any type) with that object. Maps have a different default iteration than seen here, in that the iteration is not just over the map's values but instead its *entries*. An *entry* is a tuple (2-element array) including both a key and a value.\r\n\r\nConsider:\r\n\r\n```js\r\n// given two DOM elements, `btn1` and `btn2`\r\n\r\nvar buttonNames = new Map();\r\nbuttonNames.set(btn1,\"Button 1\");\r\nbuttonNames.set(btn2,\"Button 2\");\r\n\r\nfor (let [btn,btnName] of buttonNames) {\r\n    btn.addEventListener(\"click\",function onClick(){\r\n        console.log(`Clicked ${ btnName }`);\r\n    });\r\n}\r\n```\r\n\r\nIn the `for..of` loop over the default map iteration, we use the `[btn,btnName]` syntax (called \"array destructuring\") to break down each consumed tuple into the respective key/value pairs (`btn1` / `\"Button 1\"` and `btn2` / `\"Button 2\"`).\r\n\r\nEach of the built-in iterables in JS expose a default iteration, one which likely matches your intuition. But you can also choose a more specific iteration if necessary. For example, if we want to consume only the values of the above `buttonNames` map, we can call `values()` to get a values-only iterator:\r\n\r\n```js\r\nfor (let btnName of buttonNames.values()) {\r\n    console.log(btnName);\r\n}\r\n// Button 1\r\n// Button 2\r\n```\r\n\r\nOr if we want the index *and* value in an array iteration, we can make an entries iterator with the `entries()` method:\r\n\r\n```js\r\nvar arr = [ 10, 20, 30 ];\r\n\r\nfor (let [idx,val] of arr.entries()) {\r\n    console.log(`[${ idx }]: ${ val }`);\r\n}\r\n// [0]: 10\r\n// [1]: 20\r\n// [2]: 30\r\n```\r\n\r\nFor the most part, all built-in iterables in JS have three iterator forms available: keys-only (`keys()`), values-only (`values()`), and entries (`entries()`).\r\n\r\nBeyond just using built-in iterables, you can also ensure your own data structures adhere to the iteration protocol; doing so means you opt into the ability to consume your data with `for..of` loops and the `...` operator. \"Standardizing\" on this protocol means code that is overall more readily recognizable and readable.\r\n\r\n| NOTE: |\r\n| :--- |\r\n| You may have noticed a nuanced shift that occurred in this discussion. We started by talking about consuming **iterators**, but then switched to talking about iterating over **iterables**. The iteration-consumption protocol expects an *iterable*, but the reason we can provide a direct *iterator* is that an iterator is just an iterable of itself! When creating an iterator instance from an existing iterator, the iterator itself is returned. |\r\n\r\n## Closure\r\n\r\nPerhaps without realizing it, almost every JS developer has made use of closure. In fact, closure is one of the most pervasive programming functionalities across a majority of languages. It might even be as important to understand as variables or loops; that's how fundamental it is.\r\n\r\nYet it feels kind of hidden, almost magical. And it's often talked about in either very abstract or very informal terms, which does little to help us nail down exactly what it is.\r\n\r\nWe need to be able to recognize where closure is used in programs, as the presence or lack of closure is sometimes the cause of bugs (or even the cause of performance issues).\r\n\r\nSo let's define closure in a pragmatic and concrete way:\r\n\r\n> Closure is when a function remembers and continues to access variables from outside its scope, even when the function is executed in a different scope.\r\n\r\nWe see two definitional characteristics here. First, closure is part of the nature of a function. Objects don't get closures, functions do. Second, to observe a closure, you must execute a function in a different scope than where that function was originally defined.\r\n\r\nConsider:\r\n\r\n```js\r\nfunction greeting(msg) {\r\n    return function who(name) {\r\n        console.log(`${ msg }, ${ name }!`);\r\n    };\r\n}\r\n\r\nvar hello = greeting(\"Hello\");\r\nvar howdy = greeting(\"Howdy\");\r\n\r\nhello(\"Kyle\");\r\n// Hello, Kyle!\r\n\r\nhello(\"Sarah\");\r\n// Hello, Sarah!\r\n\r\nhowdy(\"Grant\");\r\n// Howdy, Grant!\r\n```\r\n\r\nFirst, the `greeting(..)` outer function is executed, creating an instance of the inner function `who(..)`; that function closes over the variable `msg`, which is the parameter from the outer scope of `greeting(..)`. When that inner function is returned, its reference is assigned to the `hello` variable in the outer scope. Then we call `greeting(..)` a second time, creating a new inner function instance, with a new closure over a new `msg`, and return that reference to be assigned to `howdy`.\r\n\r\nWhen the `greeting(..)` function finishes running, normally we would expect all of its variables to be garbage collected (removed from memory). We'd expect each `msg` to go away, but they don't. The reason is closure. Since the inner function instances are still alive (assigned to `hello` and `howdy`, respectively), their closures are still preserving the `msg` variables.\r\n\r\nThese closures are not a snapshot of the `msg` variable's value; they are a direct link and preservation of the variable itself. That means closure can actually observe (or make!) updates to these variables over time.\r\n\r\n```js\r\nfunction counter(step = 1) {\r\n    var count = 0;\r\n    return function increaseCount(){\r\n        count = count + step;\r\n        return count;\r\n    };\r\n}\r\n\r\nvar incBy1 = counter(1);\r\nvar incBy3 = counter(3);\r\n\r\nincBy1();       // 1\r\nincBy1();       // 2\r\n\r\nincBy3();       // 3\r\nincBy3();       // 6\r\nincBy3();       // 9\r\n```\r\n\r\nEach instance of the inner `increaseCount()` function is closed over both the `count` and `step` variables from its outer `counter(..)` function's scope. `step` remains the same over time, but `count` is updated on each invocation of that inner function. Since closure is over the variables and not just snapshots of the values, these updates are preserved.\r\n\r\nClosure is most common when working with asynchronous code, such as with callbacks. Consider:\r\n\r\n```js\r\nfunction getSomeData(url) {\r\n    ajax(url,function onResponse(resp){\r\n        console.log(\r\n            `Response (from ${ url }): ${ resp }`\r\n        );\r\n    });\r\n}\r\n\r\ngetSomeData(\"https://some.url/wherever\");\r\n// Response (from https://some.url/wherever): ...\r\n```\r\n\r\nThe inner function `onResponse(..)` is closed over `url`, and thus preserves and remembers it until the Ajax call returns and executes `onResponse(..)`. Even though `getSomeData(..)` finishes right away, the `url` parameter variable is kept alive in the closure for as long as needed.\r\n\r\nIt's not necessary that the outer scope be a function—it usually is, but not always—just that there be at least one variable in an outer scope accessed from an inner function:\r\n\r\n```js\r\nfor (let [idx,btn] of buttons.entries()) {\r\n    btn.addEventListener(\"click\",function onClick(){\r\n       console.log(`Clicked on button (${ idx })!`);\r\n    });\r\n}\r\n```\r\n\r\nBecause this loop is using `let` declarations, each iteration gets new block-scoped (aka, local) `idx` and `btn` variables;  the loop also creates a new inner `onClick(..)` function each time. That inner function closes over `idx`, preserving it for as long as the click handler is set on the `btn`. So when each button is clicked, its handler can print its associated index value, because the handler remembers its respective `idx` variable.\r\n\r\nRemember: this closure is not over the value (like `1` or `3`), but over the variable `idx` itself.\r\n\r\nClosure is one of the most prevalent and important programming patterns in any language. But that's especially true of JS; it's hard to imagine doing anything useful without leveraging closure in one way or another.\r\n\r\nIf you're still feeling unclear or shaky about closure, the majority of Book 2, *Scope & Closures* is focused on the topic.\r\n\r\n## `this` Keyword\r\n\r\nOne of JS's most powerful mechanisms is also one of its most misunderstood: the `this` keyword. One common misconception is that a function's `this` refers to the function itself. Because of how `this` works in other languages, another misconception is that `this` points the instance that a method belongs to. Both are incorrect.\r\n\r\nAs discussed previously, when a function is defined, it is *attached* to its enclosing scope via closure. Scope is the set of rules that controls how references to variables are resolved.\r\n\r\nBut functions also have another characteristic besides their scope that influences what they can access. This characteristic is best described as an *execution context*, and it's exposed to the function via its `this` keyword.\r\n\r\nScope is static and contains a fixed set of variables available at the moment and location you define a function, but a function's execution *context* is dynamic, entirely dependent on **how it is called** (regardless of where it is defined or even called from).\r\n\r\n`this` is not a fixed characteristic of a function based on the function's definition, but rather a dynamic characteristic that's determined each time the function is called.\r\n\r\nOne way to think about the *execution context* is that it's a tangible object whose properties are made available to a function while it executes. Compare that to scope, which can also be thought of as an *object*; except, the *scope object* is hidden inside the JS engine, it's always the same for that function, and its *properties* take the form of identifier variables available inside the function.\r\n\r\n```js\r\nfunction classroom(teacher) {\r\n    return function study() {\r\n        console.log(\r\n            `${ teacher } says to study ${ this.topic }`\r\n        );\r\n    };\r\n}\r\nvar assignment = classroom(\"Kyle\");\r\n```\r\n\r\nThe outer `classroom(..)` function makes no reference to a `this` keyword, so it's just like any other function we've seen so far. But the inner `study()` function does reference `this`, which makes it a `this`-aware function. In other words, it's a function that is dependent on its *execution context*.\r\n\r\n| NOTE: |\r\n| :--- |\r\n| `study()` is also closed over the `teacher` variable from its outer scope. |\r\n\r\nThe inner `study()` function returned by `classroom(\"Kyle\")` is assigned to a variable called `assignment`. So how can `assignment()` (aka `study()`) be called?\r\n\r\n```js\r\nassignment();\r\n// Kyle says to study undefined  -- Oops :(\r\n```\r\n\r\nIn this snippet, we call `assignment()` as a plain, normal function, without providing it any *execution context*.\r\n\r\nSince this program is not in strict mode (see Chapter 1, \"Strictly Speaking\"), context-aware functions that are called **without any context specified** default the context to the global object (`window` in the browser). As there is no global variable named `topic` (and thus no such property on the global object), `this.topic` resolves to `undefined`.\r\n\r\nNow consider:\r\n\r\n```js\r\nvar homework = {\r\n    topic: \"JS\",\r\n    assignment: assignment\r\n};\r\n\r\nhomework.assignment();\r\n// Kyle says to study JS\r\n```\r\n\r\nA copy of the `assignment` function reference is set as a property on the `homework` object, and then it's called as `homework.assignment()`. That means the `this` for that function call will be the `homework` object. Hence, `this.topic` resolves to `\"JS\"`.\r\n\r\nLastly:\r\n\r\n```js\r\nvar otherHomework = {\r\n    topic: \"Math\"\r\n};\r\n\r\nassignment.call(otherHomework);\r\n// Kyle says to study Math\r\n```\r\n\r\nA third way to invoke a function is with the `call(..)` method, which takes an object (`otherHomework` here) to use for setting the `this` reference for the function call. The property reference `this.topic` resolves to `\"Math\"`.\r\n\r\nThe same context-aware function invoked three different ways, gives different answers each time for what object `this` will reference.\r\n\r\nThe benefit of `this`-aware functions—and their dynamic context—is the ability to more flexibly re-use a single function with data from different objects. A function that closes over a scope can never reference a different scope or set of variables. But a function that has dynamic `this` context awareness can be quite helpful for certain tasks.\r\n\r\n## Prototypes\r\n\r\nWhere `this` is a characteristic of function execution, a prototype is a characteristic of an object, and specifically resolution of a property access.\r\n\r\nThink about a prototype as a linkage between two objects; the linkage is hidden behind the scenes, though there are ways to expose and observe it. This prototype linkage occurs when an object is created; it's linked to another object that already exists.\r\n\r\nA series of objects linked together via prototypes is called the \"prototype chain.\"\r\n\r\nThe purpose of this prototype linkage (i.e., from an object B to another object A) is so that accesses against B for properties/methods that B does not have, are *delegated* to A to handle. Delegation of property/method access allows two (or more!) objects to cooperate with each other to perform a task.\r\n\r\nConsider defining an object as a normal literal:\r\n\r\n```js\r\nvar homework = {\r\n    topic: \"JS\"\r\n};\r\n```\r\n\r\nThe `homework` object only has a single property on it: `topic`. However, its default prototype linkage connects to the `Object.prototype` object, which has common built-in methods on it like `toString()` and `valueOf()`, among others.\r\n\r\nWe can observe this prototype linkage *delegation* from `homework` to `Object.prototype`:\r\n\r\n```js\r\nhomework.toString();    // [object Object]\r\n```\r\n\r\n`homework.toString()` works even though `homework` doesn't have a `toString()` method defined; the delegation invokes `Object.prototype.toString()` instead.\r\n\r\n### Object Linkage\r\n\r\nTo define an object prototype linkage, you can create the object using the `Object.create(..)` utility:\r\n\r\n```js\r\nvar homework = {\r\n    topic: \"JS\"\r\n};\r\n\r\nvar otherHomework = Object.create(homework);\r\n\r\notherHomework.topic;   // \"JS\"\r\n```\r\n\r\nThe first argument to `Object.create(..)` specifies an object to link the newly created object to, and then returns the newly created (and linked!) object.\r\n\r\nFigure 4 shows how the three objects (`otherHomework`, `homework`, and `Object.prototype`) are linked in a prototype chain:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig4.png\" width=\"200\" alt=\"Prototype chain with 3 objects\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 4: Objects in a prototype chain\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\nDelegation through the prototype chain only applies for accesses to lookup the value in a property. If you assign to a property of an object, that will apply directly to the object regardless of where that object is prototype linked to.\r\n\r\n| TIP: |\r\n| :--- |\r\n| `Object.create(null)` creates an object that is not prototype linked anywhere, so it's purely just a standalone object; in some circumstances, that may be preferable. |\r\n\r\nConsider:\r\n\r\n```js\r\nhomework.topic;\r\n// \"JS\"\r\n\r\notherHomework.topic;\r\n// \"JS\"\r\n\r\notherHomework.topic = \"Math\";\r\notherHomework.topic;\r\n// \"Math\"\r\n\r\nhomework.topic;\r\n// \"JS\" -- not \"Math\"\r\n```\r\n\r\nThe assignment to `topic` creates a property of that name directly on `otherHomework`; there's no effect on the `topic` property on `homework`. The next statement then accesses `otherHomework.topic`, and we see the non-delegated answer from that new property: `\"Math\"`.\r\n\r\nFigure 5 shows the objects/properties after the assignment that creates the `otherHomework.topic` property:\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig5.png\" width=\"200\" alt=\"3 objects linked, with shadowed property\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 5: Shadowed property 'topic'\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\nThe `topic` on `otherHomework` is \"shadowing\" the property of the same name on the `homework` object in the chain.\r\n\r\n| NOTE: |\r\n| :--- |\r\n| Another frankly more convoluted but perhaps still more common way of creating an object with a prototype linkage is using the \"prototypal class\" pattern, from before `class` (see Chapter 2, \"Classes\") was added in ES6. We'll cover this topic in more detail in Appendix A, \"Prototypal 'Classes'\". |\r\n\r\n### `this` Revisited\r\n\r\nWe covered the `this` keyword earlier, but its true importance shines when considering how it powers prototype-delegated function calls. Indeed, one of the main reasons `this` supports dynamic context based on how the function is called is so that method calls on objects which delegate through the prototype chain still maintain the expected `this`.\r\n\r\nConsider:\r\n\r\n```js\r\nvar homework = {\r\n    study() {\r\n        console.log(`Please study ${ this.topic }`);\r\n    }\r\n};\r\n\r\nvar jsHomework = Object.create(homework);\r\njsHomework.topic = \"JS\";\r\njsHomework.study();\r\n// Please study JS\r\n\r\nvar mathHomework = Object.create(homework);\r\nmathHomework.topic = \"Math\";\r\nmathHomework.study();\r\n// Please study Math\r\n```\r\n\r\nThe two objects `jsHomework` and `mathHomework` each prototype link to the single `homework` object, which has the `study()` function. `jsHomework` and `mathHomework` are each given their own `topic` property (see Figure 6).\r\n\r\n\u003Cfigure>\r\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig6.png\" width=\"495\" alt=\"4 objects prototype linked\" align=\"center\">\r\n    \u003Cfigcaption>\u003Cem>Fig. 6: Two objects linked to a common parent\u003C/em>\u003C/figcaption>\r\n    \u003Cbr>\u003Cbr>\r\n\u003C/figure>\r\n\r\n`jsHomework.study()` delegates to `homework.study()`, but its `this` (`this.topic`) for that execution resolves to `jsHomework` because of how the function is called, so `this.topic` is `\"JS\"`. Similarly for `mathHomework.study()` delegating to `homework.study()` but still resolving `this` to `mathHomework`, and thus `this.topic` as `\"Math\"`.\r\n\r\nThe preceding code snippet would be far less useful if `this` was resolved to `homework`. Yet, in many other languages, it would seem `this` would be `homework` because the `study()` method is indeed defined on `homework`.\r\n\r\nUnlike many other languages, JS's `this` being dynamic is a critical component of allowing prototype delegation, and indeed `class`, to work as expected!\r\n\r\n## Asking \"Why?\"\r\n\r\nThe intended take-away from this chapter is that there's a lot more to JS under the hood than is obvious from glancing at the surface.\r\n\r\nAs you are *getting started* learning and knowing JS more closely, one of the most important skills you can practice and bolster is curiosity, and the art of asking \"Why?\" when you encounter something in the language.\r\n\r\nEven though this chapter has gone quite deep on some of the topics, many details have still been entirely skimmed over. There's much more to learn here, and the path to that starts with you asking the *right* questions of your code. Asking the right questions is a critical skill of becoming a better developer.\r\n\r\nIn the final chapter of this book, we're going to briefly look at how JS is divided, as covered across the rest of the *You Don't Know JS Yet* book series. Also, don't skip Appendix B of this book, which has some practice code to review some of the main topics covered in this book.","src/content/blog/libros/you-dont-know-js-yet/get-started/ch3.md","d976ac342bd14357",{"html":1523,"metadata":1524},"\u003Cp>If you’ve read Chapters 1 and 2, and taken the time to digest and percolate, you’re hopefully starting to \u003Cem>get\u003C/em> JS a little more. If you skipped/skimmed them (especially Chapter 2), I recommend going back to spend some more time with that material.\u003C/p>\n\u003Cp>In Chapter 2, we surveyed syntax, patterns, and behaviors at a high level. In this chapter, our attention shifts to some of the lower-level root characteristics of JS that underpin virtually every line of code we write.\u003C/p>\n\u003Cp>Be aware: this chapter digs much deeper than you’re likely used to thinking about a programming language. My goal is to help you appreciate the core of how JS works, what makes it tick. This chapter should begin to answer some of the “Why?” questions that may be cropping up as you explore JS. However, this material is still not an exhaustive exposition of the language; that’s what the rest of the book series is for! Our goal here is still just to \u003Cem>get started\u003C/em>, and become more comfortable with, the \u003Cem>feel\u003C/em> of JS, how it ebbs and flows.\u003C/p>\n\u003Cp>Don’t run so quickly through this material that you get lost in the weeds. As I’ve said a dozen times already, \u003Cstrong>take your time\u003C/strong>. Even still, you’ll probably finish this chapter with remaining questions. That’s OK, because there’s a whole book series ahead of you to keep exploring!\u003C/p>\n\u003Ch2 id=\"iteration\">Iteration\u003C/h2>\n\u003Cp>Since programs are essentially built to process data (and make decisions on that data), the patterns used to step through the data have a big impact on the program’s readability.\u003C/p>\n\u003Cp>The iterator pattern has been around for decades, and suggests a “standardized” approach to consuming data from a source one \u003Cem>chunk\u003C/em> at a time. The idea is that it’s more common and helpful to iterate the data source—to progressively handle the collection of data by processing the first part, then the next, and so on, rather than handling the entire set all at once.\u003C/p>\n\u003Cp>Imagine a data structure that represents a relational database \u003Ccode>SELECT\u003C/code> query, which typically organizes the results as rows. If this query had only one or a couple of rows, you could handle the entire result set at once, and assign each row to a local variable, and perform whatever operations on that data that were appropriate.\u003C/p>\n\u003Cp>But if the query has 100 or 1,000 (or more!) rows, you’ll need iterative processing to deal with this data (typically, a loop).\u003C/p>\n\u003Cp>The iterator pattern defines a data structure called an “iterator” that has a reference to an underlying data source (like the query result rows), which exposes a method like \u003Ccode>next()\u003C/code>. Calling \u003Ccode>next()\u003C/code> returns the next piece of data (i.e., a “record” or “row” from a database query).\u003C/p>\n\u003Cp>You don’t always know how many pieces of data that you will need to iterate through, so the pattern typically indicates completion by some special value or exception once you iterate through the entire set and \u003Cem>go past the end\u003C/em>.\u003C/p>\n\u003Cp>The importance of the iterator pattern is in adhering to a \u003Cem>standard\u003C/em> way of processing data iteratively, which creates cleaner and easier to understand code, as opposed to having every data structure/source define its own custom way of handling its data.\u003C/p>\n\u003Cp>After many years of various JS community efforts around mutually agreed-upon iteration techniques, ES6 standardized a specific protocol for the iterator pattern directly in the language. The protocol defines a \u003Ccode>next()\u003C/code> method whose return is an object called an \u003Cem>iterator result\u003C/em>; the object has \u003Ccode>value\u003C/code> and \u003Ccode>done\u003C/code> properties, where \u003Ccode>done\u003C/code> is a boolean that is \u003Ccode>false\u003C/code> until the iteration over the underlying data source is complete.\u003C/p>\n\u003Ch3 id=\"consuming-iterators\">Consuming Iterators\u003C/h3>\n\u003Cp>With the ES6 iteration protocol in place, it’s workable to consume a data source one value at a time, checking after each \u003Ccode>next()\u003C/code> call for \u003Ccode>done\u003C/code> to be \u003Ccode>true\u003C/code> to stop the iteration. But this approach is rather manual, so ES6 also included several mechanisms (syntax and APIs) for standardized consumption of these iterators.\u003C/p>\n\u003Cp>One such mechanism is the \u003Ccode>for..of\u003C/code> loop:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// given an iterator of some data source:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> it \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#6A737D\"> /* .. */\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// loop over its results one at a time\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> val \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> it) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Iterator value: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> val\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Iterator value: ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Iterator value: ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ..\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTE:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">We’ll omit the manual loop equivalent here, but it’s definitely less readable than the \u003Ccode>for..of\u003C/code> loop!\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Another mechanism that’s often used for consuming iterators is the \u003Ccode>...\u003C/code> operator. This operator actually has two symmetrical forms: \u003Cem>spread\u003C/em> and \u003Cem>rest\u003C/em> (or \u003Cem>gather\u003C/em>, as I prefer). The \u003Cem>spread\u003C/em> form is an iterator-consumer.\u003C/p>\n\u003Cp>To \u003Cem>spread\u003C/em> an iterator, you have to have \u003Cem>something\u003C/em> to spread it into. There are two possibilities in JS: an array or an argument list for a function call.\u003C/p>\n\u003Cp>An array spread:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// spread an iterator into an array,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// with each iterated value occupying\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// an array element position.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> vals \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">it ];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>A function call spread:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// spread an iterator into a function,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// call with each iterated value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// occupying an argument position.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">doSomethingUseful\u003C/span>\u003Cspan style=\"color:#E1E4E8\">( \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">it );\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In both cases, the iterator-spread form of \u003Ccode>...\u003C/code> follows the iterator-consumption protocol (the same as the \u003Ccode>for..of\u003C/code> loop) to retrieve all available values from an iterator and place (aka, spread) them into the receiving context (array, argument list).\u003C/p>\n\u003Ch3 id=\"iterables\">Iterables\u003C/h3>\n\u003Cp>The iterator-consumption protocol is technically defined for consuming \u003Cem>iterables\u003C/em>; an iterable is a value that can be iterated over.\u003C/p>\n\u003Cp>The protocol automatically creates an iterator instance from an iterable, and consumes \u003Cem>just that iterator instance\u003C/em> to its completion. This means a single iterable could be consumed more than once; each time, a new iterator instance would be created and used.\u003C/p>\n\u003Cp>So where do we find iterables?\u003C/p>\n\u003Cp>ES6 defined the basic data structure/collection types in JS as iterables. This includes strings, arrays, maps, sets, and others.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// an array is an iterable\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> val \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Array value: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> val\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Array value: 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Array value: 20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Array value: 30\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since arrays are iterables, we can shallow-copy an array using iterator consumption via the \u003Ccode>...\u003C/code> spread operator:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arrCopy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arr ];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We can also iterate the characters in a string one at a time:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> greeting \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello world!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> chars \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">greeting ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">chars;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [ \"H\", \"e\", \"l\", \"l\", \"o\", \" \",\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//   \"w\", \"o\", \"r\", \"l\", \"d\", \"!\" ]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>A \u003Ccode>Map\u003C/code> data structure uses objects as keys, associating a value (of any type) with that object. Maps have a different default iteration than seen here, in that the iteration is not just over the map’s values but instead its \u003Cem>entries\u003C/em>. An \u003Cem>entry\u003C/em> is a tuple (2-element array) including both a key and a value.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// given two DOM elements, `btn1` and `btn2`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> buttonNames \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">buttonNames.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(btn1,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Button 1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">buttonNames.\u003C/span>\u003Cspan style=\"color:#B392F0\">set\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(btn2,\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Button 2\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [btn,btnName] \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> buttonNames) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    btn.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"click\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Clicked ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> btnName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In the \u003Ccode>for..of\u003C/code> loop over the default map iteration, we use the \u003Ccode>[btn,btnName]\u003C/code> syntax (called “array destructuring”) to break down each consumed tuple into the respective key/value pairs (\u003Ccode>btn1\u003C/code> / \u003Ccode>\"Button 1\"\u003C/code> and \u003Ccode>btn2\u003C/code> / \u003Ccode>\"Button 2\"\u003C/code>).\u003C/p>\n\u003Cp>Each of the built-in iterables in JS expose a default iteration, one which likely matches your intuition. But you can also choose a more specific iteration if necessary. For example, if we want to consume only the values of the above \u003Ccode>buttonNames\u003C/code> map, we can call \u003Ccode>values()\u003C/code> to get a values-only iterator:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> btnName \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> buttonNames.\u003C/span>\u003Cspan style=\"color:#B392F0\">values\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(btnName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Button 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Button 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Or if we want the index \u003Cem>and\u003C/em> value in an array iteration, we can make an entries iterator with the \u003Ccode>entries()\u003C/code> method:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [idx,val] \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr.\u003C/span>\u003Cspan style=\"color:#B392F0\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`[${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }]: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> val\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [0]: 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [1]: 20\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// [2]: 30\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For the most part, all built-in iterables in JS have three iterator forms available: keys-only (\u003Ccode>keys()\u003C/code>), values-only (\u003Ccode>values()\u003C/code>), and entries (\u003Ccode>entries()\u003C/code>).\u003C/p>\n\u003Cp>Beyond just using built-in iterables, you can also ensure your own data structures adhere to the iteration protocol; doing so means you opt into the ability to consume your data with \u003Ccode>for..of\u003C/code> loops and the \u003Ccode>...\u003C/code> operator. “Standardizing” on this protocol means code that is overall more readily recognizable and readable.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTE:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">You may have noticed a nuanced shift that occurred in this discussion. We started by talking about consuming \u003Cstrong>iterators\u003C/strong>, but then switched to talking about iterating over \u003Cstrong>iterables\u003C/strong>. The iteration-consumption protocol expects an \u003Cem>iterable\u003C/em>, but the reason we can provide a direct \u003Cem>iterator\u003C/em> is that an iterator is just an iterable of itself! When creating an iterator instance from an existing iterator, the iterator itself is returned.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"closure\">Closure\u003C/h2>\n\u003Cp>Perhaps without realizing it, almost every JS developer has made use of closure. In fact, closure is one of the most pervasive programming functionalities across a majority of languages. It might even be as important to understand as variables or loops; that’s how fundamental it is.\u003C/p>\n\u003Cp>Yet it feels kind of hidden, almost magical. And it’s often talked about in either very abstract or very informal terms, which does little to help us nail down exactly what it is.\u003C/p>\n\u003Cp>We need to be able to recognize where closure is used in programs, as the presence or lack of closure is sometimes the cause of bugs (or even the cause of performance issues).\u003C/p>\n\u003Cp>So let’s define closure in a pragmatic and concrete way:\u003C/p>\n\u003Cblockquote>\n\u003Cp>Closure is when a function remembers and continues to access variables from outside its scope, even when the function is executed in a different scope.\u003C/p>\n\u003C/blockquote>\n\u003Cp>We see two definitional characteristics here. First, closure is part of the nature of a function. Objects don’t get closures, functions do. Second, to observe a closure, you must execute a function in a different scope than where that function was originally defined.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">msg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> who\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> msg\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> hello \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> howdy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Howdy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Hello, Kyle!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Sarah\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Hello, Sarah!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">howdy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Grant\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Howdy, Grant!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>First, the \u003Ccode>greeting(..)\u003C/code> outer function is executed, creating an instance of the inner function \u003Ccode>who(..)\u003C/code>; that function closes over the variable \u003Ccode>msg\u003C/code>, which is the parameter from the outer scope of \u003Ccode>greeting(..)\u003C/code>. When that inner function is returned, its reference is assigned to the \u003Ccode>hello\u003C/code> variable in the outer scope. Then we call \u003Ccode>greeting(..)\u003C/code> a second time, creating a new inner function instance, with a new closure over a new \u003Ccode>msg\u003C/code>, and return that reference to be assigned to \u003Ccode>howdy\u003C/code>.\u003C/p>\n\u003Cp>When the \u003Ccode>greeting(..)\u003C/code> function finishes running, normally we would expect all of its variables to be garbage collected (removed from memory). We’d expect each \u003Ccode>msg\u003C/code> to go away, but they don’t. The reason is closure. Since the inner function instances are still alive (assigned to \u003Ccode>hello\u003C/code> and \u003Ccode>howdy\u003C/code>, respectively), their closures are still preserving the \u003Ccode>msg\u003C/code> variables.\u003C/p>\n\u003Cp>These closures are not a snapshot of the \u003Ccode>msg\u003C/code> variable’s value; they are a direct link and preservation of the variable itself. That means closure can actually observe (or make!) updates to these variables over time.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> counter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">step\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> increaseCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        count \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> step;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> count;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> incBy1 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> counter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> incBy3 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> counter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">incBy1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();       \u003C/span>\u003Cspan style=\"color:#6A737D\">// 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">incBy1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();       \u003C/span>\u003Cspan style=\"color:#6A737D\">// 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">incBy3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();       \u003C/span>\u003Cspan style=\"color:#6A737D\">// 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">incBy3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();       \u003C/span>\u003Cspan style=\"color:#6A737D\">// 6\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">incBy3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();       \u003C/span>\u003Cspan style=\"color:#6A737D\">// 9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Each instance of the inner \u003Ccode>increaseCount()\u003C/code> function is closed over both the \u003Ccode>count\u003C/code> and \u003Ccode>step\u003C/code> variables from its outer \u003Ccode>counter(..)\u003C/code> function’s scope. \u003Ccode>step\u003C/code> remains the same over time, but \u003Ccode>count\u003C/code> is updated on each invocation of that inner function. Since closure is over the variables and not just snapshots of the values, these updates are preserved.\u003C/p>\n\u003Cp>Closure is most common when working with asynchronous code, such as with callbacks. Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> getSomeData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    ajax\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(url,\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> onResponse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">resp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `Response (from ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> url\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }): ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> resp\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">getSomeData\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"https://some.url/wherever\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Response (from https://some.url/wherever): ...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The inner function \u003Ccode>onResponse(..)\u003C/code> is closed over \u003Ccode>url\u003C/code>, and thus preserves and remembers it until the Ajax call returns and executes \u003Ccode>onResponse(..)\u003C/code>. Even though \u003Ccode>getSomeData(..)\u003C/code> finishes right away, the \u003Ccode>url\u003C/code> parameter variable is kept alive in the closure for as long as needed.\u003C/p>\n\u003Cp>It’s not necessary that the outer scope be a function—it usually is, but not always—just that there be at least one variable in an outer scope accessed from an inner function:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [idx,btn] \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> buttons.\u003C/span>\u003Cspan style=\"color:#B392F0\">entries\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    btn.\u003C/span>\u003Cspan style=\"color:#B392F0\">addEventListener\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"click\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">       console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Clicked on button (${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> idx\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> })!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Because this loop is using \u003Ccode>let\u003C/code> declarations, each iteration gets new block-scoped (aka, local) \u003Ccode>idx\u003C/code> and \u003Ccode>btn\u003C/code> variables;  the loop also creates a new inner \u003Ccode>onClick(..)\u003C/code> function each time. That inner function closes over \u003Ccode>idx\u003C/code>, preserving it for as long as the click handler is set on the \u003Ccode>btn\u003C/code>. So when each button is clicked, its handler can print its associated index value, because the handler remembers its respective \u003Ccode>idx\u003C/code> variable.\u003C/p>\n\u003Cp>Remember: this closure is not over the value (like \u003Ccode>1\u003C/code> or \u003Ccode>3\u003C/code>), but over the variable \u003Ccode>idx\u003C/code> itself.\u003C/p>\n\u003Cp>Closure is one of the most prevalent and important programming patterns in any language. But that’s especially true of JS; it’s hard to imagine doing anything useful without leveraging closure in one way or another.\u003C/p>\n\u003Cp>If you’re still feeling unclear or shaky about closure, the majority of Book 2, \u003Cem>Scope &#x26; Closures\u003C/em> is focused on the topic.\u003C/p>\n\u003Ch2 id=\"this-keyword\">\u003Ccode>this\u003C/code> Keyword\u003C/h2>\n\u003Cp>One of JS’s most powerful mechanisms is also one of its most misunderstood: the \u003Ccode>this\u003C/code> keyword. One common misconception is that a function’s \u003Ccode>this\u003C/code> refers to the function itself. Because of how \u003Ccode>this\u003C/code> works in other languages, another misconception is that \u003Ccode>this\u003C/code> points the instance that a method belongs to. Both are incorrect.\u003C/p>\n\u003Cp>As discussed previously, when a function is defined, it is \u003Cem>attached\u003C/em> to its enclosing scope via closure. Scope is the set of rules that controls how references to variables are resolved.\u003C/p>\n\u003Cp>But functions also have another characteristic besides their scope that influences what they can access. This characteristic is best described as an \u003Cem>execution context\u003C/em>, and it’s exposed to the function via its \u003Ccode>this\u003C/code> keyword.\u003C/p>\n\u003Cp>Scope is static and contains a fixed set of variables available at the moment and location you define a function, but a function’s execution \u003Cem>context\u003C/em> is dynamic, entirely dependent on \u003Cstrong>how it is called\u003C/strong> (regardless of where it is defined or even called from).\u003C/p>\n\u003Cp>\u003Ccode>this\u003C/code> is not a fixed characteristic of a function based on the function’s definition, but rather a dynamic characteristic that’s determined each time the function is called.\u003C/p>\n\u003Cp>One way to think about the \u003Cem>execution context\u003C/em> is that it’s a tangible object whose properties are made available to a function while it executes. Compare that to scope, which can also be thought of as an \u003Cem>object\u003C/em>; except, the \u003Cem>scope object\u003C/em> is hidden inside the JS engine, it’s always the same for that function, and its \u003Cem>properties\u003C/em> take the form of identifier variables available inside the function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">teacher\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> study\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> teacher\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> } says to study ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">topic\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> assignment \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> classroom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The outer \u003Ccode>classroom(..)\u003C/code> function makes no reference to a \u003Ccode>this\u003C/code> keyword, so it’s just like any other function we’ve seen so far. But the inner \u003Ccode>study()\u003C/code> function does reference \u003Ccode>this\u003C/code>, which makes it a \u003Ccode>this\u003C/code>-aware function. In other words, it’s a function that is dependent on its \u003Cem>execution context\u003C/em>.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTE:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ccode>study()\u003C/code> is also closed over the \u003Ccode>teacher\u003C/code> variable from its outer scope.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>The inner \u003Ccode>study()\u003C/code> function returned by \u003Ccode>classroom(\"Kyle\")\u003C/code> is assigned to a variable called \u003Ccode>assignment\u003C/code>. So how can \u003Ccode>assignment()\u003C/code> (aka \u003Ccode>study()\u003C/code>) be called?\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">assignment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle says to study undefined  -- Oops :(\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In this snippet, we call \u003Ccode>assignment()\u003C/code> as a plain, normal function, without providing it any \u003Cem>execution context\u003C/em>.\u003C/p>\n\u003Cp>Since this program is not in strict mode (see Chapter 1, “Strictly Speaking”), context-aware functions that are called \u003Cstrong>without any context specified\u003C/strong> default the context to the global object (\u003Ccode>window\u003C/code> in the browser). As there is no global variable named \u003Ccode>topic\u003C/code> (and thus no such property on the global object), \u003Ccode>this.topic\u003C/code> resolves to \u003Ccode>undefined\u003C/code>.\u003C/p>\n\u003Cp>Now consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> homework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    topic: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"JS\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    assignment: assignment\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">homework.\u003C/span>\u003Cspan style=\"color:#B392F0\">assignment\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle says to study JS\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>A copy of the \u003Ccode>assignment\u003C/code> function reference is set as a property on the \u003Ccode>homework\u003C/code> object, and then it’s called as \u003Ccode>homework.assignment()\u003C/code>. That means the \u003Ccode>this\u003C/code> for that function call will be the \u003Ccode>homework\u003C/code> object. Hence, \u003Ccode>this.topic\u003C/code> resolves to \u003Ccode>\"JS\"\u003C/code>.\u003C/p>\n\u003Cp>Lastly:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> otherHomework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    topic: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Math\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">assignment.\u003C/span>\u003Cspan style=\"color:#B392F0\">call\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(otherHomework);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle says to study Math\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>A third way to invoke a function is with the \u003Ccode>call(..)\u003C/code> method, which takes an object (\u003Ccode>otherHomework\u003C/code> here) to use for setting the \u003Ccode>this\u003C/code> reference for the function call. The property reference \u003Ccode>this.topic\u003C/code> resolves to \u003Ccode>\"Math\"\u003C/code>.\u003C/p>\n\u003Cp>The same context-aware function invoked three different ways, gives different answers each time for what object \u003Ccode>this\u003C/code> will reference.\u003C/p>\n\u003Cp>The benefit of \u003Ccode>this\u003C/code>-aware functions—and their dynamic context—is the ability to more flexibly re-use a single function with data from different objects. A function that closes over a scope can never reference a different scope or set of variables. But a function that has dynamic \u003Ccode>this\u003C/code> context awareness can be quite helpful for certain tasks.\u003C/p>\n\u003Ch2 id=\"prototypes\">Prototypes\u003C/h2>\n\u003Cp>Where \u003Ccode>this\u003C/code> is a characteristic of function execution, a prototype is a characteristic of an object, and specifically resolution of a property access.\u003C/p>\n\u003Cp>Think about a prototype as a linkage between two objects; the linkage is hidden behind the scenes, though there are ways to expose and observe it. This prototype linkage occurs when an object is created; it’s linked to another object that already exists.\u003C/p>\n\u003Cp>A series of objects linked together via prototypes is called the “prototype chain.”\u003C/p>\n\u003Cp>The purpose of this prototype linkage (i.e., from an object B to another object A) is so that accesses against B for properties/methods that B does not have, are \u003Cem>delegated\u003C/em> to A to handle. Delegation of property/method access allows two (or more!) objects to cooperate with each other to perform a task.\u003C/p>\n\u003Cp>Consider defining an object as a normal literal:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> homework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    topic: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"JS\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>homework\u003C/code> object only has a single property on it: \u003Ccode>topic\u003C/code>. However, its default prototype linkage connects to the \u003Ccode>Object.prototype\u003C/code> object, which has common built-in methods on it like \u003Ccode>toString()\u003C/code> and \u003Ccode>valueOf()\u003C/code>, among others.\u003C/p>\n\u003Cp>We can observe this prototype linkage \u003Cem>delegation\u003C/em> from \u003Ccode>homework\u003C/code> to \u003Ccode>Object.prototype\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">homework.\u003C/span>\u003Cspan style=\"color:#B392F0\">toString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();    \u003C/span>\u003Cspan style=\"color:#6A737D\">// [object Object]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>homework.toString()\u003C/code> works even though \u003Ccode>homework\u003C/code> doesn’t have a \u003Ccode>toString()\u003C/code> method defined; the delegation invokes \u003Ccode>Object.prototype.toString()\u003C/code> instead.\u003C/p>\n\u003Ch3 id=\"object-linkage\">Object Linkage\u003C/h3>\n\u003Cp>To define an object prototype linkage, you can create the object using the \u003Ccode>Object.create(..)\u003C/code> utility:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> homework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    topic: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"JS\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> otherHomework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(homework);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">otherHomework.topic;   \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"JS\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The first argument to \u003Ccode>Object.create(..)\u003C/code> specifies an object to link the newly created object to, and then returns the newly created (and linked!) object.\u003C/p>\n\u003Cp>Figure 4 shows how the three objects (\u003Ccode>otherHomework\u003C/code>, \u003Ccode>homework\u003C/code>, and \u003Ccode>Object.prototype\u003C/code>) are linked in a prototype chain:\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig4.png\" width=\"200\" alt=\"Prototype chain with 3 objects\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 4: Objects in a prototype chain\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>Delegation through the prototype chain only applies for accesses to lookup the value in a property. If you assign to a property of an object, that will apply directly to the object regardless of where that object is prototype linked to.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">TIP:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ccode>Object.create(null)\u003C/code> creates an object that is not prototype linked anywhere, so it’s purely just a standalone object; in some circumstances, that may be preferable.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">homework.topic;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"JS\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">otherHomework.topic;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"JS\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">otherHomework.topic \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Math\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">otherHomework.topic;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"Math\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">homework.topic;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// \"JS\" -- not \"Math\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The assignment to \u003Ccode>topic\u003C/code> creates a property of that name directly on \u003Ccode>otherHomework\u003C/code>; there’s no effect on the \u003Ccode>topic\u003C/code> property on \u003Ccode>homework\u003C/code>. The next statement then accesses \u003Ccode>otherHomework.topic\u003C/code>, and we see the non-delegated answer from that new property: \u003Ccode>\"Math\"\u003C/code>.\u003C/p>\n\u003Cp>Figure 5 shows the objects/properties after the assignment that creates the \u003Ccode>otherHomework.topic\u003C/code> property:\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig5.png\" width=\"200\" alt=\"3 objects linked, with shadowed property\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 5: Shadowed property 'topic'\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>The \u003Ccode>topic\u003C/code> on \u003Ccode>otherHomework\u003C/code> is “shadowing” the property of the same name on the \u003Ccode>homework\u003C/code> object in the chain.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTE:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Another frankly more convoluted but perhaps still more common way of creating an object with a prototype linkage is using the “prototypal class” pattern, from before \u003Ccode>class\u003C/code> (see Chapter 2, “Classes”) was added in ES6. We’ll cover this topic in more detail in Appendix A, “Prototypal ‘Classes’”.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"this-revisited\">\u003Ccode>this\u003C/code> Revisited\u003C/h3>\n\u003Cp>We covered the \u003Ccode>this\u003C/code> keyword earlier, but its true importance shines when considering how it powers prototype-delegated function calls. Indeed, one of the main reasons \u003Ccode>this\u003C/code> supports dynamic context based on how the function is called is so that method calls on objects which delegate through the prototype chain still maintain the expected \u003Ccode>this\u003C/code>.\u003C/p>\n\u003Cp>Consider:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> homework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    study\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Please study ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">topic\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> jsHomework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(homework);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">jsHomework.topic \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"JS\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">jsHomework.\u003C/span>\u003Cspan style=\"color:#B392F0\">study\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Please study JS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mathHomework \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Object.\u003C/span>\u003Cspan style=\"color:#B392F0\">create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(homework);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathHomework.topic \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Math\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathHomework.\u003C/span>\u003Cspan style=\"color:#B392F0\">study\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Please study Math\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The two objects \u003Ccode>jsHomework\u003C/code> and \u003Ccode>mathHomework\u003C/code> each prototype link to the single \u003Ccode>homework\u003C/code> object, which has the \u003Ccode>study()\u003C/code> function. \u003Ccode>jsHomework\u003C/code> and \u003Ccode>mathHomework\u003C/code> are each given their own \u003Ccode>topic\u003C/code> property (see Figure 6).\u003C/p>\n\u003Cfigure>\n    \u003Cimg src=\"/images/you-dont-know-js-yet/get-started/fig6.png\" width=\"495\" alt=\"4 objects prototype linked\" align=\"center\">\n    \u003Cfigcaption>\u003Cem>Fig. 6: Two objects linked to a common parent\u003C/em>\u003C/figcaption>\n    \u003Cbr>\u003Cbr>\n\u003C/figure>\n\u003Cp>\u003Ccode>jsHomework.study()\u003C/code> delegates to \u003Ccode>homework.study()\u003C/code>, but its \u003Ccode>this\u003C/code> (\u003Ccode>this.topic\u003C/code>) for that execution resolves to \u003Ccode>jsHomework\u003C/code> because of how the function is called, so \u003Ccode>this.topic\u003C/code> is \u003Ccode>\"JS\"\u003C/code>. Similarly for \u003Ccode>mathHomework.study()\u003C/code> delegating to \u003Ccode>homework.study()\u003C/code> but still resolving \u003Ccode>this\u003C/code> to \u003Ccode>mathHomework\u003C/code>, and thus \u003Ccode>this.topic\u003C/code> as \u003Ccode>\"Math\"\u003C/code>.\u003C/p>\n\u003Cp>The preceding code snippet would be far less useful if \u003Ccode>this\u003C/code> was resolved to \u003Ccode>homework\u003C/code>. Yet, in many other languages, it would seem \u003Ccode>this\u003C/code> would be \u003Ccode>homework\u003C/code> because the \u003Ccode>study()\u003C/code> method is indeed defined on \u003Ccode>homework\u003C/code>.\u003C/p>\n\u003Cp>Unlike many other languages, JS’s \u003Ccode>this\u003C/code> being dynamic is a critical component of allowing prototype delegation, and indeed \u003Ccode>class\u003C/code>, to work as expected!\u003C/p>\n\u003Ch2 id=\"asking-why\">Asking “Why?”\u003C/h2>\n\u003Cp>The intended take-away from this chapter is that there’s a lot more to JS under the hood than is obvious from glancing at the surface.\u003C/p>\n\u003Cp>As you are \u003Cem>getting started\u003C/em> learning and knowing JS more closely, one of the most important skills you can practice and bolster is curiosity, and the art of asking “Why?” when you encounter something in the language.\u003C/p>\n\u003Cp>Even though this chapter has gone quite deep on some of the topics, many details have still been entirely skimmed over. There’s much more to learn here, and the path to that starts with you asking the \u003Cem>right\u003C/em> questions of your code. Asking the right questions is a critical skill of becoming a better developer.\u003C/p>\n\u003Cp>In the final chapter of this book, we’re going to briefly look at how JS is divided, as covered across the rest of the \u003Cem>You Don’t Know JS Yet\u003C/em> book series. Also, don’t skip Appendix B of this book, which has some practice code to review some of the main topics covered in this book.\u003C/p>",{"headings":1525,"localImagePaths":1553,"remoteImagePaths":1554,"frontmatter":1555,"imagePaths":1558},[1526,1529,1532,1535,1538,1541,1544,1547,1550],{"depth":76,"slug":1527,"text":1528},"iteration","Iteration",{"depth":211,"slug":1530,"text":1531},"consuming-iterators","Consuming Iterators",{"depth":211,"slug":1533,"text":1534},"iterables","Iterables",{"depth":76,"slug":1536,"text":1537},"closure","Closure",{"depth":76,"slug":1539,"text":1540},"this-keyword","this Keyword",{"depth":76,"slug":1542,"text":1543},"prototypes","Prototypes",{"depth":211,"slug":1545,"text":1546},"object-linkage","Object Linkage",{"depth":211,"slug":1548,"text":1549},"this-revisited","this Revisited",{"depth":76,"slug":1551,"text":1552},"asking-why","Asking “Why?”",[],[],{"rutas":1556,"title":1516,"description":16,"pubDate":151,"updatedDate":151,"link":1557,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/ch3",[],"libros/you-dont-know-js-yet/get-started/ch3.md","libros/you-dont-know-js-yet/get-started/ch2",{"id":1560,"data":1562,"body":1567,"filePath":1568,"digest":1569,"rendered":1570,"legacyId":1628},{"rutas":1563,"title":1564,"description":16,"lang":17,"dir":18,"pubDate":1565,"updatedDate":1566},[804],"Capítulo 2: Topografía JS",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"La mejor manera de aprender JS es comenzar a escribir JS.\r\n\r\nPara hacer eso, necesitas entender cómo funciona el lenguaje, y eso es en lo que nos enfocaremos aquí. Incluso si has programado en otros lenguajes antes, tómate tu tiempo para familiarizarte con JS y asegúrate de practicar cada elemento.\r\n\r\nEste capítulo no es una referencia exhaustiva de cada aspecto de la sintaxis del lenguaje JS. Tampoco pretende ser un manual completo de \"introducción a JS\".\r\n\r\nEn cambio, simplemente vamos a explorar algunas de las áreas temáticas principales del lenguaje. Nuestro objetivo es obtener una mejor *sensación* por él, para poder avanzar escribiendo nuestros propios programas con más confianza. Volveremos a muchos de estos temas con más detalle a medida que avances en el resto de este libro y de la serie.\r\n\r\nPor favor, no esperes que este capítulo sea una lectura rápida. Es extenso y hay muchos detalles para analizar. Tómate tu tiempo.\r\n\r\n| CONSEJO: |\r\n| :--- |\r\n| Si aún estás familiarizándote con JS, te sugiero que reserves mucho tiempo adicional para trabajar en este capítulo. Tómate cada sección, reflexiona y explora el tema durante un tiempo. Examina programas JS existentes y compara lo que ves en ellos con el código y las explicaciones (¡y opiniones!) presentadas aquí. Obtendrás mucho más del resto del libro y de la serie con una sólida comprensión de la *naturaleza* de JS. |\r\n\r\n## Cada archivo es un programa\r\n\r\nCasi todos los sitios web (aplicaciones web) que utilizas están compuestos por muchos archivos JS diferentes (normalmente con la extensión de archivo .js). Es tentador pensar en todo el conjunto (la aplicación) como un solo programa. Pero JS lo ve de manera diferente.\r\n\r\nEn JS, cada archivo independiente es su propio programa separado.\r\n\r\nLa razón por la que esto es importante se relaciona principalmente con el manejo de errores. Dado que JS trata los archivos como programas, un archivo puede fallar (durante el análisis/compilación o la ejecución) y eso no necesariamente evitará que el siguiente archivo se procese. Obviamente, si tu aplicación depende de cinco archivos .js y uno de ellos falla, es probable que la aplicación general solo funcione parcialmente, como máximo. Es importante asegurarse de que cada archivo funcione correctamente y, en la medida de lo posible, manejar los fallos en otros archivos de la manera más elegante posible.\r\n\r\nPuede sorprenderte considerar archivos .js separados como programas JS independientes. Desde la perspectiva de tu uso de una aplicación, parece que es un solo programa grande. Eso se debe a que la ejecución de la aplicación permite que estos *programas* individuales cooperen y actúen como un solo programa.\r\n\r\n| NOTA: |\r\n| :--- |\r\n| Muchos proyectos utilizan herramientas de procesamiento de compilación que combinan archivos separados del proyecto en un solo archivo para ser entregado a una página web. Cuando esto sucede, JS trata este único archivo combinado como el programa completo. |\r\n\r\nLa única forma en que varios archivos .js independientes actúan como un solo programa es compartiendo su estado (y acceso a su funcionalidad pública) a través del \"ámbito global\". Se mezclan en este espacio de nombres de ámbito global, por lo que en tiempo de ejecución actúan como un conjunto.\r\n\r\nDesde ES6, JS también admite un formato de módulo además del formato típico de programa JS independiente. Los módulos también están basados en archivos. Si un archivo se carga a través de un mecanismo de carga de módulos, como una declaración `import` o una etiqueta `\u003Cscript type=module>`, todo su código se trata como un solo módulo.\r\n\r\nAunque normalmente no pensarías en un módulo, una colección de estado y métodos expuestos públicamente para operar en ese estado, como un programa independiente, JS trata cada módulo por separado. De manera similar a cómo el \"ámbito global\" permite que los archivos independientes se mezclen en tiempo de ejecución, la importación de un módulo en otro permite la interacción en tiempo de ejecución entre ellos.\r\n\r\nIndependientemente del patrón de organización de código (y mecanismo de carga) que se utilice para un archivo (independiente o módulo), aún debes considerar cada archivo como su propio programa (mini), que luego puede cooperar con otros programas (mini) para realizar las funciones de tu aplicación en general.\r\n\r\n## Valores\r\n\r\nLa unidad más fundamental de información en un programa es un valor. Los valores son datos. Son cómo el programa mantiene el estado. Los valores se presentan en dos formas en JS: **primitivos** y **objetos**.\r\n\r\nLos valores se incorporan en los programas mediante *literales*:\r\n\r\n```js\r\ngreeting(\"My name is Kyle.\");\r\n```\r\n\r\nEn este programa, el valor `\"My name is Kyle.\"` es un literal primitivo de cadena; las cadenas son colecciones ordenadas de caracteres, generalmente utilizadas para representar palabras y oraciones.\r\n\r\nUsé el carácter de comillas dobles `\"` para *delimitar* (encerrar, separar, definir) el valor de la cadena. Pero también podría haber utilizado el carácter de comillas simples `'`. La elección del carácter de comillas es completamente estilística. Lo importante, para la legibilidad y el mantenimiento del código, es elegir uno y usarlo consistentemente en todo el programa.\r\n\r\nOtra opción para delimitar un literal de cadena es usar el carácter de tilde invertida `` ` ``. Sin embargo, esta elección no es simplemente estilística; también hay una diferencia de comportamiento. Considera:\r\n\r\n```js\r\nconsole.log(\"My name is ${ firstName }.\");\r\n// My name is ${ firstName }.\r\n\r\nconsole.log('My name is ${ firstName }.');\r\n// My name is ${ firstName }.\r\n\r\nconsole.log(`My name is ${ firstName }.`);\r\n// My name is Kyle.\r\n```\r\n\r\nSuponiendo que este programa ya ha definido una variable `firstName` con el valor de cadena `\"Kyle\"`, la cadena delimitada por `` ` `` resuelve la expresión de variable (indicada con `${ .. }`) a su valor actual. Esto se llama **interpolación**.\r\n\r\nLa cadena delimitada por la tilde invertida `` ` `` se puede usar sin incluir expresiones interpoladas, pero eso va en contra del propósito de esa sintaxis alternativa de literales de cadena:\r\n\r\n```js\r\nconsole.log(\r\n    `¿Te estoy confundiendo al omitir la interpolación?`\r\n);\r\n// ¿Te estoy confundiendo al omitir la interpolación?\r\n```\r\n\r\nLa mejor manera es usar `\"` o `'` (nuevamente, ¡elige uno y quédate con él!) para las cadenas *a menos que necesites* interpolación; reserva `` ` `` solo para cadenas que incluirán expresiones interpoladas.\r\n\r\nAdemás de las cadenas, los programas de JS a menudo contienen otros valores literales primitivos como booleanos y números:\r\n\r\n```js\r\nwhile (false) {\r\n    console.log(3.141592);\r\n}\r\n```\r\n\r\n`while` representa un tipo de bucle, una forma de repetir operaciones *mientras* su condición sea verdadera.\r\n\r\nEn este caso, el bucle nunca se ejecutará (y no se imprimirá nada), porque usamos el valor booleano `false` como condición del bucle. `true` habría resultado en un bucle que seguiría ejecutándose para siempre, ¡así que ten cuidado!\r\n\r\nEl número `3.141592` es, como sabrás, una aproximación de PI matemático a las primeras seis cifras. En lugar de incrustar dicho valor, sin embargo, normalmente usarías el valor predefinido `Math.PI` para ese propósito. Otra variante de los números es el tipo primitivo `bigint` (número entero grande), que se utiliza para almacenar números arbitrariamente grandes.\r\n\r\nLos números se utilizan más a menudo en los programas para contar pasos, como las iteraciones de un bucle, y para acceder a la información en posiciones numéricas (por ejemplo, un índice de matriz). Cubriremos arrays/objetos en un momento, pero como ejemplo, si hubiera un array llamado `names`, podríamos acceder al elemento en su segunda posición de esta manera:\r\n\r\n```js\r\nconsole.log(`My name is ${ names[1] }.`);\r\n// My name is Kyle.\r\n```\r\n\r\nUsamos `1` para el elemento en la segunda posición, en lugar de `2`, porque al igual que en la mayoría de los lenguajes de programación, los índices de arrays en JS comienzan en 0 (`0` es la primera posición).\r\n\r\nAdemás de las cadenas de texto, los números y los booleanos, otros dos valores *primitivos* en los programas de JS son `null` e `undefined`. Aunque hay diferencias entre ellos (algunas históricas y otras contemporáneas), en su mayor parte ambos valores sirven para indicar la *falta* (o ausencia) de un valor.\r\n\r\nMuchos desarrolladores prefieren tratarlos de manera consistente de esta manera, es decir, asumir que los valores son indistinguibles. Si se tiene cuidado, esto a menudo es posible. Sin embargo, es más seguro y mejor usar solo `undefined` como el único valor vacío, aunque `null` pueda parecer atractivo por ser más corto de escribir.\r\n\r\n```js\r\nwhile (value != undefined) {\r\n    console.log(\"Still got something!\");\r\n}\r\n```\r\n\r\nEl último valor primitivo del que debes tener conocimiento es el símbolo, que es un valor de propósito especial que se comporta como un valor oculto e impredecible. Los símbolos se utilizan casi exclusivamente como claves especiales en objetos:\r\n\r\n```js\r\nhitchhikersGuide[ Symbol(\"meaning of life\") ];\r\n// 42\r\n```\r\nNo encontrarás el uso directo de símbolos muy a menudo en programas JS típicos. Se utilizan principalmente en código de bajo nivel, como en bibliotecas y frameworks.\r\n\r\n### Arrays y Objects\r\n\r\nAdemás de los primitivos, el otro tipo de valor en JS es el valor objeto.\r\n\r\nComo se mencionó anteriormente, los arrays son un tipo especial de objeto que está compuesto por una lista ordenada e indexada numéricamente de datos:\r\n\r\n```js\r\nvar names = [ \"Frank\", \"Kyle\", \"Peter\", \"Susan\" ];\r\n\r\nnames.length;\r\n// 4\r\n\r\nnames[0];\r\n// Frank\r\n\r\nnames[1];\r\n// Kyle\r\n```\r\n\r\nLos arrays de JS pueden contener cualquier tipo de valor, ya sea primitivo u objeto (incluyendo otros arrays). Como veremos hacia el final del Capítulo 3, incluso las funciones son valores que se pueden almacenar en arrays u objetos.\r\n\r\n| NOTA: |\r\n| :--- |\r\n| Las funciones, al igual que los arrays, son un tipo especial (también conocido como subtipo) de objeto. Cubriremos las funciones con más detalle en un momento. |\r\n\r\nLos objetos son más generales: una colección desordenada y con claves de varios valores. En otras palabras, accedes al elemento mediante un nombre de ubicación de cadena (también conocido como \"clave\" o \"propiedad\") en lugar de por su posición numérica (como en los arrays). Por ejemplo:\r\n\r\n```js\r\nvar me = {\r\n    first: \"Kyle\",\r\n    last: \"Simpson\",\r\n    age: 39,\r\n    specialties: [ \"JS\", \"Table Tennis\" ]\r\n};\r\n\r\nconsole.log(`My name is ${ me.first }.`);\r\n```\r\n\r\nAquí, `me` representa un objeto, y `first` representa el nombre de una ubicación de información en ese objeto (colección de valores). Otra opción de sintaxis que accede a la información en un objeto por su propiedad/clave utiliza corchetes cuadrados `[ ]`, como `me[\"first\"]`.\r\n\r\n### Determinación del tipo de valor\r\n\r\nPara distinguir valores, el operador `typeof` te dice su tipo incorporado, si es primitivo, o `\"object\"` en caso contrario:\r\n\r\n```js\r\ntypeof 42;                  // \"number\"\r\ntypeof \"abc\";               // \"string\"\r\ntypeof true;                // \"boolean\"\r\ntypeof undefined;           // \"undefined\"\r\ntypeof null;                // \"object\" -- oops, bug!\r\ntypeof { \"a\": 1 };          // \"object\"\r\ntypeof [1,2,3];             // \"object\"\r\ntypeof function hello(){};  // \"function\"\r\n```\r\n\r\n| ADVERTENCIA: |\r\n| :--- |\r\n| `typeof null` desafortunadamente devuelve `\"object\"` en lugar del esperado `\"null\"`. Además, `typeof` devuelve el específico `\"function\"` para funciones, pero no el esperado `\"array\"` para arrays. |\r\n\r\nLa conversión de un tipo de valor a otro, como de cadena a número, se denomina \"coerción\" en JS. Cubriremos esto con más detalle más adelante en este capítulo.\r\n\r\nLos valores primitivos y los valores de objeto se comportan de manera diferente cuando se asignan o se pasan. Cubriremos estos detalles en el Apéndice A, \"Valores vs Referencias\".\r\n\r\n## Declaración y uso de variables\r\n\r\n\r\nPara ser explícito acerca de algo que quizás no fue evidente en la sección anterior: en los programas de JS, los valores pueden aparecer como valores literales (como muchos de los ejemplos anteriores ilustran), o pueden estar contenidos en variables; piensa en las variables como simples contenedores para valores.\r\n\r\nLas variables deben declararse (crearse) antes de ser utilizadas. Hay varias formas de sintaxis que declaran variables (también conocidas como \"identificadores\"), y cada forma tiene comportamientos implícitos diferentes.\r\n\r\nPor ejemplo, considera la declaración `var`:\r\n\r\n```js\r\nvar myName = \"Kyle\";\r\nvar age;\r\n```\r\n\r\nLa palabra clave `var` declara una variable para ser utilizada en esa parte del programa y opcionalmente permite una asignación inicial de un valor.\r\n\r\nOtra palabra clave similar es `let`:\r\n\r\n```js\r\nlet myName = \"Kyle\";\r\nlet age;\r\n```\r\n\r\nLa palabra clave `let` tiene algunas diferencias con `var`, siendo la más evidente que `let` permite un acceso más limitado a la variable que `var`. Esto se llama \"block scoping\" (ámbito de bloque) en lugar de ámbito regular o de función.\r\n\r\nConsidera:\r\n\r\n```js\r\nvar adult = true;\r\n\r\nif (adult) {\r\n    var myName = \"Kyle\";\r\n    let age = 39;\r\n    console.log(\"Shhh, this is a secret!\");\r\n}\r\n\r\nconsole.log(myName);\r\n// Kyle\r\n\r\nconsole.log(age);\r\n// Error!\r\n```\r\n\r\nEl intento de acceder a `age` fuera de la declaración `if` resulta en un error porque `age` tiene un ámbito de bloque limitado al `if`, mientras que `myName` no lo tiene.\r\n\r\nEl ámbito de bloque es muy útil para limitar la extensión de las declaraciones de variables en nuestros programas, lo que ayuda a evitar la superposición accidental de sus nombres.\r\n\r\nPero `var` aún es útil porque comunica \"esta variable será vista por un ámbito más amplio (de toda la función)\". Ambas formas de declaración pueden ser apropiadas en cualquier parte de un programa, según las circunstancias.\r\n\r\n| NOTA: |\r\n| :--- |\r\n| Es muy común sugerir que se evite `var` a favor de `let` (¡o `const`!), generalmente debido a la percepción de confusión sobre cómo ha funcionado el comportamiento de ámbito de `var` desde el principio de JS. Creo que este consejo es demasiado restrictivo y, en última instancia, poco útil. Está asumiendo que no puedes aprender y usar una característica correctamente en combinación con otras características. ¡Creo que *puedes* y *debes* aprender todas las características disponibles y usarlas donde sea apropiado! |\r\n\r\nUna tercera forma de declaración es `const`. Es similar a `let` pero tiene una limitación adicional: debe recibir un valor en el momento de su declaración y no se le puede asignar un valor diferente más tarde.\r\n\r\nConsidera:\r\n\r\n```js\r\nconst myBirthday = true;\r\nlet age = 39;\r\n\r\nif (myBirthday) {\r\n    age = age + 1;    // OK!\r\n    myBirthday = false;  // Error!\r\n}\r\n```\r\n\r\nLa constante `myBirthday` no se permite volver a asignarse.\r\n\r\nLas variables declaradas con `const` no son \"inmutables\", simplemente no se les puede volver a asignar. No se recomienda usar `const` con valores de objetos, porque esos valores aún se pueden cambiar aunque la variable no pueda volver a asignarse. Esto lleva a posibles confusiones más adelante, por lo que creo que es prudente evitar situaciones como:\r\n\r\n```js\r\nconst actors = [\r\n    \"Morgan Freeman\", \"Jennifer Aniston\"\r\n];\r\n\r\nactors[2] = \"Tom Cruise\";   // OK :(\r\nactors = [];                // Error!\r\n```\r\n\r\nEl mejor uso semántico de un `const` es cuando tiene un valor primitivo simple al que desea darle un nombre útil, como usar `myBirthday` en lugar de `true`. Esto hace que los programas sean más fáciles de leer.\r\n\r\n| CONSEJO: |\r\n| :--- |\r\n| Si te limitas a usar `const` solo con valores primitivos, evitas cualquier confusión entre la reasignación (no permitida) y la mutación (permitida). ¡Esa es la forma más segura y mejor de usar `const`! |\r\n\r\nAdemás de `var` / `let` / `const`, hay otras formas sintácticas que declaran identificadores (variables) en varios ámbitos. Por ejemplo:\r\n\r\n```js\r\nfunction hello(myName) {\r\n    console.log(`Hello, ${ myName }.`);\r\n}\r\n\r\nhello(\"Kyle\");\r\n// Hello, Kyle.\r\n```\r\n\r\nEl identificador `hello` se crea en el ámbito externo, y también se asocia automáticamente para que haga referencia a la función. Pero el parámetro con nombre `myName` se crea solo dentro de la función y, por lo tanto, solo es accesible dentro del ámbito de esa función. `hello` y `myName` generalmente se comportan como si fueran declarados con `var`.\r\n\r\nOtra sintaxis que declara una variable es una cláusula `catch`:\r\n\r\n```js\r\ntry {\r\n    someError();\r\n}\r\ncatch (err) {\r\n    console.log(err);\r\n}\r\n```\r\n\r\nLa variable `err` es una variable con ámbito de bloque que existe solo dentro de la cláusula `catch`, como si hubiera sido declarada con `let`.\r\n\r\n## Functions\r\n\r\nLa palabra \"function\" tiene una variedad de significados en programación. Por ejemplo, en el mundo de la Programación Funcional, \"function\" tiene una definición matemática precisa e implica un conjunto estricto de reglas a seguir.\r\n\r\nEn JS, deberíamos considerar \"function\" con el significado más amplio de otro término relacionado: \"procedure\" (procedimiento). Un procedimiento es una colección de declaraciones que se pueden invocar una o más veces, puede recibir algunos inputs y puede devolver uno o más outputs.\r\n\r\nDesde los primeros días de JS, la definición de función se veía así:\r\n\r\n```js\r\nfunction awesomeFunction(coolThings) {\r\n    // ..\r\n    return amazingStuff;\r\n}\r\n```\r\n\r\nEsto se llama una declaración de función porque aparece como una declaración por sí misma, no como una expresión en otra declaración. La asociación entre el identificador `awesomeFunction` y el valor de la función ocurre durante la fase de compilación del código, antes de que ese código se ejecute.\r\n\r\nEn contraste con una declaración de función, una expresión de función se puede definir y asignar de la siguiente manera:\r\n\r\n```js\r\n// let awesomeFunction = ..\r\n// const awesomeFunction = ..\r\nvar awesomeFunction = function(coolThings) {\r\n    // ..\r\n    return amazingStuff;\r\n};\r\n```\r\n\r\nEsta función es una expresión que se asigna a la variable `awesomeFunction`. A diferencia de la forma de declaración de función, una expresión de función no se asocia con su identificador hasta esa declaración durante el tiempo de ejecución.\r\n\r\nEs extremadamente importante señalar que en JS, las funciones son valores que se pueden asignar (como se muestra en este fragmento) y pasar alrededor. De hecho, las funciones de JS son un tipo especial del tipo de valor objeto. No todos los lenguajes tratan las funciones como valores, pero es esencial que un lenguaje admita el patrón de programación funcional, como lo hace JS.\r\n\r\nLas funciones de JS pueden recibir parámetros de entrada:\r\n\r\n```js\r\nfunction greeting(myName) {\r\n    console.log(`Hello, ${ myName }!`);\r\n}\r\n\r\ngreeting(\"Kyle\");   // Hello, Kyle!\r\n```\r\n\r\nEn este fragmento, `myName` se llama un parámetro, que actúa como una variable local dentro de la función. Las funciones pueden definirse para recibir cualquier cantidad de parámetros, desde ninguno hacia arriba, según lo consideres apropiado. A cada parámetro se le asigna el valor del argumento que pases en esa posición (`\"Kyle\"`, aquí) de la llamada.\r\n\r\nLas funciones también pueden devolver valores usando la palabra clave `return`:\r\n\r\n```js\r\nfunction greeting(myName) {\r\n    return `Hello, ${ myName }!`;\r\n}\r\n\r\nvar msg = greeting(\"Kyle\");\r\n\r\nconsole.log(msg);   // Hello, Kyle!\r\n```\r\n\r\nSolo puedes `return` un único valor, pero si tienes más valores para devolver, puedes agruparlos en un solo objeto o matriz.\r\n\r\nDado que las funciones son valores, se pueden asignar como propiedades en objetos:\r\n\r\n```js\r\nvar whatToSay = {\r\n    greeting() {\r\n        console.log(\"Hello!\");\r\n    },\r\n    question() {\r\n        console.log(\"What's your name?\");\r\n    },\r\n    answer() {\r\n        console.log(\"My name is Kyle.\");\r\n    }\r\n};\r\n\r\nwhatToSay.greeting();\r\n// Hello!\r\n```\r\n\r\nEn este fragmento, se incluyen referencias a tres funciones (`greeting()`, `question()` y `answer()`) en el objeto contenido por `whatToSay`. Cada función se puede llamar accediendo a la propiedad para recuperar el valor de referencia de la función. Compara este estilo directo de definir funciones en un objeto con la sintaxis más sofisticada de `class` que se discute más adelante en este capítulo.\r\n\r\nExisten muchas formas variadas que pueden tener las funciones en JS. Exploraremos estas variaciones en el Apéndice A, \"Tantas Formas de Funciones\".\r\n\r\n## Comparaciones\r\n\r\nTomar decisiones en los programas requiere comparar valores para determinar su identidad y relación entre sí. JS tiene varios mecanismos para permitir la comparación de valores, así que echemos un vistazo más de cerca a ellos.\r\n\r\n### Equal...ish\r\n\r\nLa comparación más común en los programas de JS hace la pregunta: \"¿Este valor X es *igual que* ese valor Y?\" ¿Qué significa realmente \"igual que\" para JS?\r\n\r\nSin embargo, por razones ergonómicas e históricas, el significado es más complicado que el obvio tipo de coincidencia de *identidad exacta*. A veces, una comparación de igualdad pretende coincidencia *exacta*, pero otras veces la comparación deseada es un poco más amplia, permitiendo coincidencias *cercanamente similares* o *intercambiables*. En otras palabras, debemos ser conscientes de las diferencias matizadas entre una comparación de **igualdad** y una de **equivalencia**.\r\n\r\nSi has pasado algún tiempo trabajando y leyendo sobre JS, seguramente has visto el llamado operador \"triple igual\" `===`, también conocido como el operador de \"igualdad estricta\". Eso parece bastante sencillo, ¿verdad? Seguramente, \"estricto\" significa estricto, como en estrecho y *exacto*.\r\n\r\nNo exactamente.\r\n\r\nSí, la mayoría de los valores que participan en una comparación de igualdad `===` se ajustarán a esa intuición *exactamente la misma*. Considera algunos ejemplos:\r\n\r\n```js\r\n3 === 3.0;              // true\r\n\"yes\" === \"yes\";        // true\r\nnull === null;          // true\r\nfalse === false;        // true\r\n\r\n42 === \"42\";            // false\r\n\"hello\" === \"Hello\";    // false\r\ntrue === 1;             // false\r\n0 === null;             // false\r\n\"\" === null;            // false\r\nnull === undefined;     // false\r\n```\r\n\r\n| NOTA: |\r\n| :--- |\r\n| Otra forma en que a menudo se describe la comparación de igualdad de `===` es \"verificar tanto el valor como el tipo\". En varios de los ejemplos que hemos visto hasta ahora, como `42 === \"42\"`, el *tipo* de ambos valores (número, cadena, etc.) parece ser el factor distintivo. Sin embargo, hay más que eso. **Todas** las comparaciones de valores en JS consideran el tipo de los valores que se están comparando, no *solo* el operador `===`. Específicamente, `===` prohíbe cualquier tipo de conversión de tipo (también conocida como \"coerción\") en su comparación, mientras que otras comparaciones en JS *sí* permiten la coerción. |\r\n\r\nPero el operador `===` tiene cierta complejidad, un hecho que muchos desarrolladores de JS pasan por alto, en detrimento propio. El operador `===` está diseñado para *mentir* en dos casos de valores especiales: `NaN` y `-0`. Considera:\r\n\r\n```js\r\nNaN === NaN;            // false\r\n0 === -0;               // true\r\n```\r\n\r\nEn el caso de `NaN`, el operador `===` *miente* y dice que una ocurrencia de `NaN` no es igual a otro `NaN`. En el caso de `-0` (sí, este es un valor real y distinto que puedes usar intencionalmente en tus programas), el operador `===` *miente* y dice que es igual al valor regular `0`.\r\n\r\nDado que *mentir* acerca de tales comparaciones puede resultar molesto, es mejor evitar el uso de `===` para ellas. Para comparaciones de `NaN`, utiliza la utilidad `Number.isNaN(..)`, que no *miente*. Para la comparación de `-0`, utiliza la utilidad `Object.is(..)`, que también no *miente*. `Object.is(..)` también se puede utilizar para comprobaciones de `NaN` sin *mentir*, si lo prefieres. Irónicamente, podrías pensar en `Object.is(..)` como el \"cuádruple igual\" `====,` ¡la comparación realmente realmente estricta!\r\n\r\nHay razones históricas y técnicas más profundas para estos *engaños*, pero eso no cambia el hecho de que `===` no es realmente una comparación *estrictamente exactamente igual* en el sentido *más estricto*.\r\n\r\nLa historia se vuelve aún más complicada cuando consideramos comparaciones de valores de objeto (no primitivos). Considera:\r\n\r\n```js\r\n[ 1, 2, 3 ] === [ 1, 2, 3 ];    // false\r\n{ a: 42 } === { a: 42 }         // false\r\n(x => x * 2) === (x => x * 2)   // false\r\n```\r\n\r\n¿Qué está pasando aquí?\r\n\r\nPuede parecer razonable asumir que una comprobación de igualdad considera la *naturaleza* o *contenido* del valor; después de todo, `42 === 42` considera el valor `42` real y lo compara. Pero cuando se trata de objetos, una comparación consciente del contenido se denomina generalmente \"igualdad estructural\".\r\n\r\nJS no define `===` como *igualdad estructural* para valores de objeto. En cambio, `===` utiliza *igualdad por identidad* para valores de objeto.\r\n\r\nEn JS, todos los valores de objeto se mantienen por referencia (consulta \"Valores vs Referencias\" en el Apéndice A), se asignan y pasan por referencia-copia, **y** para nuestra discusión actual, se comparan por igualdad de referencia (identidad). Considera:\r\n\r\n```js\r\nvar x = [ 1, 2, 3 ];\r\n\r\n// la asignación es por copia de referencia, así que\r\n// y hace referencia al *mismo* array que x,\r\n// no a otra copia de él.\r\nvar y = x;\r\n\r\ny === x;              // true\r\ny === [ 1, 2, 3 ];    // false\r\nx === [ 1, 2, 3 ];    // false\r\n```\r\n\r\nEn este fragmento, `y === x` es verdadero porque ambas variables tienen una referencia al mismo array inicial. Pero las comparaciones `=== [1,2,3]` fallan porque `y` y `x`, respectivamente, se comparan con nuevos *diferentes* arrays `[1,2,3]`. La estructura y el contenido del array no importan en esta comparación, solo la **identidad de la referencia**.\r\n\r\nJS no proporciona un mecanismo para la comparación de igualdad estructural de valores de objeto, solo la comparación de identidad de referencia. Para hacer una comparación de igualdad estructural, deberás implementar las verificaciones tú mismo.\r\n\r\nPero ten cuidado, es más complicado de lo que asumirás. Por ejemplo, ¿cómo determinarías si dos referencias a funciones son \"estructuralmente equivalentes\"? Incluso convertir a cadena para comparar su código fuente no tendría en cuenta cosas como el cierre. JS no proporciona una comparación de igualdad estructural porque es casi inabordable manejar todos los casos particulares.\r\n\r\n### Comparaciones coercitivas\r\n\r\nLa coerción significa que un valor de un tipo se convierte en su representación respectiva en otro tipo (en la medida de lo posible). Como discutiremos en el Capítulo 4, la coerción es un pilar fundamental del lenguaje JS, no alguna característica opcional que se pueda evitar razonablemente.\r\n\r\nPero cuando la coerción se encuentra con operadores de comparación (como la igualdad), la confusión y la frustración desafortunadamente surgen con más frecuencia de la deseada.\r\n\r\nPocos aspectos de JS generan más críticas en la comunidad JS en general que el operador `==`, generalmente conocido como el operador de \"igualdad laxa\". La mayoría de los escritos y el discurso público sobre JS condenan este operador como mal diseñado y peligroso o lleno de errores cuando se usa en programas de JS. Incluso el creador del lenguaje, Brendan Eich, ha lamentado cómo se diseñó como un gran error.\r\n\r\nSegún lo que puedo decir, la mayor parte de esta frustración proviene de una lista bastante corta de casos confusos, pero un problema más profundo es la concepción extremadamente extendida de que realiza sus comparaciones sin considerar los tipos de los valores que compara.\r\n\r\nEl operador == realiza una comparación de igualdad de manera similar a como lo hace `===`. De hecho, ambos operadores consideran el tipo de los valores que se están comparando. Y si la comparación es entre el mismo tipo de valor, tanto `==` como `===` **hacen exactamente lo mismo, ninguna diferencia en absoluto**.\r\n\r\nSi los tipos de valor que se están comparando son diferentes, el `==` difiere de `===` en que permite la coerción antes de la comparación. En otras palabras, ambos quieren comparar valores del mismo tipo, pero `==` permite conversiones de tipo *primero*, y una vez que los tipos se han convertido para que sean iguales en ambos lados, entonces `==` hace lo mismo que `===`. En lugar de \"igualdad laxa\", el operador `==` debería describirse como \"igualdad coercitiva\".\r\n\r\nConsidera:\r\n\r\n```js\r\n42 == \"42\";             // true\r\n1 == true;              // true\r\n```\r\n\r\nEn ambas comparaciones, los tipos de valor son diferentes, por lo que el `==` hace que los valores no numéricos (`\"42\"` y `true`) se conviertan a números (`42` y `1`, respectivamente) antes de realizar las comparaciones.\r\n\r\nSer consciente de esta naturaleza de `==`—que prefiere comparaciones numéricas primitivas—te ayuda a evitar la mayoría de los casos problemáticos, como alejarte de situaciones confusas como `\"\" == 0` o `0 == false`.\r\n\r\nPuede que estés pensando, \"Bueno, simplemente evitaré cualquier comparación de igualdad coercitiva (usando `===` en su lugar) para evitar esos casos especiales\". Eh, lo siento, no es tan probable como esperarías.\r\n\r\nHay una buena probabilidad de que utilices operadores de comparación relacional como `\u003C`, `>` (e incluso `\u003C=` y `>=`).\r\n\r\nAl igual que `==`, estos operadores se comportarán como \"estrictos\" si los tipos que se están comparando relacionalmente ya coinciden, pero permitirán la coerción primero (generalmente, a números) si los tipos difieren.\r\n\r\nConsidera:\r\n\r\n```js\r\nvar arr = [ \"1\", \"10\", \"100\", \"1000\" ];\r\nfor (let i = 0; i \u003C arr.length && arr[i] \u003C 500; i++) {\r\n    // will run 3 times\r\n}\r\n```\r\n\r\nLa comparación `i \u003C arr.length` es \"segura\" contra la coerción porque `i` y `arr.length` siempre son números. Sin embargo, la comparación `arr[i] \u003C 500` invoca la coerción, ya que los valores de `arr[i]` son todos cadenas. Estas comparaciones se convierten en `1 \u003C 500`, `10 \u003C 500`, `100 \u003C 500` y `1000 \u003C 500`. Dado que esta última es falsa, el bucle se detiene después de su tercera iteración.\r\n\r\nEstos operadores relacionales suelen utilizar comparaciones numéricas, excepto en el caso en que **ambos** valores que se están comparando ya son cadenas; en este caso, utilizan la comparación alfabética (similar a un diccionario) de las cadenas:\r\n\r\n```js\r\nvar x = \"10\";\r\nvar y = \"9\";\r\n\r\nx \u003C y;      // true, watch out!\r\n```\r\n\r\nNo hay forma de evitar la coerción con estos operadores relacionales, aparte de simplemente no usar tipos incompatibles en las comparaciones. Eso puede ser loable como objetivo, pero aún es bastante probable que te encuentres con un caso en el que los tipos *puedan* diferir.\r\n\r\nLa estrategia más sabia no es evitar las comparaciones coercitivas, sino abrazarlas y aprender sus pormenores.\r\n\r\nLas comparaciones coercitivas surgen en otros lugares en JS, como en las condicionales (`if`, etc.), que volveremos a visitar en el Apéndice A, \"Comparación Condicional Coercitiva\".\r\n\r\n## Cómo nos organizamos en JS\r\n\r\nDos patrones principales para organizar código (datos y comportamiento) se utilizan ampliamente en todo el ecosistema de JS: clases y módulos. Estos patrones no son mutuamente excluyentes; muchos programas pueden y de hecho utilizan ambos. Otros programas se limitarán a usar solo un patrón, o incluso ninguno.\r\n\r\nEn algunos aspectos, estos patrones son muy diferentes. Pero curiosamente, en otros aspectos, son simplemente diferentes caras de la misma moneda. Ser competente en JS requiere comprender ambos patrones y dónde son apropiados (¡y dónde no!).\r\n\r\n### Classes\r\n\r\nLos términos \"orientado a objetos\", \"orientado a clases\" y \"clases\" están cargados de detalles y matices; no tienen una definición universal.\r\n\r\nUtilizaremos una definición común y algo tradicional aquí, la que es más probable que sea familiar para aquellos con antecedentes en lenguajes \"orientados a objetos\" como C++ y Java.\r\n\r\nUna clase en un programa es una definición de un \"tipo\" de estructura de datos personalizada que incluye tanto datos como comportamientos que operan en esos datos. Las clases definen cómo funciona tal estructura de datos, pero las clases en sí no son valores concretos. Para obtener un valor concreto que se pueda usar en el programa, una clase debe ser *instanciada* (con la palabra clave `new`) una o más veces.\r\n\r\nConsidera:\r\n\r\n```js\r\nclass Page {\r\n    constructor(text) {\r\n        this.text = text;\r\n    }\r\n\r\n    print() {\r\n        console.log(this.text);\r\n    }\r\n}\r\n\r\nclass Notebook {\r\n    constructor() {\r\n        this.pages = [];\r\n    }\r\n\r\n    addPage(text) {\r\n        var page = new Page(text);\r\n        this.pages.push(page);\r\n    }\r\n\r\n    print() {\r\n        for (let page of this.pages) {\r\n            page.print();\r\n        }\r\n    }\r\n}\r\n\r\nvar mathNotes = new Notebook();\r\nmathNotes.addPage(\"Arithmetic: + - * / ...\");\r\nmathNotes.addPage(\"Trigonometry: sin cos tan ...\");\r\n\r\nmathNotes.print();\r\n// ..\r\n```\r\n\r\nEn la clase `Page`, los datos son una cadena de texto almacenada en una propiedad miembro `this.text`. El comportamiento es `print()`, un método que muestra el texto en la consola.\r\n\r\nPara la clase `Notebook`, los datos son una matriz de instancias de `Page`. El comportamiento es `addPage(..)`, un método que instancia nuevas páginas `Page` y las agrega a la lista, así como `print()` (que imprime todas las páginas en el cuaderno).\r\n\r\nLa declaración `mathNotes = new Notebook()` crea una instancia de la clase `Notebook`, y `page = new Page(text)` es donde se crean instancias de la clase `Page`.\r\n\r\nLos comportamientos (métodos) solo se pueden llamar en instancias (no en las propias clases), como `mathNotes.addPage(..)` y `page.print()`.\r\n\r\nEl mecanismo de `class` permite organizar datos (`text` y `pages`) junto con sus comportamientos (por ejemplo, `addPage(..)` e `print()`). El mismo programa podría haberse construido sin ninguna definición de `class`, pero probablemente habría sido mucho menos organizado, más difícil de leer y entender, y más propenso a errores y un mantenimiento deficiente.\r\n\r\n#### Herencia de clase\r\n\r\nOtro aspecto inherente al diseño tradicional \"orientado a clases\", aunque se utiliza un poco menos comúnmente en JS, es la \"herencia\" (y \"polimorfismo\"). Considera:\r\n\r\n```js\r\nclass Publication {\r\n    constructor(title,author,pubDate) {\r\n        this.title = title;\r\n        this.author = author;\r\n        this.pubDate = pubDate;\r\n    }\r\n\r\n    print() {\r\n        console.log(`\r\n            Title: ${ this.title }\r\n            By: ${ this.author }\r\n            ${ this.pubDate }\r\n        `);\r\n    }\r\n}\r\n```\r\n\r\nEsta clase `Publication` define un conjunto de comportamientos comunes que cualquier publicación podría necesitar.\r\n\r\nAhora consideremos tipos más específicos de publicaciones, como `Book` y `BlogPost`:\r\n\r\n```js\r\nclass Book extends Publication {\r\n    constructor(bookDetails) {\r\n        super(\r\n            bookDetails.title,\r\n            bookDetails.author,\r\n            bookDetails.publishedOn\r\n        );\r\n        this.publisher = bookDetails.publisher;\r\n        this.ISBN = bookDetails.ISBN;\r\n    }\r\n\r\n    print() {\r\n        super.print();\r\n        console.log(`\r\n            Publisher: ${ this.publisher }\r\n            ISBN: ${ this.ISBN }\r\n        `);\r\n    }\r\n}\r\n\r\nclass BlogPost extends Publication {\r\n    constructor(title,author,pubDate,URL) {\r\n        super(title,author,pubDate);\r\n        this.URL = URL;\r\n    }\r\n\r\n    print() {\r\n        super.print();\r\n        console.log(this.URL);\r\n    }\r\n}\r\n```\r\n\r\nAmbos, `Book` y `BlogPost`, utilizan la cláusula `extends` para *extender* la definición general de `Publication` e incluir comportamientos adicionales. La llamada `super(..)` en cada constructor delega al constructor de la clase padre `Publication` para su trabajo de inicialización, y luego realizan cosas más específicas según su tipo de publicación respectivo (también conocido como \"subclase\" o \"clase hija\").\r\n\r\nAhora considera el uso de estas clases hijas:\r\n\r\n```js\r\nvar YDKJS = new Book({\r\n    title: \"You Don't Know JS\",\r\n    author: \"Kyle Simpson\",\r\n    publishedOn: \"June 2014\",\r\n    publisher: \"O'Reilly\",\r\n    ISBN: \"123456-789\"\r\n});\r\n\r\nYDKJS.print();\r\n// Title: You Don't Know JS\r\n// By: Kyle Simpson\r\n// June 2014\r\n// Publisher: O'Reilly\r\n// ISBN: 123456-789\r\n\r\nvar forAgainstLet = new BlogPost(\r\n    \"For and against let\",\r\n    \"Kyle Simpson\",\r\n    \"October 27, 2014\",\r\n    \"https://davidwalsh.name/for-and-against-let\"\r\n);\r\n\r\nforAgainstLet.print();\r\n// Title: For and against let\r\n// By: Kyle Simpson\r\n// October 27, 2014\r\n// https://davidwalsh.name/for-and-against-let\r\n```\r\n\r\nEs importante destacar que ambas instancias de la clase hija tienen un método `print()`, que es una anulación (override) del método `print()` *heredado* de la clase principal `Publication`. Cada uno de esos métodos `print()` anulados en las clases hijas llama a `super.print()` para invocar la versión heredada del método `print()`.\r\n\r\nEl hecho de que tanto los métodos heredados como los anulados puedan tener el mismo nombre y coexistir se llama *polimorfismo*.\r\n\r\nLa herencia es una herramienta poderosa para organizar datos y comportamientos en unidades lógicas separadas (clases), permitiendo que la clase hija coopere con la clase padre accediendo y utilizando su comportamiento y datos.\r\n\r\n### Modulos\r\n\r\nEl patrón de módulo tiene esencialmente el mismo objetivo que el patrón de clase, que es agrupar datos y comportamientos en unidades lógicas. Al igual que las clases, los módulos pueden \"incluir\" o \"acceder\" a los datos y comportamientos de otros módulos, por cooperación.\r\n\r\nPero los módulos tienen algunas diferencias importantes con respecto a las clases. Sobre todo, la sintaxis es completamente diferente.\r\n\r\n#### Módulos clásicos\r\n\r\nES6 agregó una forma de sintaxis de módulo a la sintaxis nativa de JS, que veremos en un momento. Pero desde los primeros días de JS, el uso de módulos fue un patrón importante y común que se aprovechó en innumerables programas de JS, incluso sin una sintaxis dedicada.\r\n\r\nLas características clave de un *módulo clásico* son una función externa (que se ejecuta al menos una vez), que devuelve una \"instancia\" del módulo con una o más funciones expuestas que pueden operar sobre los datos internos (ocultos) del módulo.\r\n\r\nDado que un módulo de esta forma es *simplemente una función*, y llamarla produce una \"instancia\" del módulo, otra descripción para estas funciones es \"fábricas de módulos\".\r\n\r\nConsidera la forma de módulo clásico de las anteriores clases `Publication`, `Book`, y `BlogPost`:\r\n\r\n```js\r\nfunction Publication(title,author,pubDate) {\r\n    var publicAPI = {\r\n        print() {\r\n            console.log(`\r\n                Title: ${ title }\r\n                By: ${ author }\r\n                ${ pubDate }\r\n            `);\r\n        }\r\n    };\r\n\r\n    return publicAPI;\r\n}\r\n\r\nfunction Book(bookDetails) {\r\n    var pub = Publication(\r\n        bookDetails.title,\r\n        bookDetails.author,\r\n        bookDetails.publishedOn\r\n    );\r\n\r\n    var publicAPI = {\r\n        print() {\r\n            pub.print();\r\n            console.log(`\r\n                Publisher: ${ bookDetails.publisher }\r\n                ISBN: ${ bookDetails.ISBN }\r\n            `);\r\n        }\r\n    };\r\n\r\n    return publicAPI;\r\n}\r\n\r\nfunction BlogPost(title,author,pubDate,URL) {\r\n    var pub = Publication(title,author,pubDate);\r\n\r\n    var publicAPI = {\r\n        print() {\r\n            pub.print();\r\n            console.log(URL);\r\n        }\r\n    };\r\n\r\n    return publicAPI;\r\n}\r\n```\r\n\r\nAl comparar estas formas con las formas `class`, hay más similitudes que diferencias.\r\n\r\nLa forma `class` almacena métodos y datos en una instancia de objeto, que debe ser accedida con el prefijo `this`.. Con los módulos, los métodos y datos se acceden como variables de identificador en el ámbito, sin ningún prefijo `this`.\r\n\r\nCon `class`, la \"API\" de una instancia es implícita en la definición de la `clase`; además, todos los datos y métodos son públicos. Con la función de fábrica del módulo, creas explícitamente y devuelves un objeto con cualquier método expuesto públicamente, y cualquier dato u otros métodos no referenciados permanecen privados dentro de la función de fábrica.\r\n\r\nHay otras variaciones de esta forma de función de fábrica que son bastante comunes en JS, incluso en 2020; puedes encontrarte con estas formas en diferentes programas de JS: AMD (Asynchronous Module Definition), UMD (Universal Module Definition) y CommonJS (módulos clásicos de Node.js). Las variaciones son menores (no son completamente compatibles). Sin embargo, todas estas formas se basan en los mismos principios básicos.\r\n\r\nConsidera también el uso (también conocido como \"instanciación\") de estas funciones de fábrica de módulos:\r\n\r\n```js\r\nvar YDKJS = Book({\r\n    title: \"You Don't Know JS\",\r\n    author: \"Kyle Simpson\",\r\n    publishedOn: \"June 2014\",\r\n    publisher: \"O'Reilly\",\r\n    ISBN: \"123456-789\"\r\n});\r\n\r\nYDKJS.print();\r\n// Title: You Don't Know JS\r\n// By: Kyle Simpson\r\n// June 2014\r\n// Publisher: O'Reilly\r\n// ISBN: 123456-789\r\n\r\nvar forAgainstLet = BlogPost(\r\n    \"For and against let\",\r\n    \"Kyle Simpson\",\r\n    \"October 27, 2014\",\r\n    \"https://davidwalsh.name/for-and-against-let\"\r\n);\r\n\r\nforAgainstLet.print();\r\n// Title: For and against let\r\n// By: Kyle Simpson\r\n// October 27, 2014\r\n// https://davidwalsh.name/for-and-against-let\r\n```\r\n\r\nLa única diferencia observable aquí es la falta de uso de `new`, llamando a las funciones de fábrica de módulos como funciones normales.\r\n\r\n#### ES Modules\r\n\r\nES modules (ESM), introducidos en el lenguaje JS en ES6, están destinados a servir en gran medida al mismo espíritu y propósito que los *módulos clásicos* existentes que acabo de describir, especialmente teniendo en cuenta variaciones importantes y casos de uso de AMD, UMD y CommonJS.\r\n\r\nSin embargo, el enfoque de implementación difiere significativamente.\r\n\r\nEn primer lugar, no hay una función de envoltura para *definir* un módulo. El contexto de envoltura es un archivo. Los ESM siempre se basan en archivos; un archivo, un módulo.\r\n\r\nEn segundo lugar, no interactúas con la \"API\" de un módulo explícitamente, sino que utilizas la palabra clave `export` para agregar una variable o método a su definición de API pública. Si algo está definido en un módulo pero no se `export`a, permanece oculto (igual que con los *módulos clásicos*).\r\n\r\nEn tercer lugar, y quizás lo más notablemente diferente de los patrones discutidos anteriormente, no \"instancias\" un módulo ES, simplemente lo `import`as para usar su instancia única. Los ESM son, de hecho, \"singleton\", en el sentido de que solo se crea una instancia en el primer `import` en tu programa, y todos los demás `import`s simplemente reciben una referencia a esa misma instancia única. Si tu módulo necesita admitir múltiples instanciaciones, debes proporcionar una función de fábrica de *estilo de módulo clásico* en tu definición de ESM con ese propósito.\r\n\r\nEn nuestro ejemplo en ejecución, asumimos la posibilidad de múltiples instanciaciones, por lo que estos fragmentos siguientes mezclarán tanto ESM como *módulos clásicos*.\r\n\r\nConsidera el archivo `publication.js`:\r\n\r\n```js\r\nfunction printDetails(title,author,pubDate) {\r\n    console.log(`\r\n        Title: ${ title }\r\n        By: ${ author }\r\n        ${ pubDate }\r\n    `);\r\n}\r\n\r\nexport function create(title,author,pubDate) {\r\n    var publicAPI = {\r\n        print() {\r\n            printDetails(title,author,pubDate);\r\n        }\r\n    };\r\n\r\n    return publicAPI;\r\n}\r\n```\r\n\r\nPara importar y usar este módulo, desde otro módulo de ES como `blogpost.js`\r\n\r\n```js\r\nimport { create as createPub } from \"publication.js\";\r\n\r\nfunction printDetails(pub,URL) {\r\n    pub.print();\r\n    console.log(URL);\r\n}\r\n\r\nexport function create(title,author,pubDate,URL) {\r\n    var pub = createPub(title,author,pubDate);\r\n\r\n    var publicAPI = {\r\n        print() {\r\n            printDetails(pub,URL);\r\n        }\r\n    };\r\n\r\n    return publicAPI;\r\n}\r\n```\r\n\r\nY finalmente, para usar este módulo, importamos a otro módulo de ES como `main.js`:\r\n\r\n```js\r\nimport { create as newBlogPost } from \"blogpost.js\";\r\n\r\nvar forAgainstLet = newBlogPost(\r\n    \"For and against let\",\r\n    \"Kyle Simpson\",\r\n    \"October 27, 2014\",\r\n    \"https://davidwalsh.name/for-and-against-let\"\r\n);\r\n\r\nforAgainstLet.print();\r\n// Title: For and against let\r\n// By: Kyle Simpson\r\n// October 27, 2014\r\n// https://davidwalsh.name/for-and-against-let\r\n```\r\n\r\n| NOTA: |\r\n| :--- |\r\n| La cláusula `as newBlogPost` en la declaración `import` es opcional; si se omite, se importaría una función de nivel superior simplemente llamada `create(..)`. En este caso, estoy cambiando su nombre por una cuestión de legibilidad; su nombre de fábrica más genérico, `create(..)`, se vuelve más descriptivo semánticamente como `newBlogPost(..)`. |\r\n\r\nComo se muestra, los ES modules pueden utilizar *módulos clásicos* internamente si necesitan admitir múltiples instanciaciones. Alternativamente, podríamos haber expuesto una `class` desde nuestro módulo en lugar de una función de fábrica `create(..)`, con generalmente el mismo resultado. Sin embargo, dado que ya estás utilizando ESM en ese punto, recomendaría quedarse con *módulos clásicos* en lugar de `class`.\r\n\r\nSi tu módulo solo necesita una única instancia, puedes omitir las capas adicionales de complejidad y `exportar` sus métodos públicos directamente.\r\n\r\n## La madriguera del conejo se profundiza\r\n\r\nComo se prometió al principio de este capítulo, acabamos de echar un vistazo superficial a una amplia área principal del lenguaje JavaScript. Es posible que tu cabeza aún esté dando vueltas, ¡pero eso es completamente natural después de recibir tanta información de golpe!\r\n\r\nIncluso con esta \"breve\" exploración de JavaScript, cubrimos o insinuamos una gran cantidad de detalles que deberías considerar cuidadosamente y asegurarte de que te sientas cómodo con ellos. Hablo en serio cuando sugiero: vuelve a leer este capítulo, quizás varias veces.\r\n\r\nEn el próximo capítulo, profundizaremos mucho más en algunos aspectos importantes de cómo funciona JavaScript en su núcleo. Pero antes de seguir ese agujero de conejo más profundamente, asegúrate de haber tomado el tiempo adecuado para digerir completamente lo que acabamos de cubrir aquí.","src/content/blog/libros/you-dont-know-js-yet/get-started/ch2.md","cedbc03d0ce34527",{"html":1571,"metadata":1572},"\u003Cp>La mejor manera de aprender JS es comenzar a escribir JS.\u003C/p>\n\u003Cp>Para hacer eso, necesitas entender cómo funciona el lenguaje, y eso es en lo que nos enfocaremos aquí. Incluso si has programado en otros lenguajes antes, tómate tu tiempo para familiarizarte con JS y asegúrate de practicar cada elemento.\u003C/p>\n\u003Cp>Este capítulo no es una referencia exhaustiva de cada aspecto de la sintaxis del lenguaje JS. Tampoco pretende ser un manual completo de “introducción a JS”.\u003C/p>\n\u003Cp>En cambio, simplemente vamos a explorar algunas de las áreas temáticas principales del lenguaje. Nuestro objetivo es obtener una mejor \u003Cem>sensación\u003C/em> por él, para poder avanzar escribiendo nuestros propios programas con más confianza. Volveremos a muchos de estos temas con más detalle a medida que avances en el resto de este libro y de la serie.\u003C/p>\n\u003Cp>Por favor, no esperes que este capítulo sea una lectura rápida. Es extenso y hay muchos detalles para analizar. Tómate tu tiempo.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">CONSEJO:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Si aún estás familiarizándote con JS, te sugiero que reserves mucho tiempo adicional para trabajar en este capítulo. Tómate cada sección, reflexiona y explora el tema durante un tiempo. Examina programas JS existentes y compara lo que ves en ellos con el código y las explicaciones (¡y opiniones!) presentadas aquí. Obtendrás mucho más del resto del libro y de la serie con una sólida comprensión de la \u003Cem>naturaleza\u003C/em> de JS.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"cada-archivo-es-un-programa\">Cada archivo es un programa\u003C/h2>\n\u003Cp>Casi todos los sitios web (aplicaciones web) que utilizas están compuestos por muchos archivos JS diferentes (normalmente con la extensión de archivo .js). Es tentador pensar en todo el conjunto (la aplicación) como un solo programa. Pero JS lo ve de manera diferente.\u003C/p>\n\u003Cp>En JS, cada archivo independiente es su propio programa separado.\u003C/p>\n\u003Cp>La razón por la que esto es importante se relaciona principalmente con el manejo de errores. Dado que JS trata los archivos como programas, un archivo puede fallar (durante el análisis/compilación o la ejecución) y eso no necesariamente evitará que el siguiente archivo se procese. Obviamente, si tu aplicación depende de cinco archivos .js y uno de ellos falla, es probable que la aplicación general solo funcione parcialmente, como máximo. Es importante asegurarse de que cada archivo funcione correctamente y, en la medida de lo posible, manejar los fallos en otros archivos de la manera más elegante posible.\u003C/p>\n\u003Cp>Puede sorprenderte considerar archivos .js separados como programas JS independientes. Desde la perspectiva de tu uso de una aplicación, parece que es un solo programa grande. Eso se debe a que la ejecución de la aplicación permite que estos \u003Cem>programas\u003C/em> individuales cooperen y actúen como un solo programa.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Muchos proyectos utilizan herramientas de procesamiento de compilación que combinan archivos separados del proyecto en un solo archivo para ser entregado a una página web. Cuando esto sucede, JS trata este único archivo combinado como el programa completo.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>La única forma en que varios archivos .js independientes actúan como un solo programa es compartiendo su estado (y acceso a su funcionalidad pública) a través del “ámbito global”. Se mezclan en este espacio de nombres de ámbito global, por lo que en tiempo de ejecución actúan como un conjunto.\u003C/p>\n\u003Cp>Desde ES6, JS también admite un formato de módulo además del formato típico de programa JS independiente. Los módulos también están basados en archivos. Si un archivo se carga a través de un mecanismo de carga de módulos, como una declaración \u003Ccode>import\u003C/code> o una etiqueta \u003Ccode>&#x3C;script type=module>\u003C/code>, todo su código se trata como un solo módulo.\u003C/p>\n\u003Cp>Aunque normalmente no pensarías en un módulo, una colección de estado y métodos expuestos públicamente para operar en ese estado, como un programa independiente, JS trata cada módulo por separado. De manera similar a cómo el “ámbito global” permite que los archivos independientes se mezclen en tiempo de ejecución, la importación de un módulo en otro permite la interacción en tiempo de ejecución entre ellos.\u003C/p>\n\u003Cp>Independientemente del patrón de organización de código (y mecanismo de carga) que se utilice para un archivo (independiente o módulo), aún debes considerar cada archivo como su propio programa (mini), que luego puede cooperar con otros programas (mini) para realizar las funciones de tu aplicación en general.\u003C/p>\n\u003Ch2 id=\"valores\">Valores\u003C/h2>\n\u003Cp>La unidad más fundamental de información en un programa es un valor. Los valores son datos. Son cómo el programa mantiene el estado. Los valores se presentan en dos formas en JS: \u003Cstrong>primitivos\u003C/strong> y \u003Cstrong>objetos\u003C/strong>.\u003C/p>\n\u003Cp>Los valores se incorporan en los programas mediante \u003Cem>literales\u003C/em>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My name is Kyle.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este programa, el valor \u003Ccode>\"My name is Kyle.\"\u003C/code> es un literal primitivo de cadena; las cadenas son colecciones ordenadas de caracteres, generalmente utilizadas para representar palabras y oraciones.\u003C/p>\n\u003Cp>Usé el carácter de comillas dobles \u003Ccode>\"\u003C/code> para \u003Cem>delimitar\u003C/em> (encerrar, separar, definir) el valor de la cadena. Pero también podría haber utilizado el carácter de comillas simples \u003Ccode>'\u003C/code>. La elección del carácter de comillas es completamente estilística. Lo importante, para la legibilidad y el mantenimiento del código, es elegir uno y usarlo consistentemente en todo el programa.\u003C/p>\n\u003Cp>Otra opción para delimitar un literal de cadena es usar el carácter de tilde invertida \u003Ccode>`\u003C/code>. Sin embargo, esta elección no es simplemente estilística; también hay una diferencia de comportamiento. Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My name is ${ firstName }.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// My name is ${ firstName }.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'My name is ${ firstName }.'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// My name is ${ firstName }.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`My name is ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> firstName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }.`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// My name is Kyle.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Suponiendo que este programa ya ha definido una variable \u003Ccode>firstName\u003C/code> con el valor de cadena \u003Ccode>\"Kyle\"\u003C/code>, la cadena delimitada por \u003Ccode>`\u003C/code> resuelve la expresión de variable (indicada con \u003Ccode>${ .. }\u003C/code>) a su valor actual. Esto se llama \u003Cstrong>interpolación\u003C/strong>.\u003C/p>\n\u003Cp>La cadena delimitada por la tilde invertida \u003Ccode>`\u003C/code> se puede usar sin incluir expresiones interpoladas, pero eso va en contra del propósito de esa sintaxis alternativa de literales de cadena:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    `¿Te estoy confundiendo al omitir la interpolación?`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ¿Te estoy confundiendo al omitir la interpolación?\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La mejor manera es usar \u003Ccode>\"\u003C/code> o \u003Ccode>'\u003C/code> (nuevamente, ¡elige uno y quédate con él!) para las cadenas \u003Cem>a menos que necesites\u003C/em> interpolación; reserva \u003Ccode>`\u003C/code> solo para cadenas que incluirán expresiones interpoladas.\u003C/p>\n\u003Cp>Además de las cadenas, los programas de JS a menudo contienen otros valores literales primitivos como booleanos y números:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3.141592\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>while\u003C/code> representa un tipo de bucle, una forma de repetir operaciones \u003Cem>mientras\u003C/em> su condición sea verdadera.\u003C/p>\n\u003Cp>En este caso, el bucle nunca se ejecutará (y no se imprimirá nada), porque usamos el valor booleano \u003Ccode>false\u003C/code> como condición del bucle. \u003Ccode>true\u003C/code> habría resultado en un bucle que seguiría ejecutándose para siempre, ¡así que ten cuidado!\u003C/p>\n\u003Cp>El número \u003Ccode>3.141592\u003C/code> es, como sabrás, una aproximación de PI matemático a las primeras seis cifras. En lugar de incrustar dicho valor, sin embargo, normalmente usarías el valor predefinido \u003Ccode>Math.PI\u003C/code> para ese propósito. Otra variante de los números es el tipo primitivo \u003Ccode>bigint\u003C/code> (número entero grande), que se utiliza para almacenar números arbitrariamente grandes.\u003C/p>\n\u003Cp>Los números se utilizan más a menudo en los programas para contar pasos, como las iteraciones de un bucle, y para acceder a la información en posiciones numéricas (por ejemplo, un índice de matriz). Cubriremos arrays/objetos en un momento, pero como ejemplo, si hubiera un array llamado \u003Ccode>names\u003C/code>, podríamos acceder al elemento en su segunda posición de esta manera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`My name is ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> names\u003C/span>\u003Cspan style=\"color:#9ECBFF\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#9ECBFF\">] \u003C/span>\u003Cspan style=\"color:#9ECBFF\">}.`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// My name is Kyle.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Usamos \u003Ccode>1\u003C/code> para el elemento en la segunda posición, en lugar de \u003Ccode>2\u003C/code>, porque al igual que en la mayoría de los lenguajes de programación, los índices de arrays en JS comienzan en 0 (\u003Ccode>0\u003C/code> es la primera posición).\u003C/p>\n\u003Cp>Además de las cadenas de texto, los números y los booleanos, otros dos valores \u003Cem>primitivos\u003C/em> en los programas de JS son \u003Ccode>null\u003C/code> e \u003Ccode>undefined\u003C/code>. Aunque hay diferencias entre ellos (algunas históricas y otras contemporáneas), en su mayor parte ambos valores sirven para indicar la \u003Cem>falta\u003C/em> (o ausencia) de un valor.\u003C/p>\n\u003Cp>Muchos desarrolladores prefieren tratarlos de manera consistente de esta manera, es decir, asumir que los valores son indistinguibles. Si se tiene cuidado, esto a menudo es posible. Sin embargo, es más seguro y mejor usar solo \u003Ccode>undefined\u003C/code> como el único valor vacío, aunque \u003Ccode>null\u003C/code> pueda parecer atractivo por ser más corto de escribir.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (value \u003C/span>\u003Cspan style=\"color:#F97583\">!=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Still got something!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>El último valor primitivo del que debes tener conocimiento es el símbolo, que es un valor de propósito especial que se comporta como un valor oculto e impredecible. Los símbolos se utilizan casi exclusivamente como claves especiales en objetos:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">hitchhikersGuide[ \u003C/span>\u003Cspan style=\"color:#B392F0\">Symbol\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"meaning of life\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 42\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>No encontrarás el uso directo de símbolos muy a menudo en programas JS típicos. Se utilizan principalmente en código de bajo nivel, como en bibliotecas y frameworks.\u003C/p>\n\u003Ch3 id=\"arrays-y-objects\">Arrays y Objects\u003C/h3>\n\u003Cp>Además de los primitivos, el otro tipo de valor en JS es el valor objeto.\u003C/p>\n\u003Cp>Como se mencionó anteriormente, los arrays son un tipo especial de objeto que está compuesto por una lista ordenada e indexada numéricamente de datos:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> names \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Frank\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Peter\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Susan\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">names.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">names[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Frank\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">names[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Los arrays de JS pueden contener cualquier tipo de valor, ya sea primitivo u objeto (incluyendo otros arrays). Como veremos hacia el final del Capítulo 3, incluso las funciones son valores que se pueden almacenar en arrays u objetos.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Las funciones, al igual que los arrays, son un tipo especial (también conocido como subtipo) de objeto. Cubriremos las funciones con más detalle en un momento.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Los objetos son más generales: una colección desordenada y con claves de varios valores. En otras palabras, accedes al elemento mediante un nombre de ubicación de cadena (también conocido como “clave” o “propiedad”) en lugar de por su posición numérica (como en los arrays). Por ejemplo:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> me \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    first: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    last: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    age: \u003C/span>\u003Cspan style=\"color:#79B8FF\">39\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    specialties: [ \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"JS\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Table Tennis\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`My name is ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> me\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">first\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }.`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Aquí, \u003Ccode>me\u003C/code> representa un objeto, y \u003Ccode>first\u003C/code> representa el nombre de una ubicación de información en ese objeto (colección de valores). Otra opción de sintaxis que accede a la información en un objeto por su propiedad/clave utiliza corchetes cuadrados \u003Ccode>[ ]\u003C/code>, como \u003Ccode>me[\"first\"]\u003C/code>.\u003C/p>\n\u003Ch3 id=\"determinación-del-tipo-de-valor\">Determinación del tipo de valor\u003C/h3>\n\u003Cp>Para distinguir valores, el operador \u003Ccode>typeof\u003C/code> te dice su tipo incorporado, si es primitivo, o \u003Ccode>\"object\"\u003C/code> en caso contrario:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 42\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;                  \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"number\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"abc\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;               \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"string\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;                \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"boolean\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;           \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"undefined\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;                \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"object\" -- oops, bug!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"a\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> };          \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"object\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];             \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"object\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typeof\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(){};  \u003C/span>\u003Cspan style=\"color:#6A737D\">// \"function\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">ADVERTENCIA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">\u003Ccode>typeof null\u003C/code> desafortunadamente devuelve \u003Ccode>\"object\"\u003C/code> en lugar del esperado \u003Ccode>\"null\"\u003C/code>. Además, \u003Ccode>typeof\u003C/code> devuelve el específico \u003Ccode>\"function\"\u003C/code> para funciones, pero no el esperado \u003Ccode>\"array\"\u003C/code> para arrays.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>La conversión de un tipo de valor a otro, como de cadena a número, se denomina “coerción” en JS. Cubriremos esto con más detalle más adelante en este capítulo.\u003C/p>\n\u003Cp>Los valores primitivos y los valores de objeto se comportan de manera diferente cuando se asignan o se pasan. Cubriremos estos detalles en el Apéndice A, “Valores vs Referencias”.\u003C/p>\n\u003Ch2 id=\"declaración-y-uso-de-variables\">Declaración y uso de variables\u003C/h2>\n\u003Cp>Para ser explícito acerca de algo que quizás no fue evidente en la sección anterior: en los programas de JS, los valores pueden aparecer como valores literales (como muchos de los ejemplos anteriores ilustran), o pueden estar contenidos en variables; piensa en las variables como simples contenedores para valores.\u003C/p>\n\u003Cp>Las variables deben declararse (crearse) antes de ser utilizadas. Hay varias formas de sintaxis que declaran variables (también conocidas como “identificadores”), y cada forma tiene comportamientos implícitos diferentes.\u003C/p>\n\u003Cp>Por ejemplo, considera la declaración \u003Ccode>var\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La palabra clave \u003Ccode>var\u003C/code> declara una variable para ser utilizada en esa parte del programa y opcionalmente permite una asignación inicial de un valor.\u003C/p>\n\u003Cp>Otra palabra clave similar es \u003Ccode>let\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La palabra clave \u003Ccode>let\u003C/code> tiene algunas diferencias con \u003Ccode>var\u003C/code>, siendo la más evidente que \u003Ccode>let\u003C/code> permite un acceso más limitado a la variable que \u003Ccode>var\u003C/code>. Esto se llama “block scoping” (ámbito de bloque) en lugar de ámbito regular o de función.\u003C/p>\n\u003Cp>Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> adult \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (adult) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 39\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Shhh, this is a secret!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(myName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Kyle\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(age);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Error!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>El intento de acceder a \u003Ccode>age\u003C/code> fuera de la declaración \u003Ccode>if\u003C/code> resulta en un error porque \u003Ccode>age\u003C/code> tiene un ámbito de bloque limitado al \u003Ccode>if\u003C/code>, mientras que \u003Ccode>myName\u003C/code> no lo tiene.\u003C/p>\n\u003Cp>El ámbito de bloque es muy útil para limitar la extensión de las declaraciones de variables en nuestros programas, lo que ayuda a evitar la superposición accidental de sus nombres.\u003C/p>\n\u003Cp>Pero \u003Ccode>var\u003C/code> aún es útil porque comunica “esta variable será vista por un ámbito más amplio (de toda la función)”. Ambas formas de declaración pueden ser apropiadas en cualquier parte de un programa, según las circunstancias.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Es muy común sugerir que se evite \u003Ccode>var\u003C/code> a favor de \u003Ccode>let\u003C/code> (¡o \u003Ccode>const\u003C/code>!), generalmente debido a la percepción de confusión sobre cómo ha funcionado el comportamiento de ámbito de \u003Ccode>var\u003C/code> desde el principio de JS. Creo que este consejo es demasiado restrictivo y, en última instancia, poco útil. Está asumiendo que no puedes aprender y usar una característica correctamente en combinación con otras características. ¡Creo que \u003Cem>puedes\u003C/em> y \u003Cem>debes\u003C/em> aprender todas las características disponibles y usarlas donde sea apropiado!\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Una tercera forma de declaración es \u003Ccode>const\u003C/code>. Es similar a \u003Ccode>let\u003C/code> pero tiene una limitación adicional: debe recibir un valor en el momento de su declaración y no se le puede asignar un valor diferente más tarde.\u003C/p>\n\u003Cp>Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> myBirthday\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 39\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (myBirthday) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;    \u003C/span>\u003Cspan style=\"color:#6A737D\">// OK!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    myBirthday \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">// Error!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La constante \u003Ccode>myBirthday\u003C/code> no se permite volver a asignarse.\u003C/p>\n\u003Cp>Las variables declaradas con \u003Ccode>const\u003C/code> no son “inmutables”, simplemente no se les puede volver a asignar. No se recomienda usar \u003Ccode>const\u003C/code> con valores de objetos, porque esos valores aún se pueden cambiar aunque la variable no pueda volver a asignarse. Esto lleva a posibles confusiones más adelante, por lo que creo que es prudente evitar situaciones como:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> actors\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"Morgan Freeman\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Jennifer Aniston\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">actors[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Tom Cruise\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;   \u003C/span>\u003Cspan style=\"color:#6A737D\">// OK :(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">actors \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];                \u003C/span>\u003Cspan style=\"color:#6A737D\">// Error!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>El mejor uso semántico de un \u003Ccode>const\u003C/code> es cuando tiene un valor primitivo simple al que desea darle un nombre útil, como usar \u003Ccode>myBirthday\u003C/code> en lugar de \u003Ccode>true\u003C/code>. Esto hace que los programas sean más fáciles de leer.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">CONSEJO:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Si te limitas a usar \u003Ccode>const\u003C/code> solo con valores primitivos, evitas cualquier confusión entre la reasignación (no permitida) y la mutación (permitida). ¡Esa es la forma más segura y mejor de usar \u003Ccode>const\u003C/code>!\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Además de \u003Ccode>var\u003C/code> / \u003Ccode>let\u003C/code> / \u003Ccode>const\u003C/code>, hay otras formas sintácticas que declaran identificadores (variables) en varios ámbitos. Por ejemplo:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">myName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Hello, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }.`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">hello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Hello, Kyle.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>El identificador \u003Ccode>hello\u003C/code> se crea en el ámbito externo, y también se asocia automáticamente para que haga referencia a la función. Pero el parámetro con nombre \u003Ccode>myName\u003C/code> se crea solo dentro de la función y, por lo tanto, solo es accesible dentro del ámbito de esa función. \u003Ccode>hello\u003C/code> y \u003Ccode>myName\u003C/code> generalmente se comportan como si fueran declarados con \u003Ccode>var\u003C/code>.\u003C/p>\n\u003Cp>Otra sintaxis que declara una variable es una cláusula \u003Ccode>catch\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    someError\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">catch\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (err) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(err);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La variable \u003Ccode>err\u003C/code> es una variable con ámbito de bloque que existe solo dentro de la cláusula \u003Ccode>catch\u003C/code>, como si hubiera sido declarada con \u003Ccode>let\u003C/code>.\u003C/p>\n\u003Ch2 id=\"functions\">Functions\u003C/h2>\n\u003Cp>La palabra “function” tiene una variedad de significados en programación. Por ejemplo, en el mundo de la Programación Funcional, “function” tiene una definición matemática precisa e implica un conjunto estricto de reglas a seguir.\u003C/p>\n\u003Cp>En JS, deberíamos considerar “function” con el significado más amplio de otro término relacionado: “procedure” (procedimiento). Un procedimiento es una colección de declaraciones que se pueden invocar una o más veces, puede recibir algunos inputs y puede devolver uno o más outputs.\u003C/p>\n\u003Cp>Desde los primeros días de JS, la definición de función se veía así:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> awesomeFunction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">coolThings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> amazingStuff;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Esto se llama una declaración de función porque aparece como una declaración por sí misma, no como una expresión en otra declaración. La asociación entre el identificador \u003Ccode>awesomeFunction\u003C/code> y el valor de la función ocurre durante la fase de compilación del código, antes de que ese código se ejecute.\u003C/p>\n\u003Cp>En contraste con una declaración de función, una expresión de función se puede definir y asignar de la siguiente manera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// let awesomeFunction = ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// const awesomeFunction = ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#B392F0\"> awesomeFunction\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">coolThings\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // ..\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> amazingStuff;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Esta función es una expresión que se asigna a la variable \u003Ccode>awesomeFunction\u003C/code>. A diferencia de la forma de declaración de función, una expresión de función no se asocia con su identificador hasta esa declaración durante el tiempo de ejecución.\u003C/p>\n\u003Cp>Es extremadamente importante señalar que en JS, las funciones son valores que se pueden asignar (como se muestra en este fragmento) y pasar alrededor. De hecho, las funciones de JS son un tipo especial del tipo de valor objeto. No todos los lenguajes tratan las funciones como valores, pero es esencial que un lenguaje admita el patrón de programación funcional, como lo hace JS.\u003C/p>\n\u003Cp>Las funciones de JS pueden recibir parámetros de entrada:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">myName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Hello, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);   \u003C/span>\u003Cspan style=\"color:#6A737D\">// Hello, Kyle!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este fragmento, \u003Ccode>myName\u003C/code> se llama un parámetro, que actúa como una variable local dentro de la función. Las funciones pueden definirse para recibir cualquier cantidad de parámetros, desde ninguno hacia arriba, según lo consideres apropiado. A cada parámetro se le asigna el valor del argumento que pases en esa posición (\u003Ccode>\"Kyle\"\u003C/code>, aquí) de la llamada.\u003C/p>\n\u003Cp>Las funciones también pueden devolver valores usando la palabra clave \u003Ccode>return\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">myName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `Hello, ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> myName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> msg \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(msg);   \u003C/span>\u003Cspan style=\"color:#6A737D\">// Hello, Kyle!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Solo puedes \u003Ccode>return\u003C/code> un único valor, pero si tienes más valores para devolver, puedes agruparlos en un solo objeto o matriz.\u003C/p>\n\u003Cp>Dado que las funciones son valores, se pueden asignar como propiedades en objetos:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> whatToSay \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Hello!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    question\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"What's your name?\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    answer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"My name is Kyle.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">whatToSay.\u003C/span>\u003Cspan style=\"color:#B392F0\">greeting\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Hello!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este fragmento, se incluyen referencias a tres funciones (\u003Ccode>greeting()\u003C/code>, \u003Ccode>question()\u003C/code> y \u003Ccode>answer()\u003C/code>) en el objeto contenido por \u003Ccode>whatToSay\u003C/code>. Cada función se puede llamar accediendo a la propiedad para recuperar el valor de referencia de la función. Compara este estilo directo de definir funciones en un objeto con la sintaxis más sofisticada de \u003Ccode>class\u003C/code> que se discute más adelante en este capítulo.\u003C/p>\n\u003Cp>Existen muchas formas variadas que pueden tener las funciones en JS. Exploraremos estas variaciones en el Apéndice A, “Tantas Formas de Funciones”.\u003C/p>\n\u003Ch2 id=\"comparaciones\">Comparaciones\u003C/h2>\n\u003Cp>Tomar decisiones en los programas requiere comparar valores para determinar su identidad y relación entre sí. JS tiene varios mecanismos para permitir la comparación de valores, así que echemos un vistazo más de cerca a ellos.\u003C/p>\n\u003Ch3 id=\"equalish\">Equal…ish\u003C/h3>\n\u003Cp>La comparación más común en los programas de JS hace la pregunta: “¿Este valor X es \u003Cem>igual que\u003C/em> ese valor Y?” ¿Qué significa realmente “igual que” para JS?\u003C/p>\n\u003Cp>Sin embargo, por razones ergonómicas e históricas, el significado es más complicado que el obvio tipo de coincidencia de \u003Cem>identidad exacta\u003C/em>. A veces, una comparación de igualdad pretende coincidencia \u003Cem>exacta\u003C/em>, pero otras veces la comparación deseada es un poco más amplia, permitiendo coincidencias \u003Cem>cercanamente similares\u003C/em> o \u003Cem>intercambiables\u003C/em>. En otras palabras, debemos ser conscientes de las diferencias matizadas entre una comparación de \u003Cstrong>igualdad\u003C/strong> y una de \u003Cstrong>equivalencia\u003C/strong>.\u003C/p>\n\u003Cp>Si has pasado algún tiempo trabajando y leyendo sobre JS, seguramente has visto el llamado operador “triple igual” \u003Ccode>===\u003C/code>, también conocido como el operador de “igualdad estricta”. Eso parece bastante sencillo, ¿verdad? Seguramente, “estricto” significa estricto, como en estrecho y \u003Cem>exacto\u003C/em>.\u003C/p>\n\u003Cp>No exactamente.\u003C/p>\n\u003Cp>Sí, la mayoría de los valores que participan en una comparación de igualdad \u003Ccode>===\u003C/code> se ajustarán a esa intuición \u003Cem>exactamente la misma\u003C/em>. Considera algunos ejemplos:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;              \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"yes\"\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"yes\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;        \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;          \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;        \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">42\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"42\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;            \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"hello\"\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;             \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;             \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> null\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;            \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">null\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> undefined\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;     \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">Otra forma en que a menudo se describe la comparación de igualdad de \u003Ccode>===\u003C/code> es “verificar tanto el valor como el tipo”. En varios de los ejemplos que hemos visto hasta ahora, como \u003Ccode>42 === \"42\"\u003C/code>, el \u003Cem>tipo\u003C/em> de ambos valores (número, cadena, etc.) parece ser el factor distintivo. Sin embargo, hay más que eso. \u003Cstrong>Todas\u003C/strong> las comparaciones de valores en JS consideran el tipo de los valores que se están comparando, no \u003Cem>solo\u003C/em> el operador \u003Ccode>===\u003C/code>. Específicamente, \u003Ccode>===\u003C/code> prohíbe cualquier tipo de conversión de tipo (también conocida como “coerción”) en su comparación, mientras que otras comparaciones en JS \u003Cem>sí\u003C/em> permiten la coerción.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Pero el operador \u003Ccode>===\u003C/code> tiene cierta complejidad, un hecho que muchos desarrolladores de JS pasan por alto, en detrimento propio. El operador \u003Ccode>===\u003C/code> está diseñado para \u003Cem>mentir\u003C/em> en dos casos de valores especiales: \u003Ccode>NaN\u003C/code> y \u003Ccode>-0\u003C/code>. Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">NaN\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NaN\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;            \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#F97583\"> ===\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;               \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En el caso de \u003Ccode>NaN\u003C/code>, el operador \u003Ccode>===\u003C/code> \u003Cem>miente\u003C/em> y dice que una ocurrencia de \u003Ccode>NaN\u003C/code> no es igual a otro \u003Ccode>NaN\u003C/code>. En el caso de \u003Ccode>-0\u003C/code> (sí, este es un valor real y distinto que puedes usar intencionalmente en tus programas), el operador \u003Ccode>===\u003C/code> \u003Cem>miente\u003C/em> y dice que es igual al valor regular \u003Ccode>0\u003C/code>.\u003C/p>\n\u003Cp>Dado que \u003Cem>mentir\u003C/em> acerca de tales comparaciones puede resultar molesto, es mejor evitar el uso de \u003Ccode>===\u003C/code> para ellas. Para comparaciones de \u003Ccode>NaN\u003C/code>, utiliza la utilidad \u003Ccode>Number.isNaN(..)\u003C/code>, que no \u003Cem>miente\u003C/em>. Para la comparación de \u003Ccode>-0\u003C/code>, utiliza la utilidad \u003Ccode>Object.is(..)\u003C/code>, que también no \u003Cem>miente\u003C/em>. \u003Ccode>Object.is(..)\u003C/code> también se puede utilizar para comprobaciones de \u003Ccode>NaN\u003C/code> sin \u003Cem>mentir\u003C/em>, si lo prefieres. Irónicamente, podrías pensar en \u003Ccode>Object.is(..)\u003C/code> como el “cuádruple igual” \u003Ccode>====,\u003C/code> ¡la comparación realmente realmente estricta!\u003C/p>\n\u003Cp>Hay razones históricas y técnicas más profundas para estos \u003Cem>engaños\u003C/em>, pero eso no cambia el hecho de que \u003Ccode>===\u003C/code> no es realmente una comparación \u003Cem>estrictamente exactamente igual\u003C/em> en el sentido \u003Cem>más estricto\u003C/em>.\u003C/p>\n\u003Cp>La historia se vuelve aún más complicada cuando consideramos comparaciones de valores de objeto (no primitivos). Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[ \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ] \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{ \u003C/span>\u003Cspan style=\"color:#B392F0\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">42\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> } \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { a: \u003C/span>\u003Cspan style=\"color:#79B8FF\">42\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }         \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">x\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)   \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>¿Qué está pasando aquí?\u003C/p>\n\u003Cp>Puede parecer razonable asumir que una comprobación de igualdad considera la \u003Cem>naturaleza\u003C/em> o \u003Cem>contenido\u003C/em> del valor; después de todo, \u003Ccode>42 === 42\u003C/code> considera el valor \u003Ccode>42\u003C/code> real y lo compara. Pero cuando se trata de objetos, una comparación consciente del contenido se denomina generalmente “igualdad estructural”.\u003C/p>\n\u003Cp>JS no define \u003Ccode>===\u003C/code> como \u003Cem>igualdad estructural\u003C/em> para valores de objeto. En cambio, \u003Ccode>===\u003C/code> utiliza \u003Cem>igualdad por identidad\u003C/em> para valores de objeto.\u003C/p>\n\u003Cp>En JS, todos los valores de objeto se mantienen por referencia (consulta “Valores vs Referencias” en el Apéndice A), se asignan y pasan por referencia-copia, \u003Cstrong>y\u003C/strong> para nuestra discusión actual, se comparan por igualdad de referencia (identidad). Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// la asignación es por copia de referencia, así que\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// y hace referencia al *mismo* array que x,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// no a otra copia de él.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x;              \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">y \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];    \u003C/span>\u003Cspan style=\"color:#6A737D\">// false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En este fragmento, \u003Ccode>y === x\u003C/code> es verdadero porque ambas variables tienen una referencia al mismo array inicial. Pero las comparaciones \u003Ccode>=== [1,2,3]\u003C/code> fallan porque \u003Ccode>y\u003C/code> y \u003Ccode>x\u003C/code>, respectivamente, se comparan con nuevos \u003Cem>diferentes\u003C/em> arrays \u003Ccode>[1,2,3]\u003C/code>. La estructura y el contenido del array no importan en esta comparación, solo la \u003Cstrong>identidad de la referencia\u003C/strong>.\u003C/p>\n\u003Cp>JS no proporciona un mecanismo para la comparación de igualdad estructural de valores de objeto, solo la comparación de identidad de referencia. Para hacer una comparación de igualdad estructural, deberás implementar las verificaciones tú mismo.\u003C/p>\n\u003Cp>Pero ten cuidado, es más complicado de lo que asumirás. Por ejemplo, ¿cómo determinarías si dos referencias a funciones son “estructuralmente equivalentes”? Incluso convertir a cadena para comparar su código fuente no tendría en cuenta cosas como el cierre. JS no proporciona una comparación de igualdad estructural porque es casi inabordable manejar todos los casos particulares.\u003C/p>\n\u003Ch3 id=\"comparaciones-coercitivas\">Comparaciones coercitivas\u003C/h3>\n\u003Cp>La coerción significa que un valor de un tipo se convierte en su representación respectiva en otro tipo (en la medida de lo posible). Como discutiremos en el Capítulo 4, la coerción es un pilar fundamental del lenguaje JS, no alguna característica opcional que se pueda evitar razonablemente.\u003C/p>\n\u003Cp>Pero cuando la coerción se encuentra con operadores de comparación (como la igualdad), la confusión y la frustración desafortunadamente surgen con más frecuencia de la deseada.\u003C/p>\n\u003Cp>Pocos aspectos de JS generan más críticas en la comunidad JS en general que el operador \u003Ccode>==\u003C/code>, generalmente conocido como el operador de “igualdad laxa”. La mayoría de los escritos y el discurso público sobre JS condenan este operador como mal diseñado y peligroso o lleno de errores cuando se usa en programas de JS. Incluso el creador del lenguaje, Brendan Eich, ha lamentado cómo se diseñó como un gran error.\u003C/p>\n\u003Cp>Según lo que puedo decir, la mayor parte de esta frustración proviene de una lista bastante corta de casos confusos, pero un problema más profundo es la concepción extremadamente extendida de que realiza sus comparaciones sin considerar los tipos de los valores que compara.\u003C/p>\n\u003Cp>El operador == realiza una comparación de igualdad de manera similar a como lo hace \u003Ccode>===\u003C/code>. De hecho, ambos operadores consideran el tipo de los valores que se están comparando. Y si la comparación es entre el mismo tipo de valor, tanto \u003Ccode>==\u003C/code> como \u003Ccode>===\u003C/code> \u003Cstrong>hacen exactamente lo mismo, ninguna diferencia en absoluto\u003C/strong>.\u003C/p>\n\u003Cp>Si los tipos de valor que se están comparando son diferentes, el \u003Ccode>==\u003C/code> difiere de \u003Ccode>===\u003C/code> en que permite la coerción antes de la comparación. En otras palabras, ambos quieren comparar valores del mismo tipo, pero \u003Ccode>==\u003C/code> permite conversiones de tipo \u003Cem>primero\u003C/em>, y una vez que los tipos se han convertido para que sean iguales en ambos lados, entonces \u003Ccode>==\u003C/code> hace lo mismo que \u003Ccode>===\u003C/code>. En lugar de “igualdad laxa”, el operador \u003Ccode>==\u003C/code> debería describirse como “igualdad coercitiva”.\u003C/p>\n\u003Cp>Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">42\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"42\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;             \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\"> ==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;              \u003C/span>\u003Cspan style=\"color:#6A737D\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En ambas comparaciones, los tipos de valor son diferentes, por lo que el \u003Ccode>==\u003C/code> hace que los valores no numéricos (\u003Ccode>\"42\"\u003C/code> y \u003Ccode>true\u003C/code>) se conviertan a números (\u003Ccode>42\u003C/code> y \u003Ccode>1\u003C/code>, respectivamente) antes de realizar las comparaciones.\u003C/p>\n\u003Cp>Ser consciente de esta naturaleza de \u003Ccode>==\u003C/code>—que prefiere comparaciones numéricas primitivas—te ayuda a evitar la mayoría de los casos problemáticos, como alejarte de situaciones confusas como \u003Ccode>\"\" == 0\u003C/code> o \u003Ccode>0 == false\u003C/code>.\u003C/p>\n\u003Cp>Puede que estés pensando, “Bueno, simplemente evitaré cualquier comparación de igualdad coercitiva (usando \u003Ccode>===\u003C/code> en su lugar) para evitar esos casos especiales”. Eh, lo siento, no es tan probable como esperarías.\u003C/p>\n\u003Cp>Hay una buena probabilidad de que utilices operadores de comparación relacional como \u003Ccode>&#x3C;\u003C/code>, \u003Ccode>>\u003C/code> (e incluso \u003Ccode>&#x3C;=\u003C/code> y \u003Ccode>>=\u003C/code>).\u003C/p>\n\u003Cp>Al igual que \u003Ccode>==\u003C/code>, estos operadores se comportarán como “estrictos” si los tipos que se están comparando relacionalmente ya coinciden, pero permitirán la coerción primero (generalmente, a números) si los tipos difieren.\u003C/p>\n\u003Cp>Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [ \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"10\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"100\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"1000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr.\u003C/span>\u003Cspan style=\"color:#79B8FF\">length\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[i] \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 500\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // will run 3 times\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La comparación \u003Ccode>i &#x3C; arr.length\u003C/code> es “segura” contra la coerción porque \u003Ccode>i\u003C/code> y \u003Ccode>arr.length\u003C/code> siempre son números. Sin embargo, la comparación \u003Ccode>arr[i] &#x3C; 500\u003C/code> invoca la coerción, ya que los valores de \u003Ccode>arr[i]\u003C/code> son todos cadenas. Estas comparaciones se convierten en \u003Ccode>1 &#x3C; 500\u003C/code>, \u003Ccode>10 &#x3C; 500\u003C/code>, \u003Ccode>100 &#x3C; 500\u003C/code> y \u003Ccode>1000 &#x3C; 500\u003C/code>. Dado que esta última es falsa, el bucle se detiene después de su tercera iteración.\u003C/p>\n\u003Cp>Estos operadores relacionales suelen utilizar comparaciones numéricas, excepto en el caso en que \u003Cstrong>ambos\u003C/strong> valores que se están comparando ya son cadenas; en este caso, utilizan la comparación alfabética (similar a un diccionario) de las cadenas:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"10\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"9\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">x \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> y;      \u003C/span>\u003Cspan style=\"color:#6A737D\">// true, watch out!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>No hay forma de evitar la coerción con estos operadores relacionales, aparte de simplemente no usar tipos incompatibles en las comparaciones. Eso puede ser loable como objetivo, pero aún es bastante probable que te encuentres con un caso en el que los tipos \u003Cem>puedan\u003C/em> diferir.\u003C/p>\n\u003Cp>La estrategia más sabia no es evitar las comparaciones coercitivas, sino abrazarlas y aprender sus pormenores.\u003C/p>\n\u003Cp>Las comparaciones coercitivas surgen en otros lugares en JS, como en las condicionales (\u003Ccode>if\u003C/code>, etc.), que volveremos a visitar en el Apéndice A, “Comparación Condicional Coercitiva”.\u003C/p>\n\u003Ch2 id=\"cómo-nos-organizamos-en-js\">Cómo nos organizamos en JS\u003C/h2>\n\u003Cp>Dos patrones principales para organizar código (datos y comportamiento) se utilizan ampliamente en todo el ecosistema de JS: clases y módulos. Estos patrones no son mutuamente excluyentes; muchos programas pueden y de hecho utilizan ambos. Otros programas se limitarán a usar solo un patrón, o incluso ninguno.\u003C/p>\n\u003Cp>En algunos aspectos, estos patrones son muy diferentes. Pero curiosamente, en otros aspectos, son simplemente diferentes caras de la misma moneda. Ser competente en JS requiere comprender ambos patrones y dónde son apropiados (¡y dónde no!).\u003C/p>\n\u003Ch3 id=\"classes\">Classes\u003C/h3>\n\u003Cp>Los términos “orientado a objetos”, “orientado a clases” y “clases” están cargados de detalles y matices; no tienen una definición universal.\u003C/p>\n\u003Cp>Utilizaremos una definición común y algo tradicional aquí, la que es más probable que sea familiar para aquellos con antecedentes en lenguajes “orientados a objetos” como C++ y Java.\u003C/p>\n\u003Cp>Una clase en un programa es una definición de un “tipo” de estructura de datos personalizada que incluye tanto datos como comportamientos que operan en esos datos. Las clases definen cómo funciona tal estructura de datos, pero las clases en sí no son valores concretos. Para obtener un valor concreto que se pueda usar en el programa, una clase debe ser \u003Cem>instanciada\u003C/em> (con la palabra clave \u003Ccode>new\u003C/code>) una o más veces.\u003C/p>\n\u003Cp>Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Page\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.text \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Notebook\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.pages \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    addPage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> page \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Page\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(text);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.pages.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(page);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> page \u003C/span>\u003Cspan style=\"color:#F97583\">of\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.pages) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            page.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> mathNotes \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Notebook\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathNotes.\u003C/span>\u003Cspan style=\"color:#B392F0\">addPage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Arithmetic: + - * / ...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathNotes.\u003C/span>\u003Cspan style=\"color:#B392F0\">addPage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Trigonometry: sin cos tan ...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">mathNotes.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ..\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En la clase \u003Ccode>Page\u003C/code>, los datos son una cadena de texto almacenada en una propiedad miembro \u003Ccode>this.text\u003C/code>. El comportamiento es \u003Ccode>print()\u003C/code>, un método que muestra el texto en la consola.\u003C/p>\n\u003Cp>Para la clase \u003Ccode>Notebook\u003C/code>, los datos son una matriz de instancias de \u003Ccode>Page\u003C/code>. El comportamiento es \u003Ccode>addPage(..)\u003C/code>, un método que instancia nuevas páginas \u003Ccode>Page\u003C/code> y las agrega a la lista, así como \u003Ccode>print()\u003C/code> (que imprime todas las páginas en el cuaderno).\u003C/p>\n\u003Cp>La declaración \u003Ccode>mathNotes = new Notebook()\u003C/code> crea una instancia de la clase \u003Ccode>Notebook\u003C/code>, y \u003Ccode>page = new Page(text)\u003C/code> es donde se crean instancias de la clase \u003Ccode>Page\u003C/code>.\u003C/p>\n\u003Cp>Los comportamientos (métodos) solo se pueden llamar en instancias (no en las propias clases), como \u003Ccode>mathNotes.addPage(..)\u003C/code> y \u003Ccode>page.print()\u003C/code>.\u003C/p>\n\u003Cp>El mecanismo de \u003Ccode>class\u003C/code> permite organizar datos (\u003Ccode>text\u003C/code> y \u003Ccode>pages\u003C/code>) junto con sus comportamientos (por ejemplo, \u003Ccode>addPage(..)\u003C/code> e \u003Ccode>print()\u003C/code>). El mismo programa podría haberse construido sin ninguna definición de \u003Ccode>class\u003C/code>, pero probablemente habría sido mucho menos organizado, más difícil de leer y entender, y más propenso a errores y un mantenimiento deficiente.\u003C/p>\n\u003Ch4 id=\"herencia-de-clase\">Herencia de clase\u003C/h4>\n\u003Cp>Otro aspecto inherente al diseño tradicional “orientado a clases”, aunque se utiliza un poco menos comúnmente en JS, es la “herencia” (y “polimorfismo”). Considera:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.title \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> title;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.author \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> author;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.pubDate \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pubDate;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            Title: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">title\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            By: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">author\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">pubDate\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Esta clase \u003Ccode>Publication\u003C/code> define un conjunto de comportamientos comunes que cualquier publicación podría necesitar.\u003C/p>\n\u003Cp>Ahora consideremos tipos más específicos de publicaciones, como \u003Ccode>Book\u003C/code> y \u003Ccode>BlogPost\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Book\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">bookDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            bookDetails.title,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            bookDetails.author,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            bookDetails.publishedOn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.publisher \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bookDetails.publisher;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ISBN\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bookDetails.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ISBN\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            Publisher: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">publisher\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            ISBN: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ISBN\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> BlogPost\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(title,author,pubDate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">URL\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">        super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Ambos, \u003Ccode>Book\u003C/code> y \u003Ccode>BlogPost\u003C/code>, utilizan la cláusula \u003Ccode>extends\u003C/code> para \u003Cem>extender\u003C/em> la definición general de \u003Ccode>Publication\u003C/code> e incluir comportamientos adicionales. La llamada \u003Ccode>super(..)\u003C/code> en cada constructor delega al constructor de la clase padre \u003Ccode>Publication\u003C/code> para su trabajo de inicialización, y luego realizan cosas más específicas según su tipo de publicación respectivo (también conocido como “subclase” o “clase hija”).\u003C/p>\n\u003Cp>Ahora considera el uso de estas clases hijas:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#79B8FF\"> YDKJS\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Book\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"You Don't Know JS\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    author: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publishedOn: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"June 2014\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"O'Reilly\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ISBN: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"123456-789\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">YDKJS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Title: You Don't Know JS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// By: Kyle Simpson\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// June 2014\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Publisher: O'Reilly\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ISBN: 123456-789\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forAgainstLet \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> BlogPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"For and against let\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"Kyle Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"October 27, 2014\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"https://davidwalsh.name/for-and-against-let\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">forAgainstLet.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Title: For and against let\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// By: Kyle Simpson\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// October 27, 2014\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// https://davidwalsh.name/for-and-against-let\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Es importante destacar que ambas instancias de la clase hija tienen un método \u003Ccode>print()\u003C/code>, que es una anulación (override) del método \u003Ccode>print()\u003C/code> \u003Cem>heredado\u003C/em> de la clase principal \u003Ccode>Publication\u003C/code>. Cada uno de esos métodos \u003Ccode>print()\u003C/code> anulados en las clases hijas llama a \u003Ccode>super.print()\u003C/code> para invocar la versión heredada del método \u003Ccode>print()\u003C/code>.\u003C/p>\n\u003Cp>El hecho de que tanto los métodos heredados como los anulados puedan tener el mismo nombre y coexistir se llama \u003Cem>polimorfismo\u003C/em>.\u003C/p>\n\u003Cp>La herencia es una herramienta poderosa para organizar datos y comportamientos en unidades lógicas separadas (clases), permitiendo que la clase hija coopere con la clase padre accediendo y utilizando su comportamiento y datos.\u003C/p>\n\u003Ch3 id=\"modulos\">Modulos\u003C/h3>\n\u003Cp>El patrón de módulo tiene esencialmente el mismo objetivo que el patrón de clase, que es agrupar datos y comportamientos en unidades lógicas. Al igual que las clases, los módulos pueden “incluir” o “acceder” a los datos y comportamientos de otros módulos, por cooperación.\u003C/p>\n\u003Cp>Pero los módulos tienen algunas diferencias importantes con respecto a las clases. Sobre todo, la sintaxis es completamente diferente.\u003C/p>\n\u003Ch4 id=\"módulos-clásicos\">Módulos clásicos\u003C/h4>\n\u003Cp>ES6 agregó una forma de sintaxis de módulo a la sintaxis nativa de JS, que veremos en un momento. Pero desde los primeros días de JS, el uso de módulos fue un patrón importante y común que se aprovechó en innumerables programas de JS, incluso sin una sintaxis dedicada.\u003C/p>\n\u003Cp>Las características clave de un \u003Cem>módulo clásico\u003C/em> son una función externa (que se ejecuta al menos una vez), que devuelve una “instancia” del módulo con una o más funciones expuestas que pueden operar sobre los datos internos (ocultos) del módulo.\u003C/p>\n\u003Cp>Dado que un módulo de esta forma es \u003Cem>simplemente una función\u003C/em>, y llamarla produce una “instancia” del módulo, otra descripción para estas funciones es “fábricas de módulos”.\u003C/p>\n\u003Cp>Considera la forma de módulo clásico de las anteriores clases \u003Ccode>Publication\u003C/code>, \u003Ccode>Book\u003C/code>, y \u003Ccode>BlogPost\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                Title: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> title\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                By: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> author\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pubDate\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Book\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">bookDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pub \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        bookDetails.title,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        bookDetails.author,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        bookDetails.publishedOn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            pub.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                Publisher: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bookDetails\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">publisher\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">                ISBN: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> bookDetails\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ISBN\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> BlogPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pub \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Publication\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(title,author,pubDate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            pub.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Al comparar estas formas con las formas \u003Ccode>class\u003C/code>, hay más similitudes que diferencias.\u003C/p>\n\u003Cp>La forma \u003Ccode>class\u003C/code> almacena métodos y datos en una instancia de objeto, que debe ser accedida con el prefijo \u003Ccode>this\u003C/code>.. Con los módulos, los métodos y datos se acceden como variables de identificador en el ámbito, sin ningún prefijo \u003Ccode>this\u003C/code>.\u003C/p>\n\u003Cp>Con \u003Ccode>class\u003C/code>, la “API” de una instancia es implícita en la definición de la \u003Ccode>clase\u003C/code>; además, todos los datos y métodos son públicos. Con la función de fábrica del módulo, creas explícitamente y devuelves un objeto con cualquier método expuesto públicamente, y cualquier dato u otros métodos no referenciados permanecen privados dentro de la función de fábrica.\u003C/p>\n\u003Cp>Hay otras variaciones de esta forma de función de fábrica que son bastante comunes en JS, incluso en 2020; puedes encontrarte con estas formas en diferentes programas de JS: AMD (Asynchronous Module Definition), UMD (Universal Module Definition) y CommonJS (módulos clásicos de Node.js). Las variaciones son menores (no son completamente compatibles). Sin embargo, todas estas formas se basan en los mismos principios básicos.\u003C/p>\n\u003Cp>Considera también el uso (también conocido como “instanciación”) de estas funciones de fábrica de módulos:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#79B8FF\"> YDKJS\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Book\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    title: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"You Don't Know JS\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    author: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Kyle Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publishedOn: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"June 2014\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    publisher: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"O'Reilly\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ISBN: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"123456-789\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">YDKJS\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Title: You Don't Know JS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// By: Kyle Simpson\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// June 2014\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Publisher: O'Reilly\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ISBN: 123456-789\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forAgainstLet \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> BlogPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"For and against let\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"Kyle Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"October 27, 2014\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"https://davidwalsh.name/for-and-against-let\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">forAgainstLet.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Title: For and against let\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// By: Kyle Simpson\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// October 27, 2014\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// https://davidwalsh.name/for-and-against-let\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>La única diferencia observable aquí es la falta de uso de \u003Ccode>new\u003C/code>, llamando a las funciones de fábrica de módulos como funciones normales.\u003C/p>\n\u003Ch4 id=\"es-modules\">ES Modules\u003C/h4>\n\u003Cp>ES modules (ESM), introducidos en el lenguaje JS en ES6, están destinados a servir en gran medida al mismo espíritu y propósito que los \u003Cem>módulos clásicos\u003C/em> existentes que acabo de describir, especialmente teniendo en cuenta variaciones importantes y casos de uso de AMD, UMD y CommonJS.\u003C/p>\n\u003Cp>Sin embargo, el enfoque de implementación difiere significativamente.\u003C/p>\n\u003Cp>En primer lugar, no hay una función de envoltura para \u003Cem>definir\u003C/em> un módulo. El contexto de envoltura es un archivo. Los ESM siempre se basan en archivos; un archivo, un módulo.\u003C/p>\n\u003Cp>En segundo lugar, no interactúas con la “API” de un módulo explícitamente, sino que utilizas la palabra clave \u003Ccode>export\u003C/code> para agregar una variable o método a su definición de API pública. Si algo está definido en un módulo pero no se \u003Ccode>export\u003C/code>a, permanece oculto (igual que con los \u003Cem>módulos clásicos\u003C/em>).\u003C/p>\n\u003Cp>En tercer lugar, y quizás lo más notablemente diferente de los patrones discutidos anteriormente, no “instancias” un módulo ES, simplemente lo \u003Ccode>import\u003C/code>as para usar su instancia única. Los ESM son, de hecho, “singleton”, en el sentido de que solo se crea una instancia en el primer \u003Ccode>import\u003C/code> en tu programa, y todos los demás \u003Ccode>import\u003C/code>s simplemente reciben una referencia a esa misma instancia única. Si tu módulo necesita admitir múltiples instanciaciones, debes proporcionar una función de fábrica de \u003Cem>estilo de módulo clásico\u003C/em> en tu definición de ESM con ese propósito.\u003C/p>\n\u003Cp>En nuestro ejemplo en ejecución, asumimos la posibilidad de múltiples instanciaciones, por lo que estos fragmentos siguientes mezclarán tanto ESM como \u003Cem>módulos clásicos\u003C/em>.\u003C/p>\n\u003Cp>Considera el archivo \u003Ccode>publication.js\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> printDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        Title: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> title\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        By: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> author\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pubDate\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    `\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            printDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(title,author,pubDate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Para importar y usar este módulo, desde otro módulo de ES como \u003Ccode>blogpost.js\u003C/code>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { create \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> createPub } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"publication.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> printDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">pub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    pub.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> create\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">title\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">author\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">pubDate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003Cspan style=\"color:#FFAB70\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pub \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> createPub\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(title,author,pubDate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            printDetails\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(pub,\u003C/span>\u003Cspan style=\"color:#79B8FF\">URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> publicAPI;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Y finalmente, para usar este módulo, importamos a otro módulo de ES como \u003Ccode>main.js\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { create \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newBlogPost } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"blogpost.js\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> forAgainstLet \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> newBlogPost\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"For and against let\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"Kyle Simpson\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"October 27, 2014\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"https://davidwalsh.name/for-and-against-let\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">forAgainstLet.\u003C/span>\u003Cspan style=\"color:#B392F0\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Title: For and against let\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// By: Kyle Simpson\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// October 27, 2014\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// https://davidwalsh.name/for-and-against-let\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth align=\"left\">NOTA:\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd align=\"left\">La cláusula \u003Ccode>as newBlogPost\u003C/code> en la declaración \u003Ccode>import\u003C/code> es opcional; si se omite, se importaría una función de nivel superior simplemente llamada \u003Ccode>create(..)\u003C/code>. En este caso, estoy cambiando su nombre por una cuestión de legibilidad; su nombre de fábrica más genérico, \u003Ccode>create(..)\u003C/code>, se vuelve más descriptivo semánticamente como \u003Ccode>newBlogPost(..)\u003C/code>.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>Como se muestra, los ES modules pueden utilizar \u003Cem>módulos clásicos\u003C/em> internamente si necesitan admitir múltiples instanciaciones. Alternativamente, podríamos haber expuesto una \u003Ccode>class\u003C/code> desde nuestro módulo en lugar de una función de fábrica \u003Ccode>create(..)\u003C/code>, con generalmente el mismo resultado. Sin embargo, dado que ya estás utilizando ESM en ese punto, recomendaría quedarse con \u003Cem>módulos clásicos\u003C/em> en lugar de \u003Ccode>class\u003C/code>.\u003C/p>\n\u003Cp>Si tu módulo solo necesita una única instancia, puedes omitir las capas adicionales de complejidad y \u003Ccode>exportar\u003C/code> sus métodos públicos directamente.\u003C/p>\n\u003Ch2 id=\"la-madriguera-del-conejo-se-profundiza\">La madriguera del conejo se profundiza\u003C/h2>\n\u003Cp>Como se prometió al principio de este capítulo, acabamos de echar un vistazo superficial a una amplia área principal del lenguaje JavaScript. Es posible que tu cabeza aún esté dando vueltas, ¡pero eso es completamente natural después de recibir tanta información de golpe!\u003C/p>\n\u003Cp>Incluso con esta “breve” exploración de JavaScript, cubrimos o insinuamos una gran cantidad de detalles que deberías considerar cuidadosamente y asegurarte de que te sientas cómodo con ellos. Hablo en serio cuando sugiero: vuelve a leer este capítulo, quizás varias veces.\u003C/p>\n\u003Cp>En el próximo capítulo, profundizaremos mucho más en algunos aspectos importantes de cómo funciona JavaScript en su núcleo. Pero antes de seguir ese agujero de conejo más profundamente, asegúrate de haber tomado el tiempo adecuado para digerir completamente lo que acabamos de cubrir aquí.\u003C/p>",{"headings":1573,"localImagePaths":1622,"remoteImagePaths":1623,"frontmatter":1624,"imagePaths":1627},[1574,1577,1580,1583,1586,1589,1592,1595,1598,1601,1604,1607,1610,1613,1616,1619],{"depth":76,"slug":1575,"text":1576},"cada-archivo-es-un-programa","Cada archivo es un programa",{"depth":76,"slug":1578,"text":1579},"valores","Valores",{"depth":211,"slug":1581,"text":1582},"arrays-y-objects","Arrays y Objects",{"depth":211,"slug":1584,"text":1585},"determinación-del-tipo-de-valor","Determinación del tipo de valor",{"depth":76,"slug":1587,"text":1588},"declaración-y-uso-de-variables","Declaración y uso de variables",{"depth":76,"slug":1590,"text":1591},"functions","Functions",{"depth":76,"slug":1593,"text":1594},"comparaciones","Comparaciones",{"depth":211,"slug":1596,"text":1597},"equalish","Equal…ish",{"depth":211,"slug":1599,"text":1600},"comparaciones-coercitivas","Comparaciones coercitivas",{"depth":76,"slug":1602,"text":1603},"cómo-nos-organizamos-en-js","Cómo nos organizamos en JS",{"depth":211,"slug":1605,"text":1606},"classes","Classes",{"depth":344,"slug":1608,"text":1609},"herencia-de-clase","Herencia de clase",{"depth":211,"slug":1611,"text":1612},"modulos","Modulos",{"depth":344,"slug":1614,"text":1615},"módulos-clásicos","Módulos clásicos",{"depth":344,"slug":1617,"text":1618},"es-modules","ES Modules",{"depth":76,"slug":1620,"text":1621},"la-madriguera-del-conejo-se-profundiza","La madriguera del conejo se profundiza",[],[],{"rutas":1625,"title":1564,"description":16,"pubDate":151,"updatedDate":151,"link":1626,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/ch2",[],"libros/you-dont-know-js-yet/get-started/ch2.md","libros/you-dont-know-js-yet/get-started/ch4",{"id":1629,"data":1631,"body":1636,"filePath":1637,"digest":1638,"rendered":1639,"legacyId":1668},{"rutas":1632,"title":1633,"description":16,"lang":17,"dir":18,"pubDate":1634,"updatedDate":1635},[804],"Capitulo 4",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"# You Don't Know JS Yet: Get Started - 2nd Edition\r\n# Chapter 4: The Bigger Picture\r\n\r\nThis book surveys what you need to be aware of as you *get started* with JS. The goal is to fill in gaps that readers newer to JS might have tripped over in their early encounters with the language. I also hope that we've hinted at enough deeper detail throughout to pique your curiosity to want to dig more into the language.\r\n\r\nThe rest of the books in this series are where we will unpack all of the rest of the language, in far greater detail than we could have done in a few brief chapters here.\r\n\r\nRemember to take your time, though. Rather than rushing onto the next book in an attempt to churn through all the books expediently, spend some time going back over the material in this book. Spend some more time looking through code in your current projects, and comparing what you see to what's been discussed so far.\r\n\r\nWhen you're ready, this final chapter divides the organization of the JS language into three main pillars, then offers a brief roadmap of what to expect from the rest of the book series, and how I suggest you proceed. Also, don't skip the appendices, especially Appendix B, \"Practice, Practice, Practice!\".\r\n\r\n## Pillar 1: Scope and Closure\r\n\r\nThe organization of variables into units of scope (functions, blocks) is one of the most foundational characteristics of any language; perhaps no other characteristic has a greater impact on how programs behave.\r\n\r\nScopes are like buckets, and variables are like marbles you put into those buckets. The scope model of a language is like the rules that help you determine which color marbles go in which matching-color buckets.\r\n\r\nScopes nest inside each other, and for any given expression or statement, only variables at that level of scope nesting, or in higher/outer scopes, are accessible; variables from lower/inner scopes are hidden and inaccessible.\r\n\r\nThis is how scopes behave in most languages, which is called lexical scope. The scope unit boundaries, and how variables are organized in them, is determined at the time the program is parsed (compiled). In other words, it's an author-time decision: where you locate a function/scope in the program determines what the scope structure of that part of the program will be.\r\n\r\nJS is lexically scoped, though many claim it isn't, because of two particular characteristics of its model that are not present in other lexically scoped languages.\r\n\r\nThe first is commonly called *hoisting*: when all variables declared anywhere in a scope are treated as if they're declared at the beginning of the scope. The other is that `var`-declared variables are function scoped, even if they appear inside a block.\r\n\r\nNeither hoisting nor function-scoped `var` are sufficient to back the claim that JS is not lexically scoped. `let`/`const` declarations have a peculiar error behavior called the \"Temporal Dead Zone\" (TDZ) which results in observable but unusable variables. Though TDZ can be strange to encounter, it's *also* not an invalidation of lexical scoping. All of these are just unique parts of the language that should be learned and understood by all JS developers.\r\n\r\nClosure is a natural result of lexical scope when the language has functions as first-class values, as JS does. When a function makes reference to variables from an outer scope, and that function is passed around as a value and executed in other scopes, it maintains access to its original scope variables; this is closure.\r\n\r\nAcross all of programming, but especially in JS, closure drives many of the most important programming patterns, including modules. As I see it, modules are as *with the grain* as you can get, when it comes to code organization in JS.\r\n\r\nTo dig further into scope, closures, and how modules work, read Book 2, *Scope & Closures*.\r\n\r\n## Pillar 2: Prototypes\r\n\r\nThe second pillar of the language is the prototypes system. We covered this topic in-depth in Chapter 3 (\"Prototypes\"), but I just want to make a few more comments about its importance.\r\n\r\nJS is one of very few languages where you have the option to create objects directly and explicitly, without first defining their structure in a class.\r\n\r\nFor many years, people implemented the class design pattern on top of prototypes—so-called \"prototypal inheritance\" (see Appendix A, \"Prototypal 'Classes'\")—and then with the advent of ES6's `class` keyword, the language doubled-down on its inclination toward OO/class-style programming.\r\n\r\nBut I think that focus has obscured the beauty and power of the prototype system: the ability for two objects to simply connect with each other and cooperate dynamically (during function/method execution) through sharing a `this` context.\r\n\r\nClasses are just one pattern you can build on top of such power. But another approach, in a very different direction, is to simply embrace objects as objects, forget classes altogether, and let objects cooperate through the prototype chain. This is called *behavior delegation*. I think delegation is more powerful than class inheritance, as a means for organizing behavior and data in our programs.\r\n\r\nBut class inheritance gets almost all the attention. And the rest goes to functional programming (FP), as the sort of \"anti-class\" way of designing programs. This saddens me, because it snuffs out any chance for exploration of delegation as a viable alternative.\r\n\r\nI encourage you to spend plenty of time deep in Book 3, *Objects & Classes*, to see how object delegation holds far more potential than we've perhaps realized. This isn't an anti-`class` message, but it is intentionally a \"classes aren't the only way to use objects\" message that I want more JS developers to consider.\r\n\r\nObject delegation is, I would argue, far more *with the grain* of JS, than classes (more on *grains* in a bit).\r\n\r\n## Pillar 3: Types and Coercion\r\n\r\nThe third pillar of JS is by far the most overlooked part of JS's nature.\r\n\r\nThe vast majority of developers have strong misconceptions about how *types* work in programming languages, and especially how they work in JS. A tidal wave of interest in the broader JS community has begun to shift to \"static typing\" approaches, using type-aware tooling like TypeScript or Flow.\r\n\r\nI agree that JS developers should learn more about types, and should learn more about how JS manages type conversions. I also agree that type-aware tooling can help developers, assuming they have gained and used this knowledge in the first place!\r\n\r\nBut I don't agree at all that the inevitable conclusion of this is to decide JS's type mechanism is bad and that we need to cover up JS's types with solutions outside the language. We don't have to follow the \"static typing\" way to be smart and solid with types in our programs. There are other options, if you're just willing to go *against the grain* of the crowd, and *with the grain* of JS (again, more on that to come).\r\n\r\nArguably, this pillar is more important than the other two, in the sense that no JS program will do anything useful if it doesn't properly leverage JS's value types, as well as the conversion (coercion) of values between types.\r\n\r\nEven if you love TypeScript/Flow, you are not going to get the most out of those tools or coding approaches if you aren't deeply familiar with how the language itself manages value types.\r\n\r\nTo learn more about JS types and coercion, check out Book 4, *Types & Grammar*. But please don't skip over this topic just because you've always heard that we should use `===` and forget about the rest.\r\n\r\nWithout learning this pillar, your foundation in JS is shaky and incomplete at best.\r\n\r\n## With the Grain\r\n\r\nI have some advice to share on continuing your learning journey with JS, and your path through the rest of this book series: be aware of the *grain* (recall various references to *grain* earlier in this chapter).\r\n\r\nFirst, consider the *grain* (as in, wood) of how most people approach and use JS. You've probably already noticed that these books cut against that *grain* in many respects. In YDKJSY, I respect you the reader enough to explain all the parts of JS, not only some select popular parts. I believe you're both capable and deserving of that knowledge.\r\n\r\nBut that is not what you'll find from a lot of other material out there. It also means that the more you follow and adhere to the guidance from these books—that you think carefully and analyze for yourself what's best in your code—the more you will stand out. That can be a good and bad thing. If you ever want to break out from the crowd, you're going to have to break from how the crowd does it!\r\n\r\nBut I've also had many people tell me that they quoted some topic/explanation from these books during a job interview, and the interviewer told the candidate they were wrong; indeed, people have reportedly lost out on job offers as a result.\r\n\r\nAs much as possible, I endeavor in these books to provide completely accurate information about JS, informed generally from the specification itself. But I also dose out quite a bit of my opinions on how you can interpret and use JS to the best benefit in your programs. I don't present opinion as fact, or vice versa. You'll always know which is which in these books.\r\n\r\nFacts about JS are not really up for debate. Either the specification says something, or it doesn't. If you don't like what the specification says, or my relaying of it, take that up with TC39! If you're in an interview and they claim you're wrong on the facts, ask them right then and there if you can look it up in the specification. If the interviewer won't re-consider, then you shouldn't want to work there anyway.\r\n\r\nBut if you choose to align with my opinions, you have to be prepared to back up those choices with *why* you feel that way. Don't just parrot what I say. Own your opinions. Defend them. And if someone you were hoping to work with disagrees, walk away with your head still held high. It's a big JS, and there's plenty of room for lots of different ways.\r\n\r\nIn other words, don't be afraid to go against the *grain*, as I have done with these books and all my teachings. Nobody can tell you how you will best make use of JS; that's for you to decide. I'm merely trying to empower you in coming to your own conclusions, no matter what they are.\r\n\r\nOn the other hand, there's a *grain* you really should pay attention to and follow: the *grain* of how JS works, at the language level. There are things that work well and naturally in JS, given the right practice and approach, and there are things you really shouldn't try to do in the language.\r\n\r\nCan you make your JS program look like a Java, C#, or Perl program? What about Python or Ruby, or even PHP? To varying degrees, sure you can. But should you?\r\n\r\nNo, I don't think you should. I think you should learn and embrace the JS way, and make your JS programs as JS'y as is practical. Some will think that means sloppy and informal programming, but I don't mean that at all. I just mean that JS has a lot of patterns and idioms that are recognizably \"JS,\" and going with that *grain* is the general path to the best success.\r\n\r\nFinally, maybe the most important *grain* to recognize is how the existing program(s) you're working on, and developers you're working with, do stuff. Don't read these books and then try to change *all that grain* in your existing projects over night. That approach will always fail.\r\n\r\nYou'll have to shift these things little by little, over time. Work on building consensus with your fellow developers on why it's important to re-visit and re-consider an approach. But do so with just one small topic at a time, and let before-and-after code comparisons do most of the talking. Bring everyone on the team together to discuss, and push for decisions that are based on analysis and evidence from the code rather than the inertia of \"our senior devs have always done it this way.\"\r\n\r\nThat's the most important advice I can impart to help you learn JS. Always keep looking for better ways to use what JS gives us to author more readable code. Everyone who works on your code, including your future self, will thank you!\r\n\r\n## In Order\r\n\r\nSo now you've got a broader perspective on what's left to explore in JS, and the right attitude to approach the rest of your journey.\r\n\r\nBut one of the most common practical questions I get at this point is, \"What order should I read the books?\" There is a straightforward answer... but it also depends.\r\n\r\nMy suggestion for most readers is to proceed through this series in this order:\r\n\r\n1. Get started with a solid foundation of JS from *Get Started* (Book 1) -- good news, you've already almost finished this book!\r\n\r\n2. In *Scope & Closures* (Book 2), dig into the first pillar of JS: lexical scope, how that supports closure, and how the module pattern organizes code.\r\n\r\n3. In *Objects & Classes* (Book 3), focus on the second pillar of JS: how JS's `this` works, how object prototypes support delegation, and how prototypes enable the `class` mechanism for OO-style code organization.\r\n\r\n4. In *Types & Grammar* (Book 4), tackle the third and final pillar of JS: types and type coercion, as well as how JS's syntax and grammar define how we write our code.\r\n\r\n5. With the **three pillars** solidly in place, *Sync & Async* (Book 5) then explores how we use flow control to model state change in our programs, both synchronously (right away) and asynchronously (over time).\r\n\r\n6. The series concludes with *ES.Next & Beyond* (Book 6), a forward look at the near- and mid-term future of JS, including a variety of features likely coming to your JS programs before too long.\r\n\r\nThat's the intended order to read this book series.\r\n\r\nHowever, Books 2, 3, and 4 can generally be read in any order, depending on which topic you feel most curious about and comfortable exploring first. But I don't recommend you skip any of these three books—not even *Types & Grammar*, as some of you will be tempted to do!—even if you think you already have that topic down.\r\n\r\nBook 5 (*Sync & Async*) is crucial for deeply understanding JS, but if you start digging in and find it's too intimidating, this book can be deferred until you're more experienced with the language. The more JS you've written (and struggled with!), the more you'll come to appreciate this book. So don't be afraid to come back to it at a later time.\r\n\r\nThe final book in the series, *ES.Next & Beyond*, in some respects stands alone. It can be read at the end, as I suggest, or right after *Getting Started* if you're looking for a shortcut to broaden your radar of what JS is all about. This book will also be more likely to receive updates in the future, so you'll probably want to re-visit it occasionally.\r\n\r\nHowever you choose to proceed with YDKJSY, check out the appendices of this book first, especially practicing the snippets in Appendix B, \"Practice, Practice, Practice!\" Did I mention you should go practice!? There's no better way to learn code than to write it.","src/content/blog/libros/you-dont-know-js-yet/get-started/ch4.md","177f33d2dfcac010",{"html":1640,"metadata":1641},"\u003Ch1 id=\"you-dont-know-js-yet-get-started---2nd-edition\">You Don’t Know JS Yet: Get Started - 2nd Edition\u003C/h1>\n\u003Ch1 id=\"chapter-4-the-bigger-picture\">Chapter 4: The Bigger Picture\u003C/h1>\n\u003Cp>This book surveys what you need to be aware of as you \u003Cem>get started\u003C/em> with JS. The goal is to fill in gaps that readers newer to JS might have tripped over in their early encounters with the language. I also hope that we’ve hinted at enough deeper detail throughout to pique your curiosity to want to dig more into the language.\u003C/p>\n\u003Cp>The rest of the books in this series are where we will unpack all of the rest of the language, in far greater detail than we could have done in a few brief chapters here.\u003C/p>\n\u003Cp>Remember to take your time, though. Rather than rushing onto the next book in an attempt to churn through all the books expediently, spend some time going back over the material in this book. Spend some more time looking through code in your current projects, and comparing what you see to what’s been discussed so far.\u003C/p>\n\u003Cp>When you’re ready, this final chapter divides the organization of the JS language into three main pillars, then offers a brief roadmap of what to expect from the rest of the book series, and how I suggest you proceed. Also, don’t skip the appendices, especially Appendix B, “Practice, Practice, Practice!”.\u003C/p>\n\u003Ch2 id=\"pillar-1-scope-and-closure\">Pillar 1: Scope and Closure\u003C/h2>\n\u003Cp>The organization of variables into units of scope (functions, blocks) is one of the most foundational characteristics of any language; perhaps no other characteristic has a greater impact on how programs behave.\u003C/p>\n\u003Cp>Scopes are like buckets, and variables are like marbles you put into those buckets. The scope model of a language is like the rules that help you determine which color marbles go in which matching-color buckets.\u003C/p>\n\u003Cp>Scopes nest inside each other, and for any given expression or statement, only variables at that level of scope nesting, or in higher/outer scopes, are accessible; variables from lower/inner scopes are hidden and inaccessible.\u003C/p>\n\u003Cp>This is how scopes behave in most languages, which is called lexical scope. The scope unit boundaries, and how variables are organized in them, is determined at the time the program is parsed (compiled). In other words, it’s an author-time decision: where you locate a function/scope in the program determines what the scope structure of that part of the program will be.\u003C/p>\n\u003Cp>JS is lexically scoped, though many claim it isn’t, because of two particular characteristics of its model that are not present in other lexically scoped languages.\u003C/p>\n\u003Cp>The first is commonly called \u003Cem>hoisting\u003C/em>: when all variables declared anywhere in a scope are treated as if they’re declared at the beginning of the scope. The other is that \u003Ccode>var\u003C/code>-declared variables are function scoped, even if they appear inside a block.\u003C/p>\n\u003Cp>Neither hoisting nor function-scoped \u003Ccode>var\u003C/code> are sufficient to back the claim that JS is not lexically scoped. \u003Ccode>let\u003C/code>/\u003Ccode>const\u003C/code> declarations have a peculiar error behavior called the “Temporal Dead Zone” (TDZ) which results in observable but unusable variables. Though TDZ can be strange to encounter, it’s \u003Cem>also\u003C/em> not an invalidation of lexical scoping. All of these are just unique parts of the language that should be learned and understood by all JS developers.\u003C/p>\n\u003Cp>Closure is a natural result of lexical scope when the language has functions as first-class values, as JS does. When a function makes reference to variables from an outer scope, and that function is passed around as a value and executed in other scopes, it maintains access to its original scope variables; this is closure.\u003C/p>\n\u003Cp>Across all of programming, but especially in JS, closure drives many of the most important programming patterns, including modules. As I see it, modules are as \u003Cem>with the grain\u003C/em> as you can get, when it comes to code organization in JS.\u003C/p>\n\u003Cp>To dig further into scope, closures, and how modules work, read Book 2, \u003Cem>Scope &#x26; Closures\u003C/em>.\u003C/p>\n\u003Ch2 id=\"pillar-2-prototypes\">Pillar 2: Prototypes\u003C/h2>\n\u003Cp>The second pillar of the language is the prototypes system. We covered this topic in-depth in Chapter 3 (“Prototypes”), but I just want to make a few more comments about its importance.\u003C/p>\n\u003Cp>JS is one of very few languages where you have the option to create objects directly and explicitly, without first defining their structure in a class.\u003C/p>\n\u003Cp>For many years, people implemented the class design pattern on top of prototypes—so-called “prototypal inheritance” (see Appendix A, “Prototypal ‘Classes’”)—and then with the advent of ES6’s \u003Ccode>class\u003C/code> keyword, the language doubled-down on its inclination toward OO/class-style programming.\u003C/p>\n\u003Cp>But I think that focus has obscured the beauty and power of the prototype system: the ability for two objects to simply connect with each other and cooperate dynamically (during function/method execution) through sharing a \u003Ccode>this\u003C/code> context.\u003C/p>\n\u003Cp>Classes are just one pattern you can build on top of such power. But another approach, in a very different direction, is to simply embrace objects as objects, forget classes altogether, and let objects cooperate through the prototype chain. This is called \u003Cem>behavior delegation\u003C/em>. I think delegation is more powerful than class inheritance, as a means for organizing behavior and data in our programs.\u003C/p>\n\u003Cp>But class inheritance gets almost all the attention. And the rest goes to functional programming (FP), as the sort of “anti-class” way of designing programs. This saddens me, because it snuffs out any chance for exploration of delegation as a viable alternative.\u003C/p>\n\u003Cp>I encourage you to spend plenty of time deep in Book 3, \u003Cem>Objects &#x26; Classes\u003C/em>, to see how object delegation holds far more potential than we’ve perhaps realized. This isn’t an anti-\u003Ccode>class\u003C/code> message, but it is intentionally a “classes aren’t the only way to use objects” message that I want more JS developers to consider.\u003C/p>\n\u003Cp>Object delegation is, I would argue, far more \u003Cem>with the grain\u003C/em> of JS, than classes (more on \u003Cem>grains\u003C/em> in a bit).\u003C/p>\n\u003Ch2 id=\"pillar-3-types-and-coercion\">Pillar 3: Types and Coercion\u003C/h2>\n\u003Cp>The third pillar of JS is by far the most overlooked part of JS’s nature.\u003C/p>\n\u003Cp>The vast majority of developers have strong misconceptions about how \u003Cem>types\u003C/em> work in programming languages, and especially how they work in JS. A tidal wave of interest in the broader JS community has begun to shift to “static typing” approaches, using type-aware tooling like TypeScript or Flow.\u003C/p>\n\u003Cp>I agree that JS developers should learn more about types, and should learn more about how JS manages type conversions. I also agree that type-aware tooling can help developers, assuming they have gained and used this knowledge in the first place!\u003C/p>\n\u003Cp>But I don’t agree at all that the inevitable conclusion of this is to decide JS’s type mechanism is bad and that we need to cover up JS’s types with solutions outside the language. We don’t have to follow the “static typing” way to be smart and solid with types in our programs. There are other options, if you’re just willing to go \u003Cem>against the grain\u003C/em> of the crowd, and \u003Cem>with the grain\u003C/em> of JS (again, more on that to come).\u003C/p>\n\u003Cp>Arguably, this pillar is more important than the other two, in the sense that no JS program will do anything useful if it doesn’t properly leverage JS’s value types, as well as the conversion (coercion) of values between types.\u003C/p>\n\u003Cp>Even if you love TypeScript/Flow, you are not going to get the most out of those tools or coding approaches if you aren’t deeply familiar with how the language itself manages value types.\u003C/p>\n\u003Cp>To learn more about JS types and coercion, check out Book 4, \u003Cem>Types &#x26; Grammar\u003C/em>. But please don’t skip over this topic just because you’ve always heard that we should use \u003Ccode>===\u003C/code> and forget about the rest.\u003C/p>\n\u003Cp>Without learning this pillar, your foundation in JS is shaky and incomplete at best.\u003C/p>\n\u003Ch2 id=\"with-the-grain\">With the Grain\u003C/h2>\n\u003Cp>I have some advice to share on continuing your learning journey with JS, and your path through the rest of this book series: be aware of the \u003Cem>grain\u003C/em> (recall various references to \u003Cem>grain\u003C/em> earlier in this chapter).\u003C/p>\n\u003Cp>First, consider the \u003Cem>grain\u003C/em> (as in, wood) of how most people approach and use JS. You’ve probably already noticed that these books cut against that \u003Cem>grain\u003C/em> in many respects. In YDKJSY, I respect you the reader enough to explain all the parts of JS, not only some select popular parts. I believe you’re both capable and deserving of that knowledge.\u003C/p>\n\u003Cp>But that is not what you’ll find from a lot of other material out there. It also means that the more you follow and adhere to the guidance from these books—that you think carefully and analyze for yourself what’s best in your code—the more you will stand out. That can be a good and bad thing. If you ever want to break out from the crowd, you’re going to have to break from how the crowd does it!\u003C/p>\n\u003Cp>But I’ve also had many people tell me that they quoted some topic/explanation from these books during a job interview, and the interviewer told the candidate they were wrong; indeed, people have reportedly lost out on job offers as a result.\u003C/p>\n\u003Cp>As much as possible, I endeavor in these books to provide completely accurate information about JS, informed generally from the specification itself. But I also dose out quite a bit of my opinions on how you can interpret and use JS to the best benefit in your programs. I don’t present opinion as fact, or vice versa. You’ll always know which is which in these books.\u003C/p>\n\u003Cp>Facts about JS are not really up for debate. Either the specification says something, or it doesn’t. If you don’t like what the specification says, or my relaying of it, take that up with TC39! If you’re in an interview and they claim you’re wrong on the facts, ask them right then and there if you can look it up in the specification. If the interviewer won’t re-consider, then you shouldn’t want to work there anyway.\u003C/p>\n\u003Cp>But if you choose to align with my opinions, you have to be prepared to back up those choices with \u003Cem>why\u003C/em> you feel that way. Don’t just parrot what I say. Own your opinions. Defend them. And if someone you were hoping to work with disagrees, walk away with your head still held high. It’s a big JS, and there’s plenty of room for lots of different ways.\u003C/p>\n\u003Cp>In other words, don’t be afraid to go against the \u003Cem>grain\u003C/em>, as I have done with these books and all my teachings. Nobody can tell you how you will best make use of JS; that’s for you to decide. I’m merely trying to empower you in coming to your own conclusions, no matter what they are.\u003C/p>\n\u003Cp>On the other hand, there’s a \u003Cem>grain\u003C/em> you really should pay attention to and follow: the \u003Cem>grain\u003C/em> of how JS works, at the language level. There are things that work well and naturally in JS, given the right practice and approach, and there are things you really shouldn’t try to do in the language.\u003C/p>\n\u003Cp>Can you make your JS program look like a Java, C#, or Perl program? What about Python or Ruby, or even PHP? To varying degrees, sure you can. But should you?\u003C/p>\n\u003Cp>No, I don’t think you should. I think you should learn and embrace the JS way, and make your JS programs as JS’y as is practical. Some will think that means sloppy and informal programming, but I don’t mean that at all. I just mean that JS has a lot of patterns and idioms that are recognizably “JS,” and going with that \u003Cem>grain\u003C/em> is the general path to the best success.\u003C/p>\n\u003Cp>Finally, maybe the most important \u003Cem>grain\u003C/em> to recognize is how the existing program(s) you’re working on, and developers you’re working with, do stuff. Don’t read these books and then try to change \u003Cem>all that grain\u003C/em> in your existing projects over night. That approach will always fail.\u003C/p>\n\u003Cp>You’ll have to shift these things little by little, over time. Work on building consensus with your fellow developers on why it’s important to re-visit and re-consider an approach. But do so with just one small topic at a time, and let before-and-after code comparisons do most of the talking. Bring everyone on the team together to discuss, and push for decisions that are based on analysis and evidence from the code rather than the inertia of “our senior devs have always done it this way.”\u003C/p>\n\u003Cp>That’s the most important advice I can impart to help you learn JS. Always keep looking for better ways to use what JS gives us to author more readable code. Everyone who works on your code, including your future self, will thank you!\u003C/p>\n\u003Ch2 id=\"in-order\">In Order\u003C/h2>\n\u003Cp>So now you’ve got a broader perspective on what’s left to explore in JS, and the right attitude to approach the rest of your journey.\u003C/p>\n\u003Cp>But one of the most common practical questions I get at this point is, “What order should I read the books?” There is a straightforward answer… but it also depends.\u003C/p>\n\u003Cp>My suggestion for most readers is to proceed through this series in this order:\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>Get started with a solid foundation of JS from \u003Cem>Get Started\u003C/em> (Book 1) — good news, you’ve already almost finished this book!\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>In \u003Cem>Scope &#x26; Closures\u003C/em> (Book 2), dig into the first pillar of JS: lexical scope, how that supports closure, and how the module pattern organizes code.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>In \u003Cem>Objects &#x26; Classes\u003C/em> (Book 3), focus on the second pillar of JS: how JS’s \u003Ccode>this\u003C/code> works, how object prototypes support delegation, and how prototypes enable the \u003Ccode>class\u003C/code> mechanism for OO-style code organization.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>In \u003Cem>Types &#x26; Grammar\u003C/em> (Book 4), tackle the third and final pillar of JS: types and type coercion, as well as how JS’s syntax and grammar define how we write our code.\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>With the \u003Cstrong>three pillars\u003C/strong> solidly in place, \u003Cem>Sync &#x26; Async\u003C/em> (Book 5) then explores how we use flow control to model state change in our programs, both synchronously (right away) and asynchronously (over time).\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>The series concludes with \u003Cem>ES.Next &#x26; Beyond\u003C/em> (Book 6), a forward look at the near- and mid-term future of JS, including a variety of features likely coming to your JS programs before too long.\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>That’s the intended order to read this book series.\u003C/p>\n\u003Cp>However, Books 2, 3, and 4 can generally be read in any order, depending on which topic you feel most curious about and comfortable exploring first. But I don’t recommend you skip any of these three books—not even \u003Cem>Types &#x26; Grammar\u003C/em>, as some of you will be tempted to do!—even if you think you already have that topic down.\u003C/p>\n\u003Cp>Book 5 (\u003Cem>Sync &#x26; Async\u003C/em>) is crucial for deeply understanding JS, but if you start digging in and find it’s too intimidating, this book can be deferred until you’re more experienced with the language. The more JS you’ve written (and struggled with!), the more you’ll come to appreciate this book. So don’t be afraid to come back to it at a later time.\u003C/p>\n\u003Cp>The final book in the series, \u003Cem>ES.Next &#x26; Beyond\u003C/em>, in some respects stands alone. It can be read at the end, as I suggest, or right after \u003Cem>Getting Started\u003C/em> if you’re looking for a shortcut to broaden your radar of what JS is all about. This book will also be more likely to receive updates in the future, so you’ll probably want to re-visit it occasionally.\u003C/p>\n\u003Cp>However you choose to proceed with YDKJSY, check out the appendices of this book first, especially practicing the snippets in Appendix B, “Practice, Practice, Practice!” Did I mention you should go practice!? There’s no better way to learn code than to write it.\u003C/p>",{"headings":1642,"localImagePaths":1662,"remoteImagePaths":1663,"frontmatter":1664,"imagePaths":1667},[1643,1644,1647,1650,1653,1656,1659],{"depth":815,"slug":1299,"text":1300},{"depth":815,"slug":1645,"text":1646},"chapter-4-the-bigger-picture","Chapter 4: The Bigger Picture",{"depth":76,"slug":1648,"text":1649},"pillar-1-scope-and-closure","Pillar 1: Scope and Closure",{"depth":76,"slug":1651,"text":1652},"pillar-2-prototypes","Pillar 2: Prototypes",{"depth":76,"slug":1654,"text":1655},"pillar-3-types-and-coercion","Pillar 3: Types and Coercion",{"depth":76,"slug":1657,"text":1658},"with-the-grain","With the Grain",{"depth":76,"slug":1660,"text":1661},"in-order","In Order",[],[],{"rutas":1665,"title":1633,"description":16,"pubDate":151,"updatedDate":151,"link":1666,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/ch4",[],"libros/you-dont-know-js-yet/get-started/ch4.md","libros/you-dont-know-js-yet/get-started/foreword",{"id":1669,"data":1671,"body":1676,"filePath":1677,"digest":1678,"rendered":1679,"legacyId":1689},{"rutas":1672,"title":1673,"description":16,"lang":17,"dir":18,"pubDate":1674,"updatedDate":1675},[804],"Prólogo",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"La primera vez que vi un tweet anunciando la campaña de financiación para la serie de libros originales *You Don't Know JS*, pensé para mis adentros que quien demonios fuera ese Kyle Simpson se la podía meter doblada. ¡Claro que sé JavaScript! En ese momento había estado trabajando en JavaScript durante muchos años con algunos de los nombres más grandes de la tecnología, así que me sentí justificado al despreciar esta afirmación arrolladora.\r\n\r\nCuando se completó la financiación del libro, me di cuenta de que mucha gente estaba deseando leer esta serie de libros y decidí intentarlo, ya sabes, solo para mostrar a todos que *sí sé* JavaScript. Una vez que me puse manos a la obra y leí los textos, experimenté una profunda mezcla de aprendizaje, sorpresa e incluso un poco de enfado. Kyle tiene un don para decir algo que desafía mi visión del mundo y hacerme pensar en ello hasta que me doy cuenta de que lo que ha dicho es cierto (¡aunque nunca se lo admitiré!).\r\n\r\nResultó que no sabía JavaScript. No sabía por qué había adoptado ciertos patrones; no sabía por qué JavaScript se comporta de la manera que lo hace en ciertas situaciones, y no conocía muchos de los matices de los lenguajes que yo suponía que conocía. Había muchas cosas que ni siquiera sabía que no sabía, y era peor como desarrollador por ello.\r\n\r\nEsto es lo que hace que esta serie de libros sea genial. No es solo para alguien que está aprendiendo el lenguaje por primera vez (aunque también es para ellos); es para todos los artesanos del software que quieren dominar sus herramientas, que quieren entender los entresijos de su oficio, y que quieren seleccionar los métodos adecuados para resolver problemas.\r\n\r\nLo que aprecio de Kyle y su trabajo es que está deliciosamente no influenciado por el zeitgeist (espíritu del momento) del mundo de la programación a su alrededor. Eso no quiere decir que no esté al tanto de lo que está sucediendo en la comunidad, sino más bien que no influye en su búsqueda de las mejores respuestas a las preguntas correctas. Esto a menudo lo ha puesto en desacuerdo con las últimas \"mejores prácticas\", pero en realidad esto es exactamente lo que necesitas: una perspectiva alejada de la influencia temporal y simplemente hablando de la verdad subyacente. Es por eso que esta serie es tan buena. ¡La primera edición de You Don't Know JS sigue siendo precisa, años después! No muchas cosas resisten esta prueba de tiempo dado el cambiante paisaje de JavaScript.\r\n\r\nHablemos un momento sobre este primer libro en sí, **Get Started**. Puedes estar tentado a saltártelo ya que puedes pensar que ya has \"comenzado\", pero vale la pena leer este! Te sorprendería la profundidad, sutileza y rareza que hay en los bloques de construcción subyacentes de JavaScript, y es bastante esencial que te enfrentes a estos cimientos antes de aventurarte en las construcciones del lenguaje. Es exactamente el tipo de base que necesitas, para realmente conocer JavaScript.\r\n\r\nAsí que, hazle un favor a tu futuro yo y sumérgete en este libro y desbloquea el conocimiento dentro. Estos sólidos cimientos te servirán mejor que cualquier marco de trabajo; esos van y vienen, pero seguiremos escribiendo JavaScript en sí durante décadas por venir. Mantén una mente abierta y desafía tus preconcepciones.\r\n\r\nPorque, como descubrí yo mismo, probablemente no conoces JavaScript (todavía).\r\n\r\nBrian Holt\u003Cbr>\r\nSenior Program Manager\u003Cbr>\r\nVisual Studio Code and Node.js on Azure\u003Cbr>\r\nMicrosoft","src/content/blog/libros/you-dont-know-js-yet/get-started/foreword.md","a97781d0ae27e91b",{"html":1680,"metadata":1681},"\u003Cp>La primera vez que vi un tweet anunciando la campaña de financiación para la serie de libros originales \u003Cem>You Don’t Know JS\u003C/em>, pensé para mis adentros que quien demonios fuera ese Kyle Simpson se la podía meter doblada. ¡Claro que sé JavaScript! En ese momento había estado trabajando en JavaScript durante muchos años con algunos de los nombres más grandes de la tecnología, así que me sentí justificado al despreciar esta afirmación arrolladora.\u003C/p>\n\u003Cp>Cuando se completó la financiación del libro, me di cuenta de que mucha gente estaba deseando leer esta serie de libros y decidí intentarlo, ya sabes, solo para mostrar a todos que \u003Cem>sí sé\u003C/em> JavaScript. Una vez que me puse manos a la obra y leí los textos, experimenté una profunda mezcla de aprendizaje, sorpresa e incluso un poco de enfado. Kyle tiene un don para decir algo que desafía mi visión del mundo y hacerme pensar en ello hasta que me doy cuenta de que lo que ha dicho es cierto (¡aunque nunca se lo admitiré!).\u003C/p>\n\u003Cp>Resultó que no sabía JavaScript. No sabía por qué había adoptado ciertos patrones; no sabía por qué JavaScript se comporta de la manera que lo hace en ciertas situaciones, y no conocía muchos de los matices de los lenguajes que yo suponía que conocía. Había muchas cosas que ni siquiera sabía que no sabía, y era peor como desarrollador por ello.\u003C/p>\n\u003Cp>Esto es lo que hace que esta serie de libros sea genial. No es solo para alguien que está aprendiendo el lenguaje por primera vez (aunque también es para ellos); es para todos los artesanos del software que quieren dominar sus herramientas, que quieren entender los entresijos de su oficio, y que quieren seleccionar los métodos adecuados para resolver problemas.\u003C/p>\n\u003Cp>Lo que aprecio de Kyle y su trabajo es que está deliciosamente no influenciado por el zeitgeist (espíritu del momento) del mundo de la programación a su alrededor. Eso no quiere decir que no esté al tanto de lo que está sucediendo en la comunidad, sino más bien que no influye en su búsqueda de las mejores respuestas a las preguntas correctas. Esto a menudo lo ha puesto en desacuerdo con las últimas “mejores prácticas”, pero en realidad esto es exactamente lo que necesitas: una perspectiva alejada de la influencia temporal y simplemente hablando de la verdad subyacente. Es por eso que esta serie es tan buena. ¡La primera edición de You Don’t Know JS sigue siendo precisa, años después! No muchas cosas resisten esta prueba de tiempo dado el cambiante paisaje de JavaScript.\u003C/p>\n\u003Cp>Hablemos un momento sobre este primer libro en sí, \u003Cstrong>Get Started\u003C/strong>. Puedes estar tentado a saltártelo ya que puedes pensar que ya has “comenzado”, pero vale la pena leer este! Te sorprendería la profundidad, sutileza y rareza que hay en los bloques de construcción subyacentes de JavaScript, y es bastante esencial que te enfrentes a estos cimientos antes de aventurarte en las construcciones del lenguaje. Es exactamente el tipo de base que necesitas, para realmente conocer JavaScript.\u003C/p>\n\u003Cp>Así que, hazle un favor a tu futuro yo y sumérgete en este libro y desbloquea el conocimiento dentro. Estos sólidos cimientos te servirán mejor que cualquier marco de trabajo; esos van y vienen, pero seguiremos escribiendo JavaScript en sí durante décadas por venir. Mantén una mente abierta y desafía tus preconcepciones.\u003C/p>\n\u003Cp>Porque, como descubrí yo mismo, probablemente no conoces JavaScript (todavía).\u003C/p>\n\u003Cp>Brian Holt\u003Cbr>\r\nSenior Program Manager\u003Cbr>\r\nVisual Studio Code and Node.js on Azure\u003Cbr>\r\nMicrosoft\u003C/p>",{"headings":1682,"localImagePaths":1683,"remoteImagePaths":1684,"frontmatter":1685,"imagePaths":1688},[],[],[],{"rutas":1686,"title":1673,"description":16,"pubDate":151,"updatedDate":151,"link":1687,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/foreword",[],"libros/you-dont-know-js-yet/get-started/foreword.md","libros/you-dont-know-js-yet/get-started/readme",{"id":1690,"data":1692,"body":1696,"filePath":1697,"digest":1698,"rendered":1699,"legacyId":1710},{"rutas":1693,"title":87,"description":16,"lang":17,"dir":18,"pubDate":1694,"updatedDate":1695},[804],["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"# You Don't Know JS Yet: Get Started - 2nd Edition\r\n\r\n\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"300\">\r\n\r\n-----\r\n\r\n**[Compra el ebook/PDF en Leanpub](https://leanpub.com/ydkjsy-get-started)**\r\n\r\n-----\r\n\r\n[Tabla de Contenidos](toc.md)\r\n\r\n* [Prólogo](foreword) (de [Brian Holt](https://twitter.com/holtbt))\r\n* [Prefacio](../preface)\r\n* [Capítulo 1: ¿Qué Es JavaScript?](ch1)\r\n* [Capítulo 2: Topografía JS](ch2)\r\n* [Chapter 3: Digging to the Roots of JS](ch3)\r\n* [Chapter 4: The Bigger Picture](ch4)\r\n* [Appendix A: Exploring Further](apa)\r\n* [Appendix B: Practice, Practice, Practice!](apb)","src/content/blog/libros/you-dont-know-js-yet/get-started/README.md","c4764a9e32d1e7e8",{"html":1700,"metadata":1701},"\u003Ch1 id=\"you-dont-know-js-yet-get-started---2nd-edition\">You Don’t Know JS Yet: Get Started - 2nd Edition\u003C/h1>\n\u003Cimg src=\"/images/you-dont-know-js-yet/get-started/cover.png\" width=\"300\">\n\u003Chr>\n\u003Cp>\u003Cstrong>\u003Ca href=\"https://leanpub.com/ydkjsy-get-started\">Compra el ebook/PDF en Leanpub\u003C/a>\u003C/strong>\u003C/p>\n\u003Chr>\n\u003Cp>\u003Ca href=\"toc.md\">Tabla de Contenidos\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"foreword\">Prólogo\u003C/a> (de \u003Ca href=\"https://twitter.com/holtbt\">Brian Holt\u003C/a>)\u003C/li>\n\u003Cli>\u003Ca href=\"../preface\">Prefacio\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"ch1\">Capítulo 1: ¿Qué Es JavaScript?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"ch2\">Capítulo 2: Topografía JS\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"ch3\">Chapter 3: Digging to the Roots of JS\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"ch4\">Chapter 4: The Bigger Picture\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"apa\">Appendix A: Exploring Further\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"apb\">Appendix B: Practice, Practice, Practice!\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":1702,"localImagePaths":1704,"remoteImagePaths":1705,"frontmatter":1706,"imagePaths":1709},[1703],{"depth":815,"slug":1299,"text":1300},[],[],{"rutas":1707,"title":87,"description":16,"pubDate":151,"updatedDate":151,"link":1708,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/readme",[],"libros/you-dont-know-js-yet/get-started/README.md","libros/you-dont-know-js-yet/get-started/toc",{"id":1711,"data":1713,"body":1718,"filePath":1719,"digest":1720,"rendered":1721,"legacyId":1733},{"rutas":1714,"title":1715,"description":16,"lang":17,"dir":18,"pubDate":1716,"updatedDate":1717},[804],"Tabla de Contenidos",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"## Tabla de Contenidos\r\n\r\n* Prólogo\r\n* Prefacio\r\n* Capítulo 1: ¿Qué es Javascript?\r\n    * About This Book\r\n    * What's With That Name?\r\n    * Language Specification\r\n    * Many Faces\r\n    * Backwards & Forwards\r\n    * What's in an Interpretation?\r\n    * Strictly Speaking\r\n    * Defined\r\n* Chapter 2: Surveying JS\r\n    * Each File is a Program\r\n    * Values\r\n    * Declaring and Using Variables\r\n    * Functions\r\n    * Comparisons\r\n    * How We Organize in JS\r\n    * The Rabbit Hole Deepens\r\n* Chapter 3: Digging To The Roots Of JS\r\n    * Iteration\r\n    * Closure\r\n    * `this` Keyword\r\n    * Prototypes\r\n    * Asking \"Why?\"\r\n* Chapter 4: The Bigger Picture\r\n    * Pillar 1: Scope and Closure\r\n    * Pillar 2: Prototypes\r\n    * Pillar 3: Types and Coercion\r\n    * With the Grain\r\n    * In Order\r\n* Appendix A: Exploring Further\r\n    * Values vs. References\r\n    * So Many Function Forms\r\n    * Coercive Conditional Comparison\r\n    * Prototypal \"Classes\"\r\n* Appendix B: Practice, Practice, Practice!\r\n    * Practicing Comparisons\r\n    * Practicing Closure\r\n    * Practicing Prototypes\r\n    * Suggested Solutions","src/content/blog/libros/you-dont-know-js-yet/get-started/toc.md","7afbb1f34f3b92ff",{"html":1722,"metadata":1723},"\u003Ch2 id=\"tabla-de-contenidos\">Tabla de Contenidos\u003C/h2>\n\u003Cul>\n\u003Cli>Prólogo\u003C/li>\n\u003Cli>Prefacio\u003C/li>\n\u003Cli>Capítulo 1: ¿Qué es Javascript?\n\u003Cul>\n\u003Cli>About This Book\u003C/li>\n\u003Cli>What’s With That Name?\u003C/li>\n\u003Cli>Language Specification\u003C/li>\n\u003Cli>Many Faces\u003C/li>\n\u003Cli>Backwards &#x26; Forwards\u003C/li>\n\u003Cli>What’s in an Interpretation?\u003C/li>\n\u003Cli>Strictly Speaking\u003C/li>\n\u003Cli>Defined\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Chapter 2: Surveying JS\n\u003Cul>\n\u003Cli>Each File is a Program\u003C/li>\n\u003Cli>Values\u003C/li>\n\u003Cli>Declaring and Using Variables\u003C/li>\n\u003Cli>Functions\u003C/li>\n\u003Cli>Comparisons\u003C/li>\n\u003Cli>How We Organize in JS\u003C/li>\n\u003Cli>The Rabbit Hole Deepens\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Chapter 3: Digging To The Roots Of JS\n\u003Cul>\n\u003Cli>Iteration\u003C/li>\n\u003Cli>Closure\u003C/li>\n\u003Cli>\u003Ccode>this\u003C/code> Keyword\u003C/li>\n\u003Cli>Prototypes\u003C/li>\n\u003Cli>Asking “Why?”\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Chapter 4: The Bigger Picture\n\u003Cul>\n\u003Cli>Pillar 1: Scope and Closure\u003C/li>\n\u003Cli>Pillar 2: Prototypes\u003C/li>\n\u003Cli>Pillar 3: Types and Coercion\u003C/li>\n\u003Cli>With the Grain\u003C/li>\n\u003Cli>In Order\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Appendix A: Exploring Further\n\u003Cul>\n\u003Cli>Values vs. References\u003C/li>\n\u003Cli>So Many Function Forms\u003C/li>\n\u003Cli>Coercive Conditional Comparison\u003C/li>\n\u003Cli>Prototypal “Classes”\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Appendix B: Practice, Practice, Practice!\n\u003Cul>\n\u003Cli>Practicing Comparisons\u003C/li>\n\u003Cli>Practicing Closure\u003C/li>\n\u003Cli>Practicing Prototypes\u003C/li>\n\u003Cli>Suggested Solutions\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":1724,"localImagePaths":1727,"remoteImagePaths":1728,"frontmatter":1729,"imagePaths":1732},[1725],{"depth":76,"slug":1726,"text":1715},"tabla-de-contenidos",[],[],{"rutas":1730,"title":1715,"description":16,"pubDate":151,"updatedDate":151,"link":1731,"lastModified":152},[804],"/blog/You_Dont_Know_JS_Yet/libros/you-dont-know-js-yet/get-started/toc",[],"libros/you-dont-know-js-yet/get-started/toc.md","estructura-datos/array",{"id":1734,"data":1736,"body":1741,"filePath":1742,"digest":1743,"legacyId":1744,"deferredRender":25},{"rutas":1737,"title":1738,"description":16,"lang":17,"dir":18,"pubDate":1739,"updatedDate":1740},[30],"Arrays o Arreglos",["Date","2024-02-18T07:00:00.000Z"],["Date","2024-02-18T07:00:00.000Z"],"import CodeChallenge from '@Components/pruebas/test-JS.svelte'\r\n\r\nLos arrays almacenan elementos en ubicaciones de memoria contiguas, lo que resulta en direcciones fácilmente calculables para los elementos almacenados, y esto permite un acceso más rápido a un elemento en un índice específico.\r\n\r\nAquí te muestro cómo se implementa un array en JavaScript:\r\n\r\n```js\r\nlet miArray = [1, 2, 3, 4, 5]; // Este es un array de números\r\nconsole.log(miArray[0]); // Imprime el primer elemento del array: 1\r\n```\r\n\r\nY aquí en Python:\r\n\r\n```python\r\nmi_lista = [1, 2, 3, 4, 5] # Esta es una lista, el equivalente a un array en Python\r\nprint(mi_lista[0]) # Imprime el primer elemento de la lista: 1\r\n```\r\n\r\nLos arrays se utilizan en una gran variedad de aplicaciones. Algunos ejemplos incluyen:\r\n\r\n* **Almacenar datos**: Si tienes un conjunto de elementos del mismo tipo, puedes almacenarlos en un array en lugar de declarar variables individuales para cada uno de ellos.\r\n* **Acceso rápido a los datos**: Los arrays permiten acceder a cualquier dato en cualquier posición en tiempo constante, lo que los hace muy eficientes para ciertas operaciones.\r\n* **Algoritmos de ordenación y búsqueda**: Muchos algoritmos requieren el uso de arrays para funcionar correctamente.\r\n\r\n---\r\n\r\n## Recursos\r\n\r\n### Documentación\r\n- [MDN - JS Array](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array)\r\n\r\n### Videos\r\n\u003Ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_FsRvYZNbnc?si=9klNICBVCuytw4TU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\r\n\r\n### Practica\r\n\r\nA continuación se presentará una herramienta nueva que llamaremos Retos de Código, así podremos practicar lo aprendido\r\nEl lenguaje con el que iniciaremos será JavaScript. \r\nTambién se podrán usar otros lenguajes si te sientes más cómodo con estos.\r\n\r\nSolo hemos visto que es un array de momento, así que practicaremos lo básico. Para esto usaremos funciones y variables, \r\nno te preocupes, analizaremos esto más adelante en profundidad. Mientras tanto, el texto que se muestre después de los \r\nsiguientes signos \" //\" se llama comentarios. Lo usaremos para describir de manera general qué estamos haciendo. Los \r\npuedes usar en tu código para esto mismo o hacer anotaciones relevantes.\r\n\r\n\u003CCodeChallenge\r\n    description = \"Crea un array\"\r\n    initialCode = {{\r\n        javascript: `function regresarArray() { // Esta primera linea declara una funcion llamada regresarArray, lo que esta dentro de {} sera el codigo que esta funcion ejecutara\r\n    // Escribe tu codigo debajo de esta linea. Ya vimos arriba como declarar un array en JS\r\n    // Crea una variable llamada arr y los valores [10,20,30] para terminar esta prueba\r\n    // Para este caso puedes usar const, let o var. Despues veremos en que se diferencia cada uno\r\n    // Ejemplo: let arr = [10,20,30]\r\n    \r\n    return arr;\r\n}`\r\n    }}\r\n    const tests = {[\r\n    { expected: [10, 20, 30] }\r\n    ]}\r\n    functionName=\"regresarArray\"\r\n client:load />\r\n\r\n \u003CCodeChallenge\r\n    description = \"Obten el valor de un array\"\r\n    initialCode = {{\r\n        javascript: `function regresarArray(arr) { \r\n    // Para esta practica accederemos a un array\r\n    // Tu objetivo es regresar el segundo valor del array dado como parametro\r\n    // Recuerda que los indices en arrays inician en 0\r\n    // Escribe tu codigo debajo de esta linea.\r\n    \r\n    return result;\r\n}`\r\n    }}\r\n    const tests = {[\r\n    { input: [10,20,30], expected: 20 },\r\n    { input: [1,2,3], expected: 2 },\r\n    { input: [5,-1,23], expected: -1 }\r\n    ]}\r\n    functionName=\"regresarArray\"\r\n client:load />\r\n\r\n \u003CCodeChallenge\r\n    description = \"Cambia el valor de un elemento en el array\"\r\n    initialCode = {{\r\n        javascript: `function regresarArray(arr) { \r\n    // Tu objetivo es regresar el array dado\r\n    // Pero cambiando el primer valor a 50\r\n    // Escribe tu codigo debajo de esta linea.\r\n    \r\n    return arr;\r\n}`\r\n    }}\r\n    const tests = {[\r\n    { input: [10,20,30], expected: [50,20,30] },\r\n    { input: [1,2,3], expected: [50,2,3] },\r\n    { input: [5,-1,23], expected: [50,-1,23] }\r\n    ]}\r\n    functionName=\"regresarArray\"\r\n client:load />","src/content/blog/estructura-datos/array.mdx","d665ec4dfd93601e","estructura-datos/array.mdx"]